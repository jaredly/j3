/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 2.0.1.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";


// @ts-ignore
  var TYPES_TO_PROPERTY_NAMES = {
// @ts-ignore
    CallExpression:   "callee",
// @ts-ignore
    MemberExpression: "object",
  };

// @ts-ignore
  function filledArray(count, value) {
// @ts-ignore
    return Array.apply(null, new Array(count))
// @ts-ignore
      .map(function() { return value; });
  }

// @ts-ignore
  function extractOptional(optional, index) {
// @ts-ignore
    return optional ? optional[index] : null;
  }

// @ts-ignore
  function extractList(list, index) {
// @ts-ignore
    return list.map(function(element) { return element[index]; });
  }

// @ts-ignore
  function buildList(head, tail, index) {
// @ts-ignore
    return [head].concat(extractList(tail, index));
  }

// @ts-ignore
  function buildBinaryExpression(head, tail) {
// @ts-ignore
    return tail.reduce(function(result, element) {
// @ts-ignore
      return {
// @ts-ignore
        type: "BinaryExpression",
// @ts-ignore
        operator: element[1],
// @ts-ignore
        left: result,
// @ts-ignore
        right: element[3]
      };
// @ts-ignore
    }, head);
  }

// @ts-ignore
  function buildLogicalExpression(head, tail) {
// @ts-ignore
    return tail.reduce(function(result, element) {
// @ts-ignore
      return {
// @ts-ignore
        type: "LogicalExpression",
// @ts-ignore
        operator: element[1],
// @ts-ignore
        left: result,
// @ts-ignore
        right: element[3]
      };
// @ts-ignore
    }, head);
  }

// @ts-ignore
  function optionalList(value) {
// @ts-ignore
    return value !== null ? value : [];
  }

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var loc = this.location.source + ":" + s.line + ":" + s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { Start: peg$parseStart };
// @ts-ignore
  var peg$startRuleFunction = peg$parseStart;

// @ts-ignore
  var peg$c0 = "\t";
  var peg$c1 = "\v";
  var peg$c2 = "\f";
  var peg$c3 = " ";
  var peg$c4 = "\xA0";
  var peg$c5 = "\uFEFF";
  var peg$c6 = "\n";
  var peg$c7 = "\r\n";
  var peg$c8 = "\r";
  var peg$c9 = "\u2028";
  var peg$c10 = "\u2029";
  var peg$c11 = "/*";
  var peg$c12 = "*/";
  var peg$c13 = "//";
  var peg$c14 = "$";
  var peg$c15 = "_";
  var peg$c16 = "\\";
  var peg$c17 = "\u200C";
  var peg$c18 = "\u200D";
  var peg$c19 = ".";
  var peg$c20 = "0";
  var peg$c21 = "e";
  var peg$c22 = "0x";
  var peg$c23 = "\"";
  var peg$c24 = "'";
  var peg$c25 = "b";
  var peg$c26 = "f";
  var peg$c27 = "n";
  var peg$c28 = "r";
  var peg$c29 = "t";
  var peg$c30 = "v";
  var peg$c31 = "x";
  var peg$c32 = "u";
  var peg$c33 = "/";
  var peg$c34 = "[";
  var peg$c35 = "]";
  var peg$c36 = "break";
  var peg$c37 = "case";
  var peg$c38 = "catch";
  var peg$c39 = "class";
  var peg$c40 = "const";
  var peg$c41 = "continue";
  var peg$c42 = "debugger";
  var peg$c43 = "default";
  var peg$c44 = "delete";
  var peg$c45 = "do";
  var peg$c46 = "else";
  var peg$c47 = "enum";
  var peg$c48 = "export";
  var peg$c49 = "extends";
  var peg$c50 = "false";
  var peg$c51 = "finally";
  var peg$c52 = "for";
  var peg$c53 = "function";
  var peg$c54 = "get";
  var peg$c55 = "if";
  var peg$c56 = "import";
  var peg$c57 = "instanceof";
  var peg$c58 = "in";
  var peg$c59 = "new";
  var peg$c60 = "null";
  var peg$c61 = "return";
  var peg$c62 = "set";
  var peg$c63 = "super";
  var peg$c64 = "switch";
  var peg$c65 = "this";
  var peg$c66 = "throw";
  var peg$c67 = "true";
  var peg$c68 = "try";
  var peg$c69 = "typeof";
  var peg$c70 = "var";
  var peg$c71 = "void";
  var peg$c72 = "while";
  var peg$c73 = "with";
  var peg$c74 = ";";
  var peg$c75 = "}";
  var peg$c76 = "(";
  var peg$c77 = ")";
  var peg$c78 = ",";
  var peg$c79 = "{";
  var peg$c80 = ":";
  var peg$c81 = "++";
  var peg$c82 = "--";
  var peg$c83 = "+";
  var peg$c84 = "=";
  var peg$c85 = "-";
  var peg$c86 = "~";
  var peg$c87 = "!";
  var peg$c88 = "**";
  var peg$c89 = "*";
  var peg$c90 = "%";
  var peg$c91 = "<<";
  var peg$c92 = ">>>";
  var peg$c93 = ">>";
  var peg$c94 = "<=";
  var peg$c95 = ">=";
  var peg$c96 = "<";
  var peg$c97 = ">";
  var peg$c98 = "===";
  var peg$c99 = "!==";
  var peg$c100 = "==";
  var peg$c101 = "!=";
  var peg$c102 = "&";
  var peg$c103 = "^";
  var peg$c104 = "|";
  var peg$c105 = "&&";
  var peg$c106 = "||";
  var peg$c107 = "?";
  var peg$c108 = "**=";
  var peg$c109 = "*=";
  var peg$c110 = "/=";
  var peg$c111 = "%=";
  var peg$c112 = "+=";
  var peg$c113 = "-=";
  var peg$c114 = "<<=";
  var peg$c115 = ">>=";
  var peg$c116 = ">>>=";
  var peg$c117 = "&=";
  var peg$c118 = "^=";
  var peg$c119 = "|=";

  var peg$r0 = /^[\n\r\u2028\u2029]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[1-9]/;
  var peg$r3 = /^[+\-]/;
  var peg$r4 = /^[0-9a-f]/i;
  var peg$r5 = /^[*\\\/[]/;
  var peg$r6 = /^[\\\/[]/;
  var peg$r7 = /^[\]\\]/;
  var peg$r8 = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/;
  var peg$r9 = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/;
  var peg$r10 = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
  var peg$r11 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/;
  var peg$r12 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/;
  var peg$r13 = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/;
  var peg$r14 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/;
  var peg$r15 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/;
  var peg$r16 = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/;
  var peg$r17 = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/;
  var peg$r18 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  var peg$r19 = /^[+=]/;
  var peg$r20 = /^[\-=]/;
  var peg$r21 = /^[&=]/;
  var peg$r22 = /^[|=]/;

  var peg$e0 = peg$anyExpectation();
  var peg$e1 = peg$otherExpectation("whitespace");
  var peg$e2 = peg$literalExpectation("\t", false);
  var peg$e3 = peg$literalExpectation("\v", false);
  var peg$e4 = peg$literalExpectation("\f", false);
  var peg$e5 = peg$literalExpectation(" ", false);
  var peg$e6 = peg$literalExpectation("\xA0", false);
  var peg$e7 = peg$literalExpectation("\uFEFF", false);
  var peg$e8 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false);
  var peg$e9 = peg$otherExpectation("end of line");
  var peg$e10 = peg$literalExpectation("\n", false);
  var peg$e11 = peg$literalExpectation("\r\n", false);
  var peg$e12 = peg$literalExpectation("\r", false);
  var peg$e13 = peg$literalExpectation("\u2028", false);
  var peg$e14 = peg$literalExpectation("\u2029", false);
  var peg$e15 = peg$otherExpectation("comment");
  var peg$e16 = peg$literalExpectation("/*", false);
  var peg$e17 = peg$literalExpectation("*/", false);
  var peg$e18 = peg$literalExpectation("//", false);
  var peg$e19 = peg$otherExpectation("identifier");
  var peg$e20 = peg$literalExpectation("$", false);
  var peg$e21 = peg$literalExpectation("_", false);
  var peg$e22 = peg$literalExpectation("\\", false);
  var peg$e23 = peg$literalExpectation("\u200C", false);
  var peg$e24 = peg$literalExpectation("\u200D", false);
  var peg$e25 = peg$otherExpectation("number");
  var peg$e26 = peg$literalExpectation(".", false);
  var peg$e27 = peg$literalExpectation("0", false);
  var peg$e28 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e29 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e30 = peg$literalExpectation("e", true);
  var peg$e31 = peg$classExpectation(["+", "-"], false, false);
  var peg$e32 = peg$literalExpectation("0x", true);
  var peg$e33 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  var peg$e34 = peg$otherExpectation("string");
  var peg$e35 = peg$literalExpectation("\"", false);
  var peg$e36 = peg$literalExpectation("'", false);
  var peg$e37 = peg$literalExpectation("b", false);
  var peg$e38 = peg$literalExpectation("f", false);
  var peg$e39 = peg$literalExpectation("n", false);
  var peg$e40 = peg$literalExpectation("r", false);
  var peg$e41 = peg$literalExpectation("t", false);
  var peg$e42 = peg$literalExpectation("v", false);
  var peg$e43 = peg$literalExpectation("x", false);
  var peg$e44 = peg$literalExpectation("u", false);
  var peg$e45 = peg$otherExpectation("regular expression");
  var peg$e46 = peg$literalExpectation("/", false);
  var peg$e47 = peg$classExpectation(["*", "\\", "/", "["], false, false);
  var peg$e48 = peg$classExpectation(["\\", "/", "["], false, false);
  var peg$e49 = peg$literalExpectation("[", false);
  var peg$e50 = peg$literalExpectation("]", false);
  var peg$e51 = peg$classExpectation(["]", "\\"], false, false);
  var peg$e52 = peg$classExpectation([["a", "z"], "\xB5", ["\xDF", "\xF6"], ["\xF8", "\xFF"], "\u0101", "\u0103", "\u0105", "\u0107", "\u0109", "\u010B", "\u010D", "\u010F", "\u0111", "\u0113", "\u0115", "\u0117", "\u0119", "\u011B", "\u011D", "\u011F", "\u0121", "\u0123", "\u0125", "\u0127", "\u0129", "\u012B", "\u012D", "\u012F", "\u0131", "\u0133", "\u0135", ["\u0137", "\u0138"], "\u013A", "\u013C", "\u013E", "\u0140", "\u0142", "\u0144", "\u0146", ["\u0148", "\u0149"], "\u014B", "\u014D", "\u014F", "\u0151", "\u0153", "\u0155", "\u0157", "\u0159", "\u015B", "\u015D", "\u015F", "\u0161", "\u0163", "\u0165", "\u0167", "\u0169", "\u016B", "\u016D", "\u016F", "\u0171", "\u0173", "\u0175", "\u0177", "\u017A", "\u017C", ["\u017E", "\u0180"], "\u0183", "\u0185", "\u0188", ["\u018C", "\u018D"], "\u0192", "\u0195", ["\u0199", "\u019B"], "\u019E", "\u01A1", "\u01A3", "\u01A5", "\u01A8", ["\u01AA", "\u01AB"], "\u01AD", "\u01B0", "\u01B4", "\u01B6", ["\u01B9", "\u01BA"], ["\u01BD", "\u01BF"], "\u01C6", "\u01C9", "\u01CC", "\u01CE", "\u01D0", "\u01D2", "\u01D4", "\u01D6", "\u01D8", "\u01DA", ["\u01DC", "\u01DD"], "\u01DF", "\u01E1", "\u01E3", "\u01E5", "\u01E7", "\u01E9", "\u01EB", "\u01ED", ["\u01EF", "\u01F0"], "\u01F3", "\u01F5", "\u01F9", "\u01FB", "\u01FD", "\u01FF", "\u0201", "\u0203", "\u0205", "\u0207", "\u0209", "\u020B", "\u020D", "\u020F", "\u0211", "\u0213", "\u0215", "\u0217", "\u0219", "\u021B", "\u021D", "\u021F", "\u0221", "\u0223", "\u0225", "\u0227", "\u0229", "\u022B", "\u022D", "\u022F", "\u0231", ["\u0233", "\u0239"], "\u023C", ["\u023F", "\u0240"], "\u0242", "\u0247", "\u0249", "\u024B", "\u024D", ["\u024F", "\u0293"], ["\u0295", "\u02AF"], "\u0371", "\u0373", "\u0377", ["\u037B", "\u037D"], "\u0390", ["\u03AC", "\u03CE"], ["\u03D0", "\u03D1"], ["\u03D5", "\u03D7"], "\u03D9", "\u03DB", "\u03DD", "\u03DF", "\u03E1", "\u03E3", "\u03E5", "\u03E7", "\u03E9", "\u03EB", "\u03ED", ["\u03EF", "\u03F3"], "\u03F5", "\u03F8", ["\u03FB", "\u03FC"], ["\u0430", "\u045F"], "\u0461", "\u0463", "\u0465", "\u0467", "\u0469", "\u046B", "\u046D", "\u046F", "\u0471", "\u0473", "\u0475", "\u0477", "\u0479", "\u047B", "\u047D", "\u047F", "\u0481", "\u048B", "\u048D", "\u048F", "\u0491", "\u0493", "\u0495", "\u0497", "\u0499", "\u049B", "\u049D", "\u049F", "\u04A1", "\u04A3", "\u04A5", "\u04A7", "\u04A9", "\u04AB", "\u04AD", "\u04AF", "\u04B1", "\u04B3", "\u04B5", "\u04B7", "\u04B9", "\u04BB", "\u04BD", "\u04BF", "\u04C2", "\u04C4", "\u04C6", "\u04C8", "\u04CA", "\u04CC", ["\u04CE", "\u04CF"], "\u04D1", "\u04D3", "\u04D5", "\u04D7", "\u04D9", "\u04DB", "\u04DD", "\u04DF", "\u04E1", "\u04E3", "\u04E5", "\u04E7", "\u04E9", "\u04EB", "\u04ED", "\u04EF", "\u04F1", "\u04F3", "\u04F5", "\u04F7", "\u04F9", "\u04FB", "\u04FD", "\u04FF", "\u0501", "\u0503", "\u0505", "\u0507", "\u0509", "\u050B", "\u050D", "\u050F", "\u0511", "\u0513", "\u0515", "\u0517", "\u0519", "\u051B", "\u051D", "\u051F", "\u0521", "\u0523", "\u0525", "\u0527", "\u0529", "\u052B", "\u052D", "\u052F", ["\u0561", "\u0587"], ["\u13F8", "\u13FD"], ["\u1D00", "\u1D2B"], ["\u1D6B", "\u1D77"], ["\u1D79", "\u1D9A"], "\u1E01", "\u1E03", "\u1E05", "\u1E07", "\u1E09", "\u1E0B", "\u1E0D", "\u1E0F", "\u1E11", "\u1E13", "\u1E15", "\u1E17", "\u1E19", "\u1E1B", "\u1E1D", "\u1E1F", "\u1E21", "\u1E23", "\u1E25", "\u1E27", "\u1E29", "\u1E2B", "\u1E2D", "\u1E2F", "\u1E31", "\u1E33", "\u1E35", "\u1E37", "\u1E39", "\u1E3B", "\u1E3D", "\u1E3F", "\u1E41", "\u1E43", "\u1E45", "\u1E47", "\u1E49", "\u1E4B", "\u1E4D", "\u1E4F", "\u1E51", "\u1E53", "\u1E55", "\u1E57", "\u1E59", "\u1E5B", "\u1E5D", "\u1E5F", "\u1E61", "\u1E63", "\u1E65", "\u1E67", "\u1E69", "\u1E6B", "\u1E6D", "\u1E6F", "\u1E71", "\u1E73", "\u1E75", "\u1E77", "\u1E79", "\u1E7B", "\u1E7D", "\u1E7F", "\u1E81", "\u1E83", "\u1E85", "\u1E87", "\u1E89", "\u1E8B", "\u1E8D", "\u1E8F", "\u1E91", "\u1E93", ["\u1E95", "\u1E9D"], "\u1E9F", "\u1EA1", "\u1EA3", "\u1EA5", "\u1EA7", "\u1EA9", "\u1EAB", "\u1EAD", "\u1EAF", "\u1EB1", "\u1EB3", "\u1EB5", "\u1EB7", "\u1EB9", "\u1EBB", "\u1EBD", "\u1EBF", "\u1EC1", "\u1EC3", "\u1EC5", "\u1EC7", "\u1EC9", "\u1ECB", "\u1ECD", "\u1ECF", "\u1ED1", "\u1ED3", "\u1ED5", "\u1ED7", "\u1ED9", "\u1EDB", "\u1EDD", "\u1EDF", "\u1EE1", "\u1EE3", "\u1EE5", "\u1EE7", "\u1EE9", "\u1EEB", "\u1EED", "\u1EEF", "\u1EF1", "\u1EF3", "\u1EF5", "\u1EF7", "\u1EF9", "\u1EFB", "\u1EFD", ["\u1EFF", "\u1F07"], ["\u1F10", "\u1F15"], ["\u1F20", "\u1F27"], ["\u1F30", "\u1F37"], ["\u1F40", "\u1F45"], ["\u1F50", "\u1F57"], ["\u1F60", "\u1F67"], ["\u1F70", "\u1F7D"], ["\u1F80", "\u1F87"], ["\u1F90", "\u1F97"], ["\u1FA0", "\u1FA7"], ["\u1FB0", "\u1FB4"], ["\u1FB6", "\u1FB7"], "\u1FBE", ["\u1FC2", "\u1FC4"], ["\u1FC6", "\u1FC7"], ["\u1FD0", "\u1FD3"], ["\u1FD6", "\u1FD7"], ["\u1FE0", "\u1FE7"], ["\u1FF2", "\u1FF4"], ["\u1FF6", "\u1FF7"], "\u210A", ["\u210E", "\u210F"], "\u2113", "\u212F", "\u2134", "\u2139", ["\u213C", "\u213D"], ["\u2146", "\u2149"], "\u214E", "\u2184", ["\u2C30", "\u2C5E"], "\u2C61", ["\u2C65", "\u2C66"], "\u2C68", "\u2C6A", "\u2C6C", "\u2C71", ["\u2C73", "\u2C74"], ["\u2C76", "\u2C7B"], "\u2C81", "\u2C83", "\u2C85", "\u2C87", "\u2C89", "\u2C8B", "\u2C8D", "\u2C8F", "\u2C91", "\u2C93", "\u2C95", "\u2C97", "\u2C99", "\u2C9B", "\u2C9D", "\u2C9F", "\u2CA1", "\u2CA3", "\u2CA5", "\u2CA7", "\u2CA9", "\u2CAB", "\u2CAD", "\u2CAF", "\u2CB1", "\u2CB3", "\u2CB5", "\u2CB7", "\u2CB9", "\u2CBB", "\u2CBD", "\u2CBF", "\u2CC1", "\u2CC3", "\u2CC5", "\u2CC7", "\u2CC9", "\u2CCB", "\u2CCD", "\u2CCF", "\u2CD1", "\u2CD3", "\u2CD5", "\u2CD7", "\u2CD9", "\u2CDB", "\u2CDD", "\u2CDF", "\u2CE1", ["\u2CE3", "\u2CE4"], "\u2CEC", "\u2CEE", "\u2CF3", ["\u2D00", "\u2D25"], "\u2D27", "\u2D2D", "\uA641", "\uA643", "\uA645", "\uA647", "\uA649", "\uA64B", "\uA64D", "\uA64F", "\uA651", "\uA653", "\uA655", "\uA657", "\uA659", "\uA65B", "\uA65D", "\uA65F", "\uA661", "\uA663", "\uA665", "\uA667", "\uA669", "\uA66B", "\uA66D", "\uA681", "\uA683", "\uA685", "\uA687", "\uA689", "\uA68B", "\uA68D", "\uA68F", "\uA691", "\uA693", "\uA695", "\uA697", "\uA699", "\uA69B", "\uA723", "\uA725", "\uA727", "\uA729", "\uA72B", "\uA72D", ["\uA72F", "\uA731"], "\uA733", "\uA735", "\uA737", "\uA739", "\uA73B", "\uA73D", "\uA73F", "\uA741", "\uA743", "\uA745", "\uA747", "\uA749", "\uA74B", "\uA74D", "\uA74F", "\uA751", "\uA753", "\uA755", "\uA757", "\uA759", "\uA75B", "\uA75D", "\uA75F", "\uA761", "\uA763", "\uA765", "\uA767", "\uA769", "\uA76B", "\uA76D", "\uA76F", ["\uA771", "\uA778"], "\uA77A", "\uA77C", "\uA77F", "\uA781", "\uA783", "\uA785", "\uA787", "\uA78C", "\uA78E", "\uA791", ["\uA793", "\uA795"], "\uA797", "\uA799", "\uA79B", "\uA79D", "\uA79F", "\uA7A1", "\uA7A3", "\uA7A5", "\uA7A7", "\uA7A9", "\uA7B5", "\uA7B7", "\uA7FA", ["\uAB30", "\uAB5A"], ["\uAB60", "\uAB65"], ["\uAB70", "\uABBF"], ["\uFB00", "\uFB06"], ["\uFB13", "\uFB17"], ["\uFF41", "\uFF5A"]], false, false);
  var peg$e53 = peg$classExpectation([["\u02B0", "\u02C1"], ["\u02C6", "\u02D1"], ["\u02E0", "\u02E4"], "\u02EC", "\u02EE", "\u0374", "\u037A", "\u0559", "\u0640", ["\u06E5", "\u06E6"], ["\u07F4", "\u07F5"], "\u07FA", "\u081A", "\u0824", "\u0828", "\u0971", "\u0E46", "\u0EC6", "\u10FC", "\u17D7", "\u1843", "\u1AA7", ["\u1C78", "\u1C7D"], ["\u1D2C", "\u1D6A"], "\u1D78", ["\u1D9B", "\u1DBF"], "\u2071", "\u207F", ["\u2090", "\u209C"], ["\u2C7C", "\u2C7D"], "\u2D6F", "\u2E2F", "\u3005", ["\u3031", "\u3035"], "\u303B", ["\u309D", "\u309E"], ["\u30FC", "\u30FE"], "\uA015", ["\uA4F8", "\uA4FD"], "\uA60C", "\uA67F", ["\uA69C", "\uA69D"], ["\uA717", "\uA71F"], "\uA770", "\uA788", ["\uA7F8", "\uA7F9"], "\uA9CF", "\uA9E6", "\uAA70", "\uAADD", ["\uAAF3", "\uAAF4"], ["\uAB5C", "\uAB5F"], "\uFF70", ["\uFF9E", "\uFF9F"]], false, false);
  var peg$e54 = peg$classExpectation(["\xAA", "\xBA", "\u01BB", ["\u01C0", "\u01C3"], "\u0294", ["\u05D0", "\u05EA"], ["\u05F0", "\u05F2"], ["\u0620", "\u063F"], ["\u0641", "\u064A"], ["\u066E", "\u066F"], ["\u0671", "\u06D3"], "\u06D5", ["\u06EE", "\u06EF"], ["\u06FA", "\u06FC"], "\u06FF", "\u0710", ["\u0712", "\u072F"], ["\u074D", "\u07A5"], "\u07B1", ["\u07CA", "\u07EA"], ["\u0800", "\u0815"], ["\u0840", "\u0858"], ["\u08A0", "\u08B4"], ["\u0904", "\u0939"], "\u093D", "\u0950", ["\u0958", "\u0961"], ["\u0972", "\u0980"], ["\u0985", "\u098C"], ["\u098F", "\u0990"], ["\u0993", "\u09A8"], ["\u09AA", "\u09B0"], "\u09B2", ["\u09B6", "\u09B9"], "\u09BD", "\u09CE", ["\u09DC", "\u09DD"], ["\u09DF", "\u09E1"], ["\u09F0", "\u09F1"], ["\u0A05", "\u0A0A"], ["\u0A0F", "\u0A10"], ["\u0A13", "\u0A28"], ["\u0A2A", "\u0A30"], ["\u0A32", "\u0A33"], ["\u0A35", "\u0A36"], ["\u0A38", "\u0A39"], ["\u0A59", "\u0A5C"], "\u0A5E", ["\u0A72", "\u0A74"], ["\u0A85", "\u0A8D"], ["\u0A8F", "\u0A91"], ["\u0A93", "\u0AA8"], ["\u0AAA", "\u0AB0"], ["\u0AB2", "\u0AB3"], ["\u0AB5", "\u0AB9"], "\u0ABD", "\u0AD0", ["\u0AE0", "\u0AE1"], "\u0AF9", ["\u0B05", "\u0B0C"], ["\u0B0F", "\u0B10"], ["\u0B13", "\u0B28"], ["\u0B2A", "\u0B30"], ["\u0B32", "\u0B33"], ["\u0B35", "\u0B39"], "\u0B3D", ["\u0B5C", "\u0B5D"], ["\u0B5F", "\u0B61"], "\u0B71", "\u0B83", ["\u0B85", "\u0B8A"], ["\u0B8E", "\u0B90"], ["\u0B92", "\u0B95"], ["\u0B99", "\u0B9A"], "\u0B9C", ["\u0B9E", "\u0B9F"], ["\u0BA3", "\u0BA4"], ["\u0BA8", "\u0BAA"], ["\u0BAE", "\u0BB9"], "\u0BD0", ["\u0C05", "\u0C0C"], ["\u0C0E", "\u0C10"], ["\u0C12", "\u0C28"], ["\u0C2A", "\u0C39"], "\u0C3D", ["\u0C58", "\u0C5A"], ["\u0C60", "\u0C61"], ["\u0C85", "\u0C8C"], ["\u0C8E", "\u0C90"], ["\u0C92", "\u0CA8"], ["\u0CAA", "\u0CB3"], ["\u0CB5", "\u0CB9"], "\u0CBD", "\u0CDE", ["\u0CE0", "\u0CE1"], ["\u0CF1", "\u0CF2"], ["\u0D05", "\u0D0C"], ["\u0D0E", "\u0D10"], ["\u0D12", "\u0D3A"], "\u0D3D", "\u0D4E", ["\u0D5F", "\u0D61"], ["\u0D7A", "\u0D7F"], ["\u0D85", "\u0D96"], ["\u0D9A", "\u0DB1"], ["\u0DB3", "\u0DBB"], "\u0DBD", ["\u0DC0", "\u0DC6"], ["\u0E01", "\u0E30"], ["\u0E32", "\u0E33"], ["\u0E40", "\u0E45"], ["\u0E81", "\u0E82"], "\u0E84", ["\u0E87", "\u0E88"], "\u0E8A", "\u0E8D", ["\u0E94", "\u0E97"], ["\u0E99", "\u0E9F"], ["\u0EA1", "\u0EA3"], "\u0EA5", "\u0EA7", ["\u0EAA", "\u0EAB"], ["\u0EAD", "\u0EB0"], ["\u0EB2", "\u0EB3"], "\u0EBD", ["\u0EC0", "\u0EC4"], ["\u0EDC", "\u0EDF"], "\u0F00", ["\u0F40", "\u0F47"], ["\u0F49", "\u0F6C"], ["\u0F88", "\u0F8C"], ["\u1000", "\u102A"], "\u103F", ["\u1050", "\u1055"], ["\u105A", "\u105D"], "\u1061", ["\u1065", "\u1066"], ["\u106E", "\u1070"], ["\u1075", "\u1081"], "\u108E", ["\u10D0", "\u10FA"], ["\u10FD", "\u1248"], ["\u124A", "\u124D"], ["\u1250", "\u1256"], "\u1258", ["\u125A", "\u125D"], ["\u1260", "\u1288"], ["\u128A", "\u128D"], ["\u1290", "\u12B0"], ["\u12B2", "\u12B5"], ["\u12B8", "\u12BE"], "\u12C0", ["\u12C2", "\u12C5"], ["\u12C8", "\u12D6"], ["\u12D8", "\u1310"], ["\u1312", "\u1315"], ["\u1318", "\u135A"], ["\u1380", "\u138F"], ["\u1401", "\u166C"], ["\u166F", "\u167F"], ["\u1681", "\u169A"], ["\u16A0", "\u16EA"], ["\u16F1", "\u16F8"], ["\u1700", "\u170C"], ["\u170E", "\u1711"], ["\u1720", "\u1731"], ["\u1740", "\u1751"], ["\u1760", "\u176C"], ["\u176E", "\u1770"], ["\u1780", "\u17B3"], "\u17DC", ["\u1820", "\u1842"], ["\u1844", "\u1877"], ["\u1880", "\u18A8"], "\u18AA", ["\u18B0", "\u18F5"], ["\u1900", "\u191E"], ["\u1950", "\u196D"], ["\u1970", "\u1974"], ["\u1980", "\u19AB"], ["\u19B0", "\u19C9"], ["\u1A00", "\u1A16"], ["\u1A20", "\u1A54"], ["\u1B05", "\u1B33"], ["\u1B45", "\u1B4B"], ["\u1B83", "\u1BA0"], ["\u1BAE", "\u1BAF"], ["\u1BBA", "\u1BE5"], ["\u1C00", "\u1C23"], ["\u1C4D", "\u1C4F"], ["\u1C5A", "\u1C77"], ["\u1CE9", "\u1CEC"], ["\u1CEE", "\u1CF1"], ["\u1CF5", "\u1CF6"], ["\u2135", "\u2138"], ["\u2D30", "\u2D67"], ["\u2D80", "\u2D96"], ["\u2DA0", "\u2DA6"], ["\u2DA8", "\u2DAE"], ["\u2DB0", "\u2DB6"], ["\u2DB8", "\u2DBE"], ["\u2DC0", "\u2DC6"], ["\u2DC8", "\u2DCE"], ["\u2DD0", "\u2DD6"], ["\u2DD8", "\u2DDE"], "\u3006", "\u303C", ["\u3041", "\u3096"], "\u309F", ["\u30A1", "\u30FA"], "\u30FF", ["\u3105", "\u312D"], ["\u3131", "\u318E"], ["\u31A0", "\u31BA"], ["\u31F0", "\u31FF"], ["\u3400", "\u4DB5"], ["\u4E00", "\u9FD5"], ["\uA000", "\uA014"], ["\uA016", "\uA48C"], ["\uA4D0", "\uA4F7"], ["\uA500", "\uA60B"], ["\uA610", "\uA61F"], ["\uA62A", "\uA62B"], "\uA66E", ["\uA6A0", "\uA6E5"], "\uA78F", "\uA7F7", ["\uA7FB", "\uA801"], ["\uA803", "\uA805"], ["\uA807", "\uA80A"], ["\uA80C", "\uA822"], ["\uA840", "\uA873"], ["\uA882", "\uA8B3"], ["\uA8F2", "\uA8F7"], "\uA8FB", "\uA8FD", ["\uA90A", "\uA925"], ["\uA930", "\uA946"], ["\uA960", "\uA97C"], ["\uA984", "\uA9B2"], ["\uA9E0", "\uA9E4"], ["\uA9E7", "\uA9EF"], ["\uA9FA", "\uA9FE"], ["\uAA00", "\uAA28"], ["\uAA40", "\uAA42"], ["\uAA44", "\uAA4B"], ["\uAA60", "\uAA6F"], ["\uAA71", "\uAA76"], "\uAA7A", ["\uAA7E", "\uAAAF"], "\uAAB1", ["\uAAB5", "\uAAB6"], ["\uAAB9", "\uAABD"], "\uAAC0", "\uAAC2", ["\uAADB", "\uAADC"], ["\uAAE0", "\uAAEA"], "\uAAF2", ["\uAB01", "\uAB06"], ["\uAB09", "\uAB0E"], ["\uAB11", "\uAB16"], ["\uAB20", "\uAB26"], ["\uAB28", "\uAB2E"], ["\uABC0", "\uABE2"], ["\uAC00", "\uD7A3"], ["\uD7B0", "\uD7C6"], ["\uD7CB", "\uD7FB"], ["\uF900", "\uFA6D"], ["\uFA70", "\uFAD9"], "\uFB1D", ["\uFB1F", "\uFB28"], ["\uFB2A", "\uFB36"], ["\uFB38", "\uFB3C"], "\uFB3E", ["\uFB40", "\uFB41"], ["\uFB43", "\uFB44"], ["\uFB46", "\uFBB1"], ["\uFBD3", "\uFD3D"], ["\uFD50", "\uFD8F"], ["\uFD92", "\uFDC7"], ["\uFDF0", "\uFDFB"], ["\uFE70", "\uFE74"], ["\uFE76", "\uFEFC"], ["\uFF66", "\uFF6F"], ["\uFF71", "\uFF9D"], ["\uFFA0", "\uFFBE"], ["\uFFC2", "\uFFC7"], ["\uFFCA", "\uFFCF"], ["\uFFD2", "\uFFD7"], ["\uFFDA", "\uFFDC"]], false, false);
  var peg$e55 = peg$classExpectation(["\u01C5", "\u01C8", "\u01CB", "\u01F2", ["\u1F88", "\u1F8F"], ["\u1F98", "\u1F9F"], ["\u1FA8", "\u1FAF"], "\u1FBC", "\u1FCC", "\u1FFC"], false, false);
  var peg$e56 = peg$classExpectation([["A", "Z"], ["\xC0", "\xD6"], ["\xD8", "\xDE"], "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", ["\u0178", "\u0179"], "\u017B", "\u017D", ["\u0181", "\u0182"], "\u0184", ["\u0186", "\u0187"], ["\u0189", "\u018B"], ["\u018E", "\u0191"], ["\u0193", "\u0194"], ["\u0196", "\u0198"], ["\u019C", "\u019D"], ["\u019F", "\u01A0"], "\u01A2", "\u01A4", ["\u01A6", "\u01A7"], "\u01A9", "\u01AC", ["\u01AE", "\u01AF"], ["\u01B1", "\u01B3"], "\u01B5", ["\u01B7", "\u01B8"], "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", ["\u01F6", "\u01F8"], "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232", ["\u023A", "\u023B"], ["\u023D", "\u023E"], "\u0241", ["\u0243", "\u0246"], "\u0248", "\u024A", "\u024C", "\u024E", "\u0370", "\u0372", "\u0376", "\u037F", "\u0386", ["\u0388", "\u038A"], "\u038C", ["\u038E", "\u038F"], ["\u0391", "\u03A1"], ["\u03A3", "\u03AB"], "\u03CF", ["\u03D2", "\u03D4"], "\u03D8", "\u03DA", "\u03DC", "\u03DE", "\u03E0", "\u03E2", "\u03E4", "\u03E6", "\u03E8", "\u03EA", "\u03EC", "\u03EE", "\u03F4", "\u03F7", ["\u03F9", "\u03FA"], ["\u03FD", "\u042F"], "\u0460", "\u0462", "\u0464", "\u0466", "\u0468", "\u046A", "\u046C", "\u046E", "\u0470", "\u0472", "\u0474", "\u0476", "\u0478", "\u047A", "\u047C", "\u047E", "\u0480", "\u048A", "\u048C", "\u048E", "\u0490", "\u0492", "\u0494", "\u0496", "\u0498", "\u049A", "\u049C", "\u049E", "\u04A0", "\u04A2", "\u04A4", "\u04A6", "\u04A8", "\u04AA", "\u04AC", "\u04AE", "\u04B0", "\u04B2", "\u04B4", "\u04B6", "\u04B8", "\u04BA", "\u04BC", "\u04BE", ["\u04C0", "\u04C1"], "\u04C3", "\u04C5", "\u04C7", "\u04C9", "\u04CB", "\u04CD", "\u04D0", "\u04D2", "\u04D4", "\u04D6", "\u04D8", "\u04DA", "\u04DC", "\u04DE", "\u04E0", "\u04E2", "\u04E4", "\u04E6", "\u04E8", "\u04EA", "\u04EC", "\u04EE", "\u04F0", "\u04F2", "\u04F4", "\u04F6", "\u04F8", "\u04FA", "\u04FC", "\u04FE", "\u0500", "\u0502", "\u0504", "\u0506", "\u0508", "\u050A", "\u050C", "\u050E", "\u0510", "\u0512", "\u0514", "\u0516", "\u0518", "\u051A", "\u051C", "\u051E", "\u0520", "\u0522", "\u0524", "\u0526", "\u0528", "\u052A", "\u052C", "\u052E", ["\u0531", "\u0556"], ["\u10A0", "\u10C5"], "\u10C7", "\u10CD", ["\u13A0", "\u13F5"], "\u1E00", "\u1E02", "\u1E04", "\u1E06", "\u1E08", "\u1E0A", "\u1E0C", "\u1E0E", "\u1E10", "\u1E12", "\u1E14", "\u1E16", "\u1E18", "\u1E1A", "\u1E1C", "\u1E1E", "\u1E20", "\u1E22", "\u1E24", "\u1E26", "\u1E28", "\u1E2A", "\u1E2C", "\u1E2E", "\u1E30", "\u1E32", "\u1E34", "\u1E36", "\u1E38", "\u1E3A", "\u1E3C", "\u1E3E", "\u1E40", "\u1E42", "\u1E44", "\u1E46", "\u1E48", "\u1E4A", "\u1E4C", "\u1E4E", "\u1E50", "\u1E52", "\u1E54", "\u1E56", "\u1E58", "\u1E5A", "\u1E5C", "\u1E5E", "\u1E60", "\u1E62", "\u1E64", "\u1E66", "\u1E68", "\u1E6A", "\u1E6C", "\u1E6E", "\u1E70", "\u1E72", "\u1E74", "\u1E76", "\u1E78", "\u1E7A", "\u1E7C", "\u1E7E", "\u1E80", "\u1E82", "\u1E84", "\u1E86", "\u1E88", "\u1E8A", "\u1E8C", "\u1E8E", "\u1E90", "\u1E92", "\u1E94", "\u1E9E", "\u1EA0", "\u1EA2", "\u1EA4", "\u1EA6", "\u1EA8", "\u1EAA", "\u1EAC", "\u1EAE", "\u1EB0", "\u1EB2", "\u1EB4", "\u1EB6", "\u1EB8", "\u1EBA", "\u1EBC", "\u1EBE", "\u1EC0", "\u1EC2", "\u1EC4", "\u1EC6", "\u1EC8", "\u1ECA", "\u1ECC", "\u1ECE", "\u1ED0", "\u1ED2", "\u1ED4", "\u1ED6", "\u1ED8", "\u1EDA", "\u1EDC", "\u1EDE", "\u1EE0", "\u1EE2", "\u1EE4", "\u1EE6", "\u1EE8", "\u1EEA", "\u1EEC", "\u1EEE", "\u1EF0", "\u1EF2", "\u1EF4", "\u1EF6", "\u1EF8", "\u1EFA", "\u1EFC", "\u1EFE", ["\u1F08", "\u1F0F"], ["\u1F18", "\u1F1D"], ["\u1F28", "\u1F2F"], ["\u1F38", "\u1F3F"], ["\u1F48", "\u1F4D"], "\u1F59", "\u1F5B", "\u1F5D", "\u1F5F", ["\u1F68", "\u1F6F"], ["\u1FB8", "\u1FBB"], ["\u1FC8", "\u1FCB"], ["\u1FD8", "\u1FDB"], ["\u1FE8", "\u1FEC"], ["\u1FF8", "\u1FFB"], "\u2102", "\u2107", ["\u210B", "\u210D"], ["\u2110", "\u2112"], "\u2115", ["\u2119", "\u211D"], "\u2124", "\u2126", "\u2128", ["\u212A", "\u212D"], ["\u2130", "\u2133"], ["\u213E", "\u213F"], "\u2145", "\u2183", ["\u2C00", "\u2C2E"], "\u2C60", ["\u2C62", "\u2C64"], "\u2C67", "\u2C69", "\u2C6B", ["\u2C6D", "\u2C70"], "\u2C72", "\u2C75", ["\u2C7E", "\u2C80"], "\u2C82", "\u2C84", "\u2C86", "\u2C88", "\u2C8A", "\u2C8C", "\u2C8E", "\u2C90", "\u2C92", "\u2C94", "\u2C96", "\u2C98", "\u2C9A", "\u2C9C", "\u2C9E", "\u2CA0", "\u2CA2", "\u2CA4", "\u2CA6", "\u2CA8", "\u2CAA", "\u2CAC", "\u2CAE", "\u2CB0", "\u2CB2", "\u2CB4", "\u2CB6", "\u2CB8", "\u2CBA", "\u2CBC", "\u2CBE", "\u2CC0", "\u2CC2", "\u2CC4", "\u2CC6", "\u2CC8", "\u2CCA", "\u2CCC", "\u2CCE", "\u2CD0", "\u2CD2", "\u2CD4", "\u2CD6", "\u2CD8", "\u2CDA", "\u2CDC", "\u2CDE", "\u2CE0", "\u2CE2", "\u2CEB", "\u2CED", "\u2CF2", "\uA640", "\uA642", "\uA644", "\uA646", "\uA648", "\uA64A", "\uA64C", "\uA64E", "\uA650", "\uA652", "\uA654", "\uA656", "\uA658", "\uA65A", "\uA65C", "\uA65E", "\uA660", "\uA662", "\uA664", "\uA666", "\uA668", "\uA66A", "\uA66C", "\uA680", "\uA682", "\uA684", "\uA686", "\uA688", "\uA68A", "\uA68C", "\uA68E", "\uA690", "\uA692", "\uA694", "\uA696", "\uA698", "\uA69A", "\uA722", "\uA724", "\uA726", "\uA728", "\uA72A", "\uA72C", "\uA72E", "\uA732", "\uA734", "\uA736", "\uA738", "\uA73A", "\uA73C", "\uA73E", "\uA740", "\uA742", "\uA744", "\uA746", "\uA748", "\uA74A", "\uA74C", "\uA74E", "\uA750", "\uA752", "\uA754", "\uA756", "\uA758", "\uA75A", "\uA75C", "\uA75E", "\uA760", "\uA762", "\uA764", "\uA766", "\uA768", "\uA76A", "\uA76C", "\uA76E", "\uA779", "\uA77B", ["\uA77D", "\uA77E"], "\uA780", "\uA782", "\uA784", "\uA786", "\uA78B", "\uA78D", "\uA790", "\uA792", "\uA796", "\uA798", "\uA79A", "\uA79C", "\uA79E", "\uA7A0", "\uA7A2", "\uA7A4", "\uA7A6", "\uA7A8", ["\uA7AA", "\uA7AD"], ["\uA7B0", "\uA7B4"], "\uA7B6", ["\uFF21", "\uFF3A"]], false, false);
  var peg$e57 = peg$classExpectation(["\u0903", "\u093B", ["\u093E", "\u0940"], ["\u0949", "\u094C"], ["\u094E", "\u094F"], ["\u0982", "\u0983"], ["\u09BE", "\u09C0"], ["\u09C7", "\u09C8"], ["\u09CB", "\u09CC"], "\u09D7", "\u0A03", ["\u0A3E", "\u0A40"], "\u0A83", ["\u0ABE", "\u0AC0"], "\u0AC9", ["\u0ACB", "\u0ACC"], ["\u0B02", "\u0B03"], "\u0B3E", "\u0B40", ["\u0B47", "\u0B48"], ["\u0B4B", "\u0B4C"], "\u0B57", ["\u0BBE", "\u0BBF"], ["\u0BC1", "\u0BC2"], ["\u0BC6", "\u0BC8"], ["\u0BCA", "\u0BCC"], "\u0BD7", ["\u0C01", "\u0C03"], ["\u0C41", "\u0C44"], ["\u0C82", "\u0C83"], "\u0CBE", ["\u0CC0", "\u0CC4"], ["\u0CC7", "\u0CC8"], ["\u0CCA", "\u0CCB"], ["\u0CD5", "\u0CD6"], ["\u0D02", "\u0D03"], ["\u0D3E", "\u0D40"], ["\u0D46", "\u0D48"], ["\u0D4A", "\u0D4C"], "\u0D57", ["\u0D82", "\u0D83"], ["\u0DCF", "\u0DD1"], ["\u0DD8", "\u0DDF"], ["\u0DF2", "\u0DF3"], ["\u0F3E", "\u0F3F"], "\u0F7F", ["\u102B", "\u102C"], "\u1031", "\u1038", ["\u103B", "\u103C"], ["\u1056", "\u1057"], ["\u1062", "\u1064"], ["\u1067", "\u106D"], ["\u1083", "\u1084"], ["\u1087", "\u108C"], "\u108F", ["\u109A", "\u109C"], "\u17B6", ["\u17BE", "\u17C5"], ["\u17C7", "\u17C8"], ["\u1923", "\u1926"], ["\u1929", "\u192B"], ["\u1930", "\u1931"], ["\u1933", "\u1938"], ["\u1A19", "\u1A1A"], "\u1A55", "\u1A57", "\u1A61", ["\u1A63", "\u1A64"], ["\u1A6D", "\u1A72"], "\u1B04", "\u1B35", "\u1B3B", ["\u1B3D", "\u1B41"], ["\u1B43", "\u1B44"], "\u1B82", "\u1BA1", ["\u1BA6", "\u1BA7"], "\u1BAA", "\u1BE7", ["\u1BEA", "\u1BEC"], "\u1BEE", ["\u1BF2", "\u1BF3"], ["\u1C24", "\u1C2B"], ["\u1C34", "\u1C35"], "\u1CE1", ["\u1CF2", "\u1CF3"], ["\u302E", "\u302F"], ["\uA823", "\uA824"], "\uA827", ["\uA880", "\uA881"], ["\uA8B4", "\uA8C3"], ["\uA952", "\uA953"], "\uA983", ["\uA9B4", "\uA9B5"], ["\uA9BA", "\uA9BB"], ["\uA9BD", "\uA9C0"], ["\uAA2F", "\uAA30"], ["\uAA33", "\uAA34"], "\uAA4D", "\uAA7B", "\uAA7D", "\uAAEB", ["\uAAEE", "\uAAEF"], "\uAAF5", ["\uABE3", "\uABE4"], ["\uABE6", "\uABE7"], ["\uABE9", "\uABEA"], "\uABEC"], false, false);
  var peg$e58 = peg$classExpectation([["\u0300", "\u036F"], ["\u0483", "\u0487"], ["\u0591", "\u05BD"], "\u05BF", ["\u05C1", "\u05C2"], ["\u05C4", "\u05C5"], "\u05C7", ["\u0610", "\u061A"], ["\u064B", "\u065F"], "\u0670", ["\u06D6", "\u06DC"], ["\u06DF", "\u06E4"], ["\u06E7", "\u06E8"], ["\u06EA", "\u06ED"], "\u0711", ["\u0730", "\u074A"], ["\u07A6", "\u07B0"], ["\u07EB", "\u07F3"], ["\u0816", "\u0819"], ["\u081B", "\u0823"], ["\u0825", "\u0827"], ["\u0829", "\u082D"], ["\u0859", "\u085B"], ["\u08E3", "\u0902"], "\u093A", "\u093C", ["\u0941", "\u0948"], "\u094D", ["\u0951", "\u0957"], ["\u0962", "\u0963"], "\u0981", "\u09BC", ["\u09C1", "\u09C4"], "\u09CD", ["\u09E2", "\u09E3"], ["\u0A01", "\u0A02"], "\u0A3C", ["\u0A41", "\u0A42"], ["\u0A47", "\u0A48"], ["\u0A4B", "\u0A4D"], "\u0A51", ["\u0A70", "\u0A71"], "\u0A75", ["\u0A81", "\u0A82"], "\u0ABC", ["\u0AC1", "\u0AC5"], ["\u0AC7", "\u0AC8"], "\u0ACD", ["\u0AE2", "\u0AE3"], "\u0B01", "\u0B3C", "\u0B3F", ["\u0B41", "\u0B44"], "\u0B4D", "\u0B56", ["\u0B62", "\u0B63"], "\u0B82", "\u0BC0", "\u0BCD", "\u0C00", ["\u0C3E", "\u0C40"], ["\u0C46", "\u0C48"], ["\u0C4A", "\u0C4D"], ["\u0C55", "\u0C56"], ["\u0C62", "\u0C63"], "\u0C81", "\u0CBC", "\u0CBF", "\u0CC6", ["\u0CCC", "\u0CCD"], ["\u0CE2", "\u0CE3"], "\u0D01", ["\u0D41", "\u0D44"], "\u0D4D", ["\u0D62", "\u0D63"], "\u0DCA", ["\u0DD2", "\u0DD4"], "\u0DD6", "\u0E31", ["\u0E34", "\u0E3A"], ["\u0E47", "\u0E4E"], "\u0EB1", ["\u0EB4", "\u0EB9"], ["\u0EBB", "\u0EBC"], ["\u0EC8", "\u0ECD"], ["\u0F18", "\u0F19"], "\u0F35", "\u0F37", "\u0F39", ["\u0F71", "\u0F7E"], ["\u0F80", "\u0F84"], ["\u0F86", "\u0F87"], ["\u0F8D", "\u0F97"], ["\u0F99", "\u0FBC"], "\u0FC6", ["\u102D", "\u1030"], ["\u1032", "\u1037"], ["\u1039", "\u103A"], ["\u103D", "\u103E"], ["\u1058", "\u1059"], ["\u105E", "\u1060"], ["\u1071", "\u1074"], "\u1082", ["\u1085", "\u1086"], "\u108D", "\u109D", ["\u135D", "\u135F"], ["\u1712", "\u1714"], ["\u1732", "\u1734"], ["\u1752", "\u1753"], ["\u1772", "\u1773"], ["\u17B4", "\u17B5"], ["\u17B7", "\u17BD"], "\u17C6", ["\u17C9", "\u17D3"], "\u17DD", ["\u180B", "\u180D"], "\u18A9", ["\u1920", "\u1922"], ["\u1927", "\u1928"], "\u1932", ["\u1939", "\u193B"], ["\u1A17", "\u1A18"], "\u1A1B", "\u1A56", ["\u1A58", "\u1A5E"], "\u1A60", "\u1A62", ["\u1A65", "\u1A6C"], ["\u1A73", "\u1A7C"], "\u1A7F", ["\u1AB0", "\u1ABD"], ["\u1B00", "\u1B03"], "\u1B34", ["\u1B36", "\u1B3A"], "\u1B3C", "\u1B42", ["\u1B6B", "\u1B73"], ["\u1B80", "\u1B81"], ["\u1BA2", "\u1BA5"], ["\u1BA8", "\u1BA9"], ["\u1BAB", "\u1BAD"], "\u1BE6", ["\u1BE8", "\u1BE9"], "\u1BED", ["\u1BEF", "\u1BF1"], ["\u1C2C", "\u1C33"], ["\u1C36", "\u1C37"], ["\u1CD0", "\u1CD2"], ["\u1CD4", "\u1CE0"], ["\u1CE2", "\u1CE8"], "\u1CED", "\u1CF4", ["\u1CF8", "\u1CF9"], ["\u1DC0", "\u1DF5"], ["\u1DFC", "\u1DFF"], ["\u20D0", "\u20DC"], "\u20E1", ["\u20E5", "\u20F0"], ["\u2CEF", "\u2CF1"], "\u2D7F", ["\u2DE0", "\u2DFF"], ["\u302A", "\u302D"], ["\u3099", "\u309A"], "\uA66F", ["\uA674", "\uA67D"], ["\uA69E", "\uA69F"], ["\uA6F0", "\uA6F1"], "\uA802", "\uA806", "\uA80B", ["\uA825", "\uA826"], "\uA8C4", ["\uA8E0", "\uA8F1"], ["\uA926", "\uA92D"], ["\uA947", "\uA951"], ["\uA980", "\uA982"], "\uA9B3", ["\uA9B6", "\uA9B9"], "\uA9BC", "\uA9E5", ["\uAA29", "\uAA2E"], ["\uAA31", "\uAA32"], ["\uAA35", "\uAA36"], "\uAA43", "\uAA4C", "\uAA7C", "\uAAB0", ["\uAAB2", "\uAAB4"], ["\uAAB7", "\uAAB8"], ["\uAABE", "\uAABF"], "\uAAC1", ["\uAAEC", "\uAAED"], "\uAAF6", "\uABE5", "\uABE8", "\uABED", "\uFB1E", ["\uFE00", "\uFE0F"], ["\uFE20", "\uFE2F"]], false, false);
  var peg$e59 = peg$classExpectation([["0", "9"], ["\u0660", "\u0669"], ["\u06F0", "\u06F9"], ["\u07C0", "\u07C9"], ["\u0966", "\u096F"], ["\u09E6", "\u09EF"], ["\u0A66", "\u0A6F"], ["\u0AE6", "\u0AEF"], ["\u0B66", "\u0B6F"], ["\u0BE6", "\u0BEF"], ["\u0C66", "\u0C6F"], ["\u0CE6", "\u0CEF"], ["\u0D66", "\u0D6F"], ["\u0DE6", "\u0DEF"], ["\u0E50", "\u0E59"], ["\u0ED0", "\u0ED9"], ["\u0F20", "\u0F29"], ["\u1040", "\u1049"], ["\u1090", "\u1099"], ["\u17E0", "\u17E9"], ["\u1810", "\u1819"], ["\u1946", "\u194F"], ["\u19D0", "\u19D9"], ["\u1A80", "\u1A89"], ["\u1A90", "\u1A99"], ["\u1B50", "\u1B59"], ["\u1BB0", "\u1BB9"], ["\u1C40", "\u1C49"], ["\u1C50", "\u1C59"], ["\uA620", "\uA629"], ["\uA8D0", "\uA8D9"], ["\uA900", "\uA909"], ["\uA9D0", "\uA9D9"], ["\uA9F0", "\uA9F9"], ["\uAA50", "\uAA59"], ["\uABF0", "\uABF9"], ["\uFF10", "\uFF19"]], false, false);
  var peg$e60 = peg$classExpectation([["\u16EE", "\u16F0"], ["\u2160", "\u2182"], ["\u2185", "\u2188"], "\u3007", ["\u3021", "\u3029"], ["\u3038", "\u303A"], ["\uA6E6", "\uA6EF"]], false, false);
  var peg$e61 = peg$classExpectation(["_", ["\u203F", "\u2040"], "\u2054", ["\uFE33", "\uFE34"], ["\uFE4D", "\uFE4F"], "\uFF3F"], false, false);
  var peg$e62 = peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false);
  var peg$e63 = peg$literalExpectation("break", false);
  var peg$e64 = peg$literalExpectation("case", false);
  var peg$e65 = peg$literalExpectation("catch", false);
  var peg$e66 = peg$literalExpectation("class", false);
  var peg$e67 = peg$literalExpectation("const", false);
  var peg$e68 = peg$literalExpectation("continue", false);
  var peg$e69 = peg$literalExpectation("debugger", false);
  var peg$e70 = peg$literalExpectation("default", false);
  var peg$e71 = peg$literalExpectation("delete", false);
  var peg$e72 = peg$literalExpectation("do", false);
  var peg$e73 = peg$literalExpectation("else", false);
  var peg$e74 = peg$literalExpectation("enum", false);
  var peg$e75 = peg$literalExpectation("export", false);
  var peg$e76 = peg$literalExpectation("extends", false);
  var peg$e77 = peg$literalExpectation("false", false);
  var peg$e78 = peg$literalExpectation("finally", false);
  var peg$e79 = peg$literalExpectation("for", false);
  var peg$e80 = peg$literalExpectation("function", false);
  var peg$e81 = peg$literalExpectation("get", false);
  var peg$e82 = peg$literalExpectation("if", false);
  var peg$e83 = peg$literalExpectation("import", false);
  var peg$e84 = peg$literalExpectation("instanceof", false);
  var peg$e85 = peg$literalExpectation("in", false);
  var peg$e86 = peg$literalExpectation("new", false);
  var peg$e87 = peg$literalExpectation("null", false);
  var peg$e88 = peg$literalExpectation("return", false);
  var peg$e89 = peg$literalExpectation("set", false);
  var peg$e90 = peg$literalExpectation("super", false);
  var peg$e91 = peg$literalExpectation("switch", false);
  var peg$e92 = peg$literalExpectation("this", false);
  var peg$e93 = peg$literalExpectation("throw", false);
  var peg$e94 = peg$literalExpectation("true", false);
  var peg$e95 = peg$literalExpectation("try", false);
  var peg$e96 = peg$literalExpectation("typeof", false);
  var peg$e97 = peg$literalExpectation("var", false);
  var peg$e98 = peg$literalExpectation("void", false);
  var peg$e99 = peg$literalExpectation("while", false);
  var peg$e100 = peg$literalExpectation("with", false);
  var peg$e101 = peg$literalExpectation(";", false);
  var peg$e102 = peg$literalExpectation("}", false);
  var peg$e103 = peg$literalExpectation("(", false);
  var peg$e104 = peg$literalExpectation(")", false);
  var peg$e105 = peg$literalExpectation(",", false);
  var peg$e106 = peg$literalExpectation("{", false);
  var peg$e107 = peg$literalExpectation(":", false);
  var peg$e108 = peg$literalExpectation("++", false);
  var peg$e109 = peg$literalExpectation("--", false);
  var peg$e110 = peg$literalExpectation("+", false);
  var peg$e111 = peg$literalExpectation("=", false);
  var peg$e112 = peg$literalExpectation("-", false);
  var peg$e113 = peg$literalExpectation("~", false);
  var peg$e114 = peg$literalExpectation("!", false);
  var peg$e115 = peg$literalExpectation("**", false);
  var peg$e116 = peg$literalExpectation("*", false);
  var peg$e117 = peg$literalExpectation("%", false);
  var peg$e118 = peg$classExpectation(["+", "="], false, false);
  var peg$e119 = peg$classExpectation(["-", "="], false, false);
  var peg$e120 = peg$literalExpectation("<<", false);
  var peg$e121 = peg$literalExpectation(">>>", false);
  var peg$e122 = peg$literalExpectation(">>", false);
  var peg$e123 = peg$literalExpectation("<=", false);
  var peg$e124 = peg$literalExpectation(">=", false);
  var peg$e125 = peg$literalExpectation("<", false);
  var peg$e126 = peg$literalExpectation(">", false);
  var peg$e127 = peg$literalExpectation("===", false);
  var peg$e128 = peg$literalExpectation("!==", false);
  var peg$e129 = peg$literalExpectation("==", false);
  var peg$e130 = peg$literalExpectation("!=", false);
  var peg$e131 = peg$literalExpectation("&", false);
  var peg$e132 = peg$classExpectation(["&", "="], false, false);
  var peg$e133 = peg$literalExpectation("^", false);
  var peg$e134 = peg$literalExpectation("|", false);
  var peg$e135 = peg$classExpectation(["|", "="], false, false);
  var peg$e136 = peg$literalExpectation("&&", false);
  var peg$e137 = peg$literalExpectation("||", false);
  var peg$e138 = peg$literalExpectation("?", false);
  var peg$e139 = peg$literalExpectation("**=", false);
  var peg$e140 = peg$literalExpectation("*=", false);
  var peg$e141 = peg$literalExpectation("/=", false);
  var peg$e142 = peg$literalExpectation("%=", false);
  var peg$e143 = peg$literalExpectation("+=", false);
  var peg$e144 = peg$literalExpectation("-=", false);
  var peg$e145 = peg$literalExpectation("<<=", false);
  var peg$e146 = peg$literalExpectation(">>=", false);
  var peg$e147 = peg$literalExpectation(">>>=", false);
  var peg$e148 = peg$literalExpectation("&=", false);
  var peg$e149 = peg$literalExpectation("^=", false);
  var peg$e150 = peg$literalExpectation("|=", false);
// @ts-ignore

  var peg$f0 = function(program) {// @ts-ignore
 return program; };// @ts-ignore

  var peg$f1 = function(name) {// @ts-ignore
 return name; };// @ts-ignore

  var peg$f2 = function(head, tail) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Identifier",
// @ts-ignore
        name: head + tail.join("")
      };
    };// @ts-ignore

  var peg$f3 = function(sequence) {// @ts-ignore
 return sequence; };// @ts-ignore

  var peg$f4 = function() {// @ts-ignore
 return { type: "Literal", value: null }; };// @ts-ignore

  var peg$f5 = function() {// @ts-ignore
 return { type: "Literal", value: true  }; };// @ts-ignore

  var peg$f6 = function() {// @ts-ignore
 return { type: "Literal", value: false }; };// @ts-ignore

  var peg$f7 = function(literal) {
// @ts-ignore
      return literal;
    };// @ts-ignore

  var peg$f8 = function(literal) {
// @ts-ignore
      return literal;
    };// @ts-ignore

  var peg$f9 = function() {
// @ts-ignore
      return { type: "Literal", value: parseFloat(text()) };
    };// @ts-ignore

  var peg$f10 = function() {
// @ts-ignore
      return { type: "Literal", value: parseFloat(text()) };
    };// @ts-ignore

  var peg$f11 = function() {
// @ts-ignore
      return { type: "Literal", value: parseFloat(text()) };
    };// @ts-ignore

  var peg$f12 = function(digits) {
// @ts-ignore
      return { type: "Literal", value: parseInt(digits, 16) };
     };// @ts-ignore

  var peg$f13 = function(chars) {
// @ts-ignore
      return { type: "Literal", value: chars.join("") };
    };// @ts-ignore

  var peg$f14 = function(chars) {
// @ts-ignore
      return { type: "Literal", value: chars.join("") };
    };// @ts-ignore

  var peg$f15 = function() {// @ts-ignore
 return text(); };// @ts-ignore

  var peg$f16 = function(sequence) {// @ts-ignore
 return sequence; };// @ts-ignore

  var peg$f17 = function() {// @ts-ignore
 return text(); };// @ts-ignore

  var peg$f18 = function(sequence) {// @ts-ignore
 return sequence; };// @ts-ignore

  var peg$f19 = function() {// @ts-ignore
 return ""; };// @ts-ignore

  var peg$f20 = function() {// @ts-ignore
 return "\0"; };// @ts-ignore

  var peg$f21 = function() {// @ts-ignore
 return "\b"; };// @ts-ignore

  var peg$f22 = function() {// @ts-ignore
 return "\f"; };// @ts-ignore

  var peg$f23 = function() {// @ts-ignore
 return "\n"; };// @ts-ignore

  var peg$f24 = function() {// @ts-ignore
 return "\r"; };// @ts-ignore

  var peg$f25 = function() {// @ts-ignore
 return "\t"; };// @ts-ignore

  var peg$f26 = function() {// @ts-ignore
 return "\v"; };// @ts-ignore

  var peg$f27 = function() {// @ts-ignore
 return text(); };// @ts-ignore

  var peg$f28 = function(digits) {
// @ts-ignore
      return String.fromCharCode(parseInt(digits, 16));
    };// @ts-ignore

  var peg$f29 = function(digits) {
// @ts-ignore
      return String.fromCharCode(parseInt(digits, 16));
    };// @ts-ignore

  var peg$f30 = function(pattern, flags) {
// @ts-ignore
      var value;

// @ts-ignore
      try {
// @ts-ignore
        value = new RegExp(pattern, flags);
// @ts-ignore
      } catch (e) {
// @ts-ignore
        error(e.message);
      }

// @ts-ignore
      return { type: "Literal", value: value };
    };// @ts-ignore

  var peg$f31 = function() {// @ts-ignore
 return { type: "ThisExpression" }; };// @ts-ignore

  var peg$f32 = function(expression) {// @ts-ignore
 return expression; };// @ts-ignore

  var peg$f33 = function(elision) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ArrayExpression",
// @ts-ignore
        elements: optionalList(extractOptional(elision, 0))
      };
    };// @ts-ignore

  var peg$f34 = function(elements) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ArrayExpression",
// @ts-ignore
        elements: elements
      };
    };// @ts-ignore

  var peg$f35 = function(elements, elision) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ArrayExpression",
// @ts-ignore
        elements: elements.concat(optionalList(extractOptional(elision, 0)))
      };
    };// @ts-ignore

  var peg$f36 = function(elision, element) {
// @ts-ignore
        return optionalList(extractOptional(elision, 0)).concat(element);
      };// @ts-ignore

  var peg$f37 = function(head, elision, element) {
// @ts-ignore
        return optionalList(extractOptional(elision, 0)).concat(element);
      };// @ts-ignore

  var peg$f38 = function(head, tail) {// @ts-ignore
 return Array.prototype.concat.apply(head, tail); };// @ts-ignore

  var peg$f39 = function(commas) {// @ts-ignore
 return filledArray(commas.length + 1, null); };// @ts-ignore

  var peg$f40 = function() {// @ts-ignore
 return { type: "ObjectExpression", properties: [] }; };// @ts-ignore

  var peg$f41 = function(properties) {
// @ts-ignore
      return { type: "ObjectExpression", properties: properties };
    };// @ts-ignore

  var peg$f42 = function(properties) {
// @ts-ignore
      return { type: "ObjectExpression", properties: properties };
    };// @ts-ignore

  var peg$f43 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 3);
    };// @ts-ignore

  var peg$f44 = function(key, value) {
// @ts-ignore
      return { type: "Property", key: key, value: value, kind: "init" };
    };// @ts-ignore

  var peg$f45 = function(key, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Property",
// @ts-ignore
        key: key,
// @ts-ignore
        value: {
// @ts-ignore
          type: "FunctionExpression",
// @ts-ignore
          id: null,
// @ts-ignore
          params: [],
// @ts-ignore
          body: body
        },
// @ts-ignore
        kind: "get"
      };
    };// @ts-ignore

  var peg$f46 = function(key, params, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Property",
// @ts-ignore
        key: key,
// @ts-ignore
        value: {
// @ts-ignore
          type: "FunctionExpression",
// @ts-ignore
          id: null,
// @ts-ignore
          params: params,
// @ts-ignore
          body: body
        },
// @ts-ignore
        kind: "set"
      };
    };// @ts-ignore

  var peg$f47 = function(id) {// @ts-ignore
 return [id]; };// @ts-ignore

  var peg$f48 = function(callee, args) {
// @ts-ignore
          return { type: "NewExpression", callee: callee, arguments: args };
        };// @ts-ignore

  var peg$f49 = function(head, property) {
// @ts-ignore
          return { property: property, computed: true };
        };// @ts-ignore

  var peg$f50 = function(head, property) {
// @ts-ignore
          return { property: property, computed: false };
        };// @ts-ignore

  var peg$f51 = function(head, tail) {
// @ts-ignore
      return tail.reduce(function(result, element) {
// @ts-ignore
        return {
// @ts-ignore
          type: "MemberExpression",
// @ts-ignore
          object: result,
// @ts-ignore
          property: element.property,
// @ts-ignore
          computed: element.computed
        };
// @ts-ignore
      }, head);
    };// @ts-ignore

  var peg$f52 = function(callee) {
// @ts-ignore
      return { type: "NewExpression", callee: callee, arguments: [] };
    };// @ts-ignore

  var peg$f53 = function(callee, args) {
// @ts-ignore
        return { type: "CallExpression", callee: callee, arguments: args };
      };// @ts-ignore

  var peg$f54 = function(head, args) {
// @ts-ignore
          return { type: "CallExpression", arguments: args };
        };// @ts-ignore

  var peg$f55 = function(head, property) {
// @ts-ignore
          return {
// @ts-ignore
            type: "MemberExpression",
// @ts-ignore
            property: property,
// @ts-ignore
            computed: true
          };
        };// @ts-ignore

  var peg$f56 = function(head, property) {
// @ts-ignore
          return {
// @ts-ignore
            type: "MemberExpression",
// @ts-ignore
            property: property,
// @ts-ignore
            computed: false
          };
        };// @ts-ignore

  var peg$f57 = function(head, tail) {
// @ts-ignore
      return tail.reduce(function(result, element) {
// @ts-ignore
        element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;

// @ts-ignore
        return element;
// @ts-ignore
      }, head);
    };// @ts-ignore

  var peg$f58 = function(args) {
// @ts-ignore
      return optionalList(extractOptional(args, 0));
    };// @ts-ignore

  var peg$f59 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 3);
    };// @ts-ignore

  var peg$f60 = function(argument, operator) {
// @ts-ignore
      return {
// @ts-ignore
        type: "UpdateExpression",
// @ts-ignore
        operator: operator,
// @ts-ignore
        argument: argument,
// @ts-ignore
        prefix: false
      };
    };// @ts-ignore

  var peg$f61 = function(operator, argument) {
// @ts-ignore
      var type = (operator === "++" || operator === "--")
// @ts-ignore
        ? "UpdateExpression"
// @ts-ignore
        : "UnaryExpression";

// @ts-ignore
      return {
// @ts-ignore
        type: type,
// @ts-ignore
        operator: operator,
// @ts-ignore
        argument: argument,
// @ts-ignore
        prefix: true
      };
    };// @ts-ignore

  var peg$f62 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f63 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f64 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f65 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f66 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f67 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f68 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f69 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f70 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f71 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f72 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f73 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f74 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f75 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail); };// @ts-ignore

  var peg$f76 = function(head, tail) {// @ts-ignore
 return buildLogicalExpression(head, tail); };// @ts-ignore

  var peg$f77 = function(head, tail) {// @ts-ignore
 return buildLogicalExpression(head, tail); };// @ts-ignore

  var peg$f78 = function(head, tail) {// @ts-ignore
 return buildLogicalExpression(head, tail); };// @ts-ignore

  var peg$f79 = function(head, tail) {// @ts-ignore
 return buildLogicalExpression(head, tail); };// @ts-ignore

  var peg$f80 = function(test, consequent, alternate) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ConditionalExpression",
// @ts-ignore
        test: test,
// @ts-ignore
        consequent: consequent,
// @ts-ignore
        alternate: alternate
      };
    };// @ts-ignore

  var peg$f81 = function(test, consequent, alternate) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ConditionalExpression",
// @ts-ignore
        test: test,
// @ts-ignore
        consequent: consequent,
// @ts-ignore
        alternate: alternate
      };
    };// @ts-ignore

  var peg$f82 = function(left, right) {
// @ts-ignore
      return {
// @ts-ignore
        type: "AssignmentExpression",
// @ts-ignore
        operator: "=",
// @ts-ignore
        left: left,
// @ts-ignore
        right: right
      };
    };// @ts-ignore

  var peg$f83 = function(left, operator, right) {
// @ts-ignore
      return {
// @ts-ignore
        type: "AssignmentExpression",
// @ts-ignore
        operator: operator,
// @ts-ignore
        left: left,
// @ts-ignore
        right: right
      };
    };// @ts-ignore

  var peg$f84 = function(left, right) {
// @ts-ignore
      return {
// @ts-ignore
        type: "AssignmentExpression",
// @ts-ignore
        operator: "=",
// @ts-ignore
        left: left,
// @ts-ignore
        right: right
      };
    };// @ts-ignore

  var peg$f85 = function(left, operator, right) {
// @ts-ignore
      return {
// @ts-ignore
        type: "AssignmentExpression",
// @ts-ignore
        operator: operator,
// @ts-ignore
        left: left,
// @ts-ignore
        right: right
      };
    };// @ts-ignore

  var peg$f86 = function(head, tail) {
// @ts-ignore
      return tail.length > 0
// @ts-ignore
        ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
// @ts-ignore
        : head;
    };// @ts-ignore

  var peg$f87 = function(head, tail) {
// @ts-ignore
      return tail.length > 0
// @ts-ignore
        ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
// @ts-ignore
        : head;
    };// @ts-ignore

  var peg$f88 = function(body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "BlockStatement",
// @ts-ignore
        body: optionalList(extractOptional(body, 0))
      };
    };// @ts-ignore

  var peg$f89 = function(head, tail) {// @ts-ignore
 return buildList(head, tail, 1); };// @ts-ignore

  var peg$f90 = function(declarations) {
// @ts-ignore
      return {
// @ts-ignore
        type: "VariableDeclaration",
// @ts-ignore
        declarations: declarations,
// @ts-ignore
        kind: "var"
      };
    };// @ts-ignore

  var peg$f91 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 3);
    };// @ts-ignore

  var peg$f92 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 3);
    };// @ts-ignore

  var peg$f93 = function(id, init) {
// @ts-ignore
      return {
// @ts-ignore
        type: "VariableDeclarator",
// @ts-ignore
        id: id,
// @ts-ignore
        init: extractOptional(init, 1)
      };
    };// @ts-ignore

  var peg$f94 = function(id, init) {
// @ts-ignore
      return {
// @ts-ignore
        type: "VariableDeclarator",
// @ts-ignore
        id: id,
// @ts-ignore
        init: extractOptional(init, 1)
      };
    };// @ts-ignore

  var peg$f95 = function(expression) {// @ts-ignore
 return expression; };// @ts-ignore

  var peg$f96 = function(expression) {// @ts-ignore
 return expression; };// @ts-ignore

  var peg$f97 = function() {// @ts-ignore
 return { type: "EmptyStatement" }; };// @ts-ignore

  var peg$f98 = function(expression) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ExpressionStatement",
// @ts-ignore
        expression: expression
      };
    };// @ts-ignore

  var peg$f99 = function(test, consequent, alternate) {
// @ts-ignore
      return {
// @ts-ignore
        type: "IfStatement",
// @ts-ignore
        test: test,
// @ts-ignore
        consequent: consequent,
// @ts-ignore
        alternate: alternate
      };
    };// @ts-ignore

  var peg$f100 = function(test, consequent) {
// @ts-ignore
      return {
// @ts-ignore
        type: "IfStatement",
// @ts-ignore
        test: test,
// @ts-ignore
        consequent: consequent,
// @ts-ignore
        alternate: null
      };
    };// @ts-ignore

  var peg$f101 = function(body, test) {// @ts-ignore
 return { type: "DoWhileStatement", body: body, test: test }; };// @ts-ignore

  var peg$f102 = function(test, body) {// @ts-ignore
 return { type: "WhileStatement", test: test, body: body }; };// @ts-ignore

  var peg$f103 = function(init, test, update, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ForStatement",
// @ts-ignore
        init: extractOptional(init, 0),
// @ts-ignore
        test: extractOptional(test, 0),
// @ts-ignore
        update: extractOptional(update, 0),
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f104 = function(declarations, test, update, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ForStatement",
// @ts-ignore
        init: {
// @ts-ignore
          type: "VariableDeclaration",
// @ts-ignore
          declarations: declarations,
// @ts-ignore
          kind: "var"
        },
// @ts-ignore
        test: extractOptional(test, 0),
// @ts-ignore
        update: extractOptional(update, 0),
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f105 = function(left, right, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ForInStatement",
// @ts-ignore
        left: left,
// @ts-ignore
        right: right,
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f106 = function(declarations, right, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ForInStatement",
// @ts-ignore
        left: {
// @ts-ignore
          type: "VariableDeclaration",
// @ts-ignore
          declarations: declarations,
// @ts-ignore
          kind: "var"
        },
// @ts-ignore
        right: right,
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f107 = function() {
// @ts-ignore
      return { type: "ContinueStatement", label: null };
    };// @ts-ignore

  var peg$f108 = function(label) {
// @ts-ignore
      return { type: "ContinueStatement", label: label };
    };// @ts-ignore

  var peg$f109 = function() {
// @ts-ignore
      return { type: "BreakStatement", label: null };
    };// @ts-ignore

  var peg$f110 = function(label) {
// @ts-ignore
      return { type: "BreakStatement", label: label };
    };// @ts-ignore

  var peg$f111 = function() {
// @ts-ignore
      return { type: "ReturnStatement", argument: null };
    };// @ts-ignore

  var peg$f112 = function(argument) {
// @ts-ignore
      return { type: "ReturnStatement", argument: argument };
    };// @ts-ignore

  var peg$f113 = function(object, body) {// @ts-ignore
 return { type: "WithStatement", object: object, body: body }; };// @ts-ignore

  var peg$f114 = function(discriminant, cases) {
// @ts-ignore
      return {
// @ts-ignore
        type: "SwitchStatement",
// @ts-ignore
        discriminant: discriminant,
// @ts-ignore
        cases: cases
      };
    };// @ts-ignore

  var peg$f115 = function(clauses) {
// @ts-ignore
      return optionalList(extractOptional(clauses, 0));
    };// @ts-ignore

  var peg$f116 = function(before, default_, after) {
// @ts-ignore
      return optionalList(extractOptional(before, 0))
// @ts-ignore
        .concat(default_)
// @ts-ignore
        .concat(optionalList(extractOptional(after, 0)));
    };// @ts-ignore

  var peg$f117 = function(head, tail) {// @ts-ignore
 return buildList(head, tail, 1); };// @ts-ignore

  var peg$f118 = function(test, consequent) {
// @ts-ignore
      return {
// @ts-ignore
        type: "SwitchCase",
// @ts-ignore
        test: test,
// @ts-ignore
        consequent: optionalList(extractOptional(consequent, 1))
      };
    };// @ts-ignore

  var peg$f119 = function(consequent) {
// @ts-ignore
      return {
// @ts-ignore
        type: "SwitchCase",
// @ts-ignore
        test: null,
// @ts-ignore
        consequent: optionalList(extractOptional(consequent, 1))
      };
    };// @ts-ignore

  var peg$f120 = function(label, body) {
// @ts-ignore
      return { type: "LabeledStatement", label: label, body: body };
    };// @ts-ignore

  var peg$f121 = function(argument) {
// @ts-ignore
      return { type: "ThrowStatement", argument: argument };
    };// @ts-ignore

  var peg$f122 = function(block, handler, finalizer) {
// @ts-ignore
      return {
// @ts-ignore
        type: "TryStatement",
// @ts-ignore
        block: block,
// @ts-ignore
        handler: handler,
// @ts-ignore
        finalizer: finalizer
      };
    };// @ts-ignore

  var peg$f123 = function(block, handler) {
// @ts-ignore
      return {
// @ts-ignore
        type: "TryStatement",
// @ts-ignore
        block: block,
// @ts-ignore
        handler: handler,
// @ts-ignore
        finalizer: null
      };
    };// @ts-ignore

  var peg$f124 = function(block, finalizer) {
// @ts-ignore
      return {
// @ts-ignore
        type: "TryStatement",
// @ts-ignore
        block: block,
// @ts-ignore
        handler: null,
// @ts-ignore
        finalizer: finalizer
      };
    };// @ts-ignore

  var peg$f125 = function(param, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "CatchClause",
// @ts-ignore
        param: param,
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f126 = function(block) {// @ts-ignore
 return block; };// @ts-ignore

  var peg$f127 = function() {// @ts-ignore
 return { type: "DebuggerStatement" }; };// @ts-ignore

  var peg$f128 = function(id, params, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "FunctionDeclaration",
// @ts-ignore
        id: id,
// @ts-ignore
        params: optionalList(extractOptional(params, 0)),
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f129 = function(id, params, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "FunctionExpression",
// @ts-ignore
        id: extractOptional(id, 0),
// @ts-ignore
        params: optionalList(extractOptional(params, 0)),
// @ts-ignore
        body: body
      };
    };// @ts-ignore

  var peg$f130 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 3);
    };// @ts-ignore

  var peg$f131 = function(body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "BlockStatement",
// @ts-ignore
        body: optionalList(body)
      };
    };// @ts-ignore

  var peg$f132 = function(body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Program",
// @ts-ignore
        body: optionalList(body)
      };
    };// @ts-ignore

  var peg$f133 = function(head, tail) {
// @ts-ignore
      return buildList(head, tail, 1);
    };
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStart() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse__();
// @ts-ignore
    s2 = peg$parseProgram();
// @ts-ignore
    s3 = peg$parse__();
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f0(s2);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSourceCharacter() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.length > peg$currPos) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhiteSpace() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 9) {
// @ts-ignore
      s0 = peg$c0;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 11) {
// @ts-ignore
        s0 = peg$c1;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 12) {
// @ts-ignore
          s0 = peg$c2;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
            s0 = peg$c3;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 160) {
// @ts-ignore
              s0 = peg$c4;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 65279) {
// @ts-ignore
                s0 = peg$c5;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseZs();
              }
            }
          }
        }
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineTerminator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineTerminatorSequence() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
      s0 = peg$c6;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c7) {
// @ts-ignore
        s0 = peg$c7;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 13) {
// @ts-ignore
          s0 = peg$c8;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 8232) {
// @ts-ignore
            s0 = peg$c9;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 8233) {
// @ts-ignore
              s0 = peg$c10;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
          }
        }
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComment() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$parseMultiLineComment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseSingleLineComment();
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiLineComment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c11) {
// @ts-ignore
      s1 = peg$c11;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
        s5 = peg$c12;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseSourceCharacter();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
          s5 = peg$c12;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSourceCharacter();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
        s3 = peg$c12;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiLineCommentNoLineTerminator() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c11) {
// @ts-ignore
      s1 = peg$c11;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
        s5 = peg$c12;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = peg$parseLineTerminator();
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseSourceCharacter();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
          s5 = peg$c12;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$parseLineTerminator();
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSourceCharacter();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
        s3 = peg$c12;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingleLineComment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c13) {
// @ts-ignore
      s1 = peg$c13;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parseLineTerminator();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseSourceCharacter();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseLineTerminator();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSourceCharacter();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifier() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s2 = peg$parseReservedWord();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseIdentifierName();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f1(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifierName() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifierStart();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseIdentifierPart();
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f2(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifierStart() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parseUnicodeLetter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
        s0 = peg$c14;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
          s0 = peg$c15;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
            s1 = peg$c16;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parseUnicodeEscapeSequence();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f3(s2);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifierPart() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseIdentifierStart();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseUnicodeCombiningMark();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseNd();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsePc();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 8204) {
// @ts-ignore
              s0 = peg$c17;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 8205) {
// @ts-ignore
                s0 = peg$c18;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnicodeLetter() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLu();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLl();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLt();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseLm();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseLo();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseNl();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnicodeCombiningMark() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseMn();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseMc();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseReservedWord() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKeyword();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseFutureReservedWord();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseNullLiteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseBooleanLiteral();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKeyword() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseBreakToken();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseCaseToken();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseCatchToken();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseContinueToken();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseDebuggerToken();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseDefaultToken();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseDeleteToken();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseDoToken();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parseElseToken();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseFinallyToken();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$parseForToken();
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$parseFunctionToken();
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            s0 = peg$parseIfToken();
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              s0 = peg$parseInstanceofToken();
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                s0 = peg$parseInToken();
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  s0 = peg$parseNewToken();
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    s0 = peg$parseReturnToken();
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      s0 = peg$parseSwitchToken();
// @ts-ignore
                                      if (s0 === peg$FAILED) {
// @ts-ignore
                                        s0 = peg$parseThisToken();
// @ts-ignore
                                        if (s0 === peg$FAILED) {
// @ts-ignore
                                          s0 = peg$parseThrowToken();
// @ts-ignore
                                          if (s0 === peg$FAILED) {
// @ts-ignore
                                            s0 = peg$parseTryToken();
// @ts-ignore
                                            if (s0 === peg$FAILED) {
// @ts-ignore
                                              s0 = peg$parseTypeofToken();
// @ts-ignore
                                              if (s0 === peg$FAILED) {
// @ts-ignore
                                                s0 = peg$parseVarToken();
// @ts-ignore
                                                if (s0 === peg$FAILED) {
// @ts-ignore
                                                  s0 = peg$parseVoidToken();
// @ts-ignore
                                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                                    s0 = peg$parseWhileToken();
// @ts-ignore
                                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                                      s0 = peg$parseWithToken();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFutureReservedWord() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseClassToken();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseConstToken();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseEnumToken();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseExportToken();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseExtendsToken();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseImportToken();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseSuperToken();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLiteral() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseNullLiteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseBooleanLiteral();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseNumericLiteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseStringLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseRegularExpressionLiteral();
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNullLiteral() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseNullToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f4();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBooleanLiteral() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseTrueToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f5();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseFalseToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f6();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNumericLiteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHexIntegerLiteral();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierStart();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseDecimalDigit();
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f7(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseDecimalLiteral();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s3 = peg$parseIdentifierStart();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parseDecimalDigit();
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s2 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f8(s1);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDecimalLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDecimalIntegerLiteral();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s2 = peg$c19;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$parseDecimalDigit();
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseDecimalDigit();
        }
// @ts-ignore
        s4 = peg$parseExponentPart();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f9();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s1 = peg$c19;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        s3 = peg$parseDecimalDigit();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          while (s3 !== peg$FAILED) {
// @ts-ignore
            s2.push(s3);
// @ts-ignore
            s3 = peg$parseDecimalDigit();
          }
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parseExponentPart();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f10();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseDecimalIntegerLiteral();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parseExponentPart();
// @ts-ignore
          if (s2 === peg$FAILED) {
// @ts-ignore
            s2 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f11();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDecimalIntegerLiteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
      s0 = peg$c20;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseNonZeroDigit();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        s3 = peg$parseDecimalDigit();
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$parseDecimalDigit();
        }
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDecimalDigit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNonZeroDigit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExponentPart() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseExponentIndicator();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSignedInteger();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExponentIndicator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c21) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSignedInteger() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$parseDecimalDigit();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseDecimalDigit();
      }
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHexIntegerLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c22) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseHexDigit();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseHexDigit();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f12(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHexDigit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStringLiteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c23;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseDoubleStringCharacter();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseDoubleStringCharacter();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c23;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f13(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s1 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        s3 = peg$parseSingleStringCharacter();
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$parseSingleStringCharacter();
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s3 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f14(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDoubleStringCharacter() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s2 = peg$c23;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s2 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseLineTerminator();
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSourceCharacter();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f15();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s1 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseEscapeSequence();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f16(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLineContinuation();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingleStringCharacter() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s2 = peg$c24;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s2 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseLineTerminator();
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSourceCharacter();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f17();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s1 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseEscapeSequence();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f18(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLineContinuation();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineContinuation() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseLineTerminatorSequence();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f19();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEscapeSequence() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$parseCharacterEscapeSequence();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
        s1 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s3 = peg$parseDecimalDigit();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s2 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f20();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseHexEscapeSequence();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseUnicodeEscapeSequence();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCharacterEscapeSequence() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseSingleEscapeCharacter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseNonEscapeCharacter();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingleEscapeCharacter() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s0 = peg$c24;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s0 = peg$c23;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
          s0 = peg$c16;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 98) {
// @ts-ignore
            s1 = peg$c25;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f21();
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 102) {
// @ts-ignore
              s1 = peg$c26;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f22();
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 110) {
// @ts-ignore
                s1 = peg$c27;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f23();
              }
// @ts-ignore
              s0 = s1;
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 114) {
// @ts-ignore
                  s1 = peg$c28;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e40); }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s1 = peg$f24();
                }
// @ts-ignore
                s0 = s1;
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 116) {
// @ts-ignore
                    s1 = peg$c29;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e41); }
                  }
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s1 = peg$f25();
                  }
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 118) {
// @ts-ignore
                      s1 = peg$c30;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s1 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
// @ts-ignore
                    if (s1 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s1 = peg$f26();
                    }
// @ts-ignore
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNonEscapeCharacter() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s2 = peg$parseEscapeCharacter();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseLineTerminator();
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSourceCharacter();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f27();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEscapeCharacter() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseSingleEscapeCharacter();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseDecimalDigit();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 120) {
// @ts-ignore
          s0 = peg$c31;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
            s0 = peg$c32;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHexEscapeSequence() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 120) {
// @ts-ignore
      s1 = peg$c31;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseHexDigit();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseHexDigit();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f28(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnicodeEscapeSequence() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
      s1 = peg$c32;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseHexDigit();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseHexDigit();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseHexDigit();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parseHexDigit();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f29(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseRegularExpressionBody();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
          s3 = peg$c33;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = peg$parseRegularExpressionFlags();
// @ts-ignore
          s4 = input.substring(s4, peg$currPos);
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f30(s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionBody() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRegularExpressionFirstChar();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseRegularExpressionChar();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseRegularExpressionChar();
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionFirstChar() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseRegularExpressionNonTerminator();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseRegularExpressionBackslashSequence();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseRegularExpressionClass();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionChar() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseRegularExpressionNonTerminator();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseRegularExpressionBackslashSequence();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseRegularExpressionClass();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionBackslashSequence() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseRegularExpressionNonTerminator();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionNonTerminator() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s2 = peg$parseLineTerminator();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSourceCharacter();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionClass() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c34;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseRegularExpressionClassChar();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseRegularExpressionClassChar();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
        s3 = peg$c35;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionClassChar() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseRegularExpressionNonTerminator();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseRegularExpressionBackslashSequence();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRegularExpressionFlags() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseIdentifierPart();
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseIdentifierPart();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLl() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLm() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLo() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLt() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLu() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r12.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMc() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMn() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r14.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNd() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r15.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNl() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePc() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r17.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseZs() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r18.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBreakToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c36) {
// @ts-ignore
      s1 = peg$c36;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCaseToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c37) {
// @ts-ignore
      s1 = peg$c37;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCatchToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c38) {
// @ts-ignore
      s1 = peg$c38;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c39) {
// @ts-ignore
      s1 = peg$c39;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseConstToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c40) {
// @ts-ignore
      s1 = peg$c40;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseContinueToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8) === peg$c41) {
// @ts-ignore
      s1 = peg$c41;
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDebuggerToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8) === peg$c42) {
// @ts-ignore
      s1 = peg$c42;
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDefaultToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7) === peg$c43) {
// @ts-ignore
      s1 = peg$c43;
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDeleteToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c44) {
// @ts-ignore
      s1 = peg$c44;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDoToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c45) {
// @ts-ignore
      s1 = peg$c45;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseElseToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c46) {
// @ts-ignore
      s1 = peg$c46;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEnumToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c47) {
// @ts-ignore
      s1 = peg$c47;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExportToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c48) {
// @ts-ignore
      s1 = peg$c48;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExtendsToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7) === peg$c49) {
// @ts-ignore
      s1 = peg$c49;
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFalseToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c50) {
// @ts-ignore
      s1 = peg$c50;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFinallyToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7) === peg$c51) {
// @ts-ignore
      s1 = peg$c51;
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseForToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c52) {
// @ts-ignore
      s1 = peg$c52;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8) === peg$c53) {
// @ts-ignore
      s1 = peg$c53;
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGetToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c54) {
// @ts-ignore
      s1 = peg$c54;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
      s1 = peg$c55;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseImportToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c56) {
// @ts-ignore
      s1 = peg$c56;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInstanceofToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 10) === peg$c57) {
// @ts-ignore
      s1 = peg$c57;
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c58) {
// @ts-ignore
      s1 = peg$c58;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNewToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c59) {
// @ts-ignore
      s1 = peg$c59;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNullToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c60) {
// @ts-ignore
      s1 = peg$c60;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseReturnToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c61) {
// @ts-ignore
      s1 = peg$c61;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSetToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c62) {
// @ts-ignore
      s1 = peg$c62;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSuperToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c63) {
// @ts-ignore
      s1 = peg$c63;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c64) {
// @ts-ignore
      s1 = peg$c64;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseThisToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c65) {
// @ts-ignore
      s1 = peg$c65;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseThrowToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c66) {
// @ts-ignore
      s1 = peg$c66;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTrueToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c67) {
// @ts-ignore
      s1 = peg$c67;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTryToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c68) {
// @ts-ignore
      s1 = peg$c68;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeofToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c69) {
// @ts-ignore
      s1 = peg$c69;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVarToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c70) {
// @ts-ignore
      s1 = peg$c70;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVoidToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c71) {
// @ts-ignore
      s1 = peg$c71;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhileToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c72) {
// @ts-ignore
      s1 = peg$c72;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWithToken() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c73) {
// @ts-ignore
      s1 = peg$c73;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentifierPart();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse__() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseWhiteSpace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseLineTerminatorSequence();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseComment();
      }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseWhiteSpace();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseLineTerminatorSequence();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseComment();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseWhiteSpace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseMultiLineCommentNoLineTerminator();
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseWhiteSpace();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseMultiLineCommentNoLineTerminator();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEOS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse__();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
      s2 = peg$c74;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = peg$parseSingleLineComment();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = peg$parseLineTerminatorSequence();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parse_();
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s3 = peg$c75;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e102); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parse__();
// @ts-ignore
          s2 = peg$parseEOF();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEOF() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.length > peg$currPos) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s0 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePrimaryExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseThisToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f31();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseIdentifier();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLiteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseArrayLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseObjectLiteral();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
                s1 = peg$c76;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e103); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parse__();
// @ts-ignore
                s3 = peg$parseExpression();
// @ts-ignore
                if (s3 !== peg$FAILED) {
// @ts-ignore
                  s4 = peg$parse__();
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                    s5 = peg$c77;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s5 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e104); }
                  }
// @ts-ignore
                  if (s5 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f32(s3);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArrayLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c34;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseElision();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
        s4 = peg$c35;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f33(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s1 = peg$c34;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseElementList();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s5 = peg$c35;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f34(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
          s1 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseElementList();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
              s5 = peg$c78;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e105); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$currPos;
// @ts-ignore
              s8 = peg$parseElision();
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                s9 = peg$parse__();
// @ts-ignore
                s8 = [s8, s9];
// @ts-ignore
                s7 = s8;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s7;
// @ts-ignore
                s7 = peg$FAILED;
              }
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                s7 = null;
              }
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                s8 = peg$c35;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f35(s3, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseElementList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseElision();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s3 = [s3, s4];
// @ts-ignore
      s2 = s3;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parseAssignmentExpression();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s1;
// @ts-ignore
      s1 = peg$f36(s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        s8 = peg$parseElision();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse__();
// @ts-ignore
          s8 = [s8, s9];
// @ts-ignore
          s7 = s8;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s3;
// @ts-ignore
          s3 = peg$f37(s1, s7, s8);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parseElision();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse__();
// @ts-ignore
            s8 = [s8, s9];
// @ts-ignore
            s7 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parseAssignmentExpression();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s3;
// @ts-ignore
            s3 = peg$f37(s1, s7, s8);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f38(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseElision() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
      s1 = peg$c78;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f39(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseObjectLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c79;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s3 = peg$c75;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f40();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s1 = peg$c79;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsePropertyNameAndValueList();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
            s5 = peg$c75;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e102); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f41(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s1 = peg$c79;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parsePropertyNameAndValueList();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
              s5 = peg$c78;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e105); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                s7 = peg$c75;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e102); }
              }
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f42(s3);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePropertyNameAndValueList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePropertyAssignment();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsePropertyAssignment();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsePropertyAssignment();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f43(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePropertyAssignment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePropertyName();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c80;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f44(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseGetToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsePropertyName();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s5 = peg$c76;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s7 = peg$c77;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                s9 = peg$c79;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e106); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s11 = peg$parseFunctionBody();
// @ts-ignore
                s12 = peg$parse__();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                  s13 = peg$c75;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s13 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e102); }
                }
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f45(s3, s11);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseSetToken();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parsePropertyName();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
              s5 = peg$c76;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e103); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$parsePropertySetParameterList();
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s8 = peg$parse__();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                  s9 = peg$c77;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s9 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e104); }
                }
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  s10 = peg$parse__();
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                    s11 = peg$c79;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s11 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e106); }
                  }
// @ts-ignore
                  if (s11 !== peg$FAILED) {
// @ts-ignore
                    s12 = peg$parse__();
// @ts-ignore
                    s13 = peg$parseFunctionBody();
// @ts-ignore
                    s14 = peg$parse__();
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                      s15 = peg$c75;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s15 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e102); }
                    }
// @ts-ignore
                    if (s15 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s0 = peg$f46(s3, s7, s13);
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePropertyName() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseIdentifierName();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseStringLiteral();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseNumericLiteral();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePropertySetParameterList() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f47(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMemberExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePrimaryExpression();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseFunctionExpression();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        s2 = peg$parseNewToken();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          s4 = peg$parseMemberExpression();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parse__();
// @ts-ignore
            s6 = peg$parseArguments();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s1;
// @ts-ignore
              s1 = peg$f48(s4, s6);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s5 = peg$c34;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s9 = peg$c35;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s3;
// @ts-ignore
            s3 = peg$f49(s1, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
          s5 = peg$c19;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseIdentifierName();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s3;
// @ts-ignore
            s3 = peg$f50(s1, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
          s5 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
              s9 = peg$c35;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e50); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s3;
// @ts-ignore
              s3 = peg$f49(s1, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
            s5 = peg$c19;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseIdentifierName();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s3;
// @ts-ignore
              s3 = peg$f50(s1, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f51(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNewExpression() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$parseMemberExpression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseNewToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseNewExpression();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f52(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCallExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseMemberExpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseArguments();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s1;
// @ts-ignore
        s1 = peg$f53(s2, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseArguments();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s3;
// @ts-ignore
        s3 = peg$f54(s1, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
          s5 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
              s9 = peg$c35;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e50); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s3;
// @ts-ignore
              s3 = peg$f55(s1, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
            s5 = peg$c19;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseIdentifierName();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s3;
// @ts-ignore
              s3 = peg$f56(s1, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseArguments();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s3;
// @ts-ignore
          s3 = peg$f54(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
            s5 = peg$c34;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseExpression();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                s9 = peg$c35;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s3;
// @ts-ignore
                s3 = peg$f55(s1, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s3;
// @ts-ignore
                s3 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = peg$currPos;
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
              s5 = peg$c19;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$parseIdentifierName();
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s3;
// @ts-ignore
                s3 = peg$f56(s1, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s3;
// @ts-ignore
                s3 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
          }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f57(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArguments() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s1 = peg$c76;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseArgumentList();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
        s4 = peg$c77;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f58(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArgumentList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAssignmentExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseAssignmentExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f59(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLeftHandSideExpression() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseCallExpression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseNewExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePostfixExpression() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLeftHandSideExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parsePostfixOperator();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f60(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLeftHandSideExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePostfixOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c81) {
// @ts-ignore
      s0 = peg$c81;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c82) {
// @ts-ignore
        s0 = peg$c82;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryExpression() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$parsePostfixExpression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseUnaryOperator();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseUnaryExpression();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f61(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDeleteToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseVoidToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s0 = input.substring(s0, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s0 = s1;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseTypeofToken();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s0 = input.substring(s0, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s0 = s1;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c81) {
// @ts-ignore
            s0 = peg$c81;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e108); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c82) {
// @ts-ignore
              s0 = peg$c82;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e109); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
                s2 = peg$c83;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s2 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e110); }
              }
// @ts-ignore
              if (s2 !== peg$FAILED) {
// @ts-ignore
                s3 = peg$currPos;
// @ts-ignore
                peg$silentFails++;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                  s4 = peg$c84;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s4 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e111); }
                }
// @ts-ignore
                peg$silentFails--;
// @ts-ignore
                if (s4 === peg$FAILED) {
// @ts-ignore
                  s3 = undefined;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s3;
// @ts-ignore
                  s3 = peg$FAILED;
                }
// @ts-ignore
                if (s3 !== peg$FAILED) {
// @ts-ignore
                  s2 = [s2, s3];
// @ts-ignore
                  s1 = s2;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s1;
// @ts-ignore
                  s1 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s1;
// @ts-ignore
                s1 = peg$FAILED;
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s0 = input.substring(s0, peg$currPos);
// @ts-ignore
              } else {
// @ts-ignore
                s0 = s1;
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                s1 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
                  s2 = peg$c85;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s2 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e112); }
                }
// @ts-ignore
                if (s2 !== peg$FAILED) {
// @ts-ignore
                  s3 = peg$currPos;
// @ts-ignore
                  peg$silentFails++;
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                    s4 = peg$c84;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s4 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e111); }
                  }
// @ts-ignore
                  peg$silentFails--;
// @ts-ignore
                  if (s4 === peg$FAILED) {
// @ts-ignore
                    s3 = undefined;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s3;
// @ts-ignore
                    s3 = peg$FAILED;
                  }
// @ts-ignore
                  if (s3 !== peg$FAILED) {
// @ts-ignore
                    s2 = [s2, s3];
// @ts-ignore
                    s1 = s2;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s1;
// @ts-ignore
                    s1 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s1;
// @ts-ignore
                  s1 = peg$FAILED;
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  s0 = input.substring(s0, peg$currPos);
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = s1;
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 126) {
// @ts-ignore
                    s0 = peg$c86;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e113); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
                      s0 = peg$c87;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e114); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExponentiationExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseUnaryExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseExponentiationOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseExponentiationExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseExponentiationOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseExponentiationExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f62(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExponentiationOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c88) {
// @ts-ignore
      s2 = peg$c88;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s4 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiplicativeExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseExponentiationExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseMultiplicativeOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseExponentiationExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseMultiplicativeOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseExponentiationExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f63(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiplicativeOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s2 = peg$c89;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s4 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
        s2 = peg$c33;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s4 = peg$c84;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s0 = input.substring(s0, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s0 = s1;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
          s2 = peg$c90;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e117); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
            s4 = peg$c84;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s3 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s0 = input.substring(s0, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAdditiveExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMultiplicativeExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseAdditiveOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseMultiplicativeExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseAdditiveOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseMultiplicativeExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f64(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAdditiveOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
      s2 = peg$c83;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r19.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s2 = peg$c85;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e112); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (peg$r20.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s0 = input.substring(s0, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseShiftExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAdditiveExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseShiftOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseAdditiveExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseShiftOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseAdditiveExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f65(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseShiftOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c91) {
// @ts-ignore
      s2 = peg$c91;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s4 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 3) === peg$c92) {
// @ts-ignore
        s2 = peg$c92;
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s4 = peg$c84;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s0 = input.substring(s0, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s0 = s1;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c93) {
// @ts-ignore
          s2 = peg$c93;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
            s4 = peg$c84;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s3 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s0 = input.substring(s0, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseShiftExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseRelationalOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseShiftExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRelationalOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseShiftExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f66(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c94) {
// @ts-ignore
      s0 = peg$c94;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c95) {
// @ts-ignore
        s0 = peg$c95;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e124); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
          s2 = peg$c96;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
            s4 = peg$c96;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s3 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s0 = input.substring(s0, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s0 = s1;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s2 = peg$c97;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e126); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s3 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s4 = peg$c97;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e126); }
            }
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s4 === peg$FAILED) {
// @ts-ignore
              s3 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s2 = [s2, s3];
// @ts-ignore
              s1 = s2;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s0 = input.substring(s0, peg$currPos);
// @ts-ignore
          } else {
// @ts-ignore
            s0 = s1;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseInstanceofToken();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s0 = input.substring(s0, peg$currPos);
// @ts-ignore
            } else {
// @ts-ignore
              s0 = s1;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parseInToken();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s0 = input.substring(s0, peg$currPos);
// @ts-ignore
              } else {
// @ts-ignore
                s0 = s1;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseShiftExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseRelationalOperatorNoIn();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseShiftExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRelationalOperatorNoIn();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseShiftExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f67(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalOperatorNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c94) {
// @ts-ignore
      s0 = peg$c94;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c95) {
// @ts-ignore
        s0 = peg$c95;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e124); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
          s2 = peg$c96;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
            s4 = peg$c96;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s3 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s0 = input.substring(s0, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s0 = s1;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s2 = peg$c97;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e126); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s3 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s4 = peg$c97;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e126); }
            }
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s4 === peg$FAILED) {
// @ts-ignore
              s3 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s2 = [s2, s3];
// @ts-ignore
              s1 = s2;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s0 = input.substring(s0, peg$currPos);
// @ts-ignore
          } else {
// @ts-ignore
            s0 = s1;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseInstanceofToken();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s0 = input.substring(s0, peg$currPos);
// @ts-ignore
            } else {
// @ts-ignore
              s0 = s1;
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRelationalExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseEqualityOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseRelationalExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseEqualityOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRelationalExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f68(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRelationalExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseEqualityOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseRelationalExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseEqualityOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRelationalExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f69(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c98) {
// @ts-ignore
      s0 = peg$c98;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 3) === peg$c99) {
// @ts-ignore
        s0 = peg$c99;
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c100) {
// @ts-ignore
          s0 = peg$c100;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c101) {
// @ts-ignore
            s0 = peg$c101;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e130); }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseANDExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseEqualityExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseANDOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseEqualityExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseANDOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseEqualityExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f70(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseANDExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseEqualityExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseANDOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseEqualityExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseANDOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseEqualityExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f71(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseANDOperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
      s2 = peg$c102;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r21.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e132); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseXORExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseANDExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseXOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseANDExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseXOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseANDExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f72(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseXORExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseANDExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseXOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseANDExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseXOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseANDExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f73(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseXOROperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
      s2 = peg$c103;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s4 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseORExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseXORExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseXORExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseXORExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f74(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseORExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseXORExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseBitwiseOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseXORExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseBitwiseOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseXORExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f75(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitwiseOROperator() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
      s2 = peg$c104;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r22.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalANDExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseORExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseLogicalANDOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseORExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseLogicalANDOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseORExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f76(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalANDExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitwiseORExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseLogicalANDOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseBitwiseORExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseLogicalANDOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseBitwiseORExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f77(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalANDOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c105) {
// @ts-ignore
      s0 = peg$c105;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalORExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalANDExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseLogicalOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseLogicalANDExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseLogicalOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseLogicalANDExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f78(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalORExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalANDExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseLogicalOROperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseLogicalANDExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseLogicalOROperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseLogicalANDExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f79(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalOROperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c106) {
// @ts-ignore
      s0 = peg$c106;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseConditionalExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalORExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
        s3 = peg$c107;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
            s7 = peg$c80;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e107); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseAssignmentExpression();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f80(s1, s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLogicalORExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseConditionalExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalORExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
        s3 = peg$c107;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
            s7 = peg$c80;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e107); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f81(s1, s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLogicalORExpressionNoIn();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignmentExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLeftHandSideExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s3 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s5 = peg$c84;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parseAssignmentExpression();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f82(s1, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseLeftHandSideExpression();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseAssignmentOperator();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseAssignmentExpression();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f83(s1, s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseConditionalExpression();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignmentExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLeftHandSideExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s3 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s5 = peg$c84;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f84(s1, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseLeftHandSideExpression();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseAssignmentOperator();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f85(s1, s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseConditionalExpressionNoIn();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignmentOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c108) {
// @ts-ignore
      s0 = peg$c108;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c109) {
// @ts-ignore
        s0 = peg$c109;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e140); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c110) {
// @ts-ignore
          s0 = peg$c110;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e141); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c111) {
// @ts-ignore
            s0 = peg$c111;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e142); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c112) {
// @ts-ignore
              s0 = peg$c112;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e143); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c113) {
// @ts-ignore
                s0 = peg$c113;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e144); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 3) === peg$c114) {
// @ts-ignore
                  s0 = peg$c114;
// @ts-ignore
                  peg$currPos += 3;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e145); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 3) === peg$c115) {
// @ts-ignore
                    s0 = peg$c115;
// @ts-ignore
                    peg$currPos += 3;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e146); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 4) === peg$c116) {
// @ts-ignore
                      s0 = peg$c116;
// @ts-ignore
                      peg$currPos += 4;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e147); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      if (input.substr(peg$currPos, 2) === peg$c117) {
// @ts-ignore
                        s0 = peg$c117;
// @ts-ignore
                        peg$currPos += 2;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e148); }
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        if (input.substr(peg$currPos, 2) === peg$c118) {
// @ts-ignore
                          s0 = peg$c118;
// @ts-ignore
                          peg$currPos += 2;
// @ts-ignore
                        } else {
// @ts-ignore
                          s0 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e149); }
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          if (input.substr(peg$currPos, 2) === peg$c119) {
// @ts-ignore
                            s0 = peg$c119;
// @ts-ignore
                            peg$currPos += 2;
// @ts-ignore
                          } else {
// @ts-ignore
                            s0 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e150); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAssignmentExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseAssignmentExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f86(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpressionNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f87(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStatement() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseBlock();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseVariableStatement();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseEmptyStatement();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseExpressionStatement();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseIfStatement();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseIterationStatement();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseContinueStatement();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseBreakStatement();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parseReturnStatement();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseWithStatement();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$parseLabelledStatement();
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$parseSwitchStatement();
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            s0 = peg$parseThrowStatement();
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              s0 = peg$parseTryStatement();
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                s0 = peg$parseDebuggerStatement();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlock() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c79;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseStatementList();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s4 = peg$c75;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f88(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStatementList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseStatement();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseStatement();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseStatement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f89(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseVarToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseVariableDeclarationList();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseEOS();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f90(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableDeclarationList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseVariableDeclaration();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseVariableDeclaration();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseVariableDeclaration();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f91(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableDeclarationListNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseVariableDeclarationNoIn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseVariableDeclarationNoIn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseVariableDeclarationNoIn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f92(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseInitialiser();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f93(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableDeclarationNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseInitialiserNoIn();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f94(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInitialiser() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
      s1 = peg$c84;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s3 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f95(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInitialiserNoIn() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
      s1 = peg$c84;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s3 = peg$c84;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseAssignmentExpressionNoIn();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f96(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEmptyStatement() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
      s1 = peg$c74;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f97();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpressionStatement() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s2 = peg$c79;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseFunctionToken();
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseExpression();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseEOS();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f98(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIfToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c76;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c77;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseStatement();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse__();
// @ts-ignore
              s11 = peg$parseElseToken();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parse__();
// @ts-ignore
                s13 = peg$parseStatement();
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f99(s5, s9, s13);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseIfToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s3 = peg$c76;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseExpression();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s7 = peg$c77;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              s9 = peg$parseStatement();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f100(s5, s9);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIterationStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDoToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseStatement();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseWhileToken();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s7 = peg$c76;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseExpression();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                s11 = peg$c77;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s11 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e104); }
              }
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parseEOS();
// @ts-ignore
                if (s12 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f101(s3, s9);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseWhileToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s3 = peg$c76;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseExpression();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s7 = peg$c77;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              s9 = peg$parseStatement();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f102(s5, s9);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseForToken();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s3 = peg$c76;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$currPos;
// @ts-ignore
            s6 = peg$parseExpressionNoIn();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = peg$parse__();
// @ts-ignore
              s6 = [s6, s7];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              s5 = null;
            }
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s6 = peg$c74;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = peg$parse__();
// @ts-ignore
              s8 = peg$currPos;
// @ts-ignore
              s9 = peg$parseExpression();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s9 = [s9, s10];
// @ts-ignore
                s8 = s9;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
              if (s8 === peg$FAILED) {
// @ts-ignore
                s8 = null;
              }
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                s9 = peg$c74;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e101); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s11 = peg$currPos;
// @ts-ignore
                s12 = peg$parseExpression();
// @ts-ignore
                if (s12 !== peg$FAILED) {
// @ts-ignore
                  s13 = peg$parse__();
// @ts-ignore
                  s12 = [s12, s13];
// @ts-ignore
                  s11 = s12;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s11;
// @ts-ignore
                  s11 = peg$FAILED;
                }
// @ts-ignore
                if (s11 === peg$FAILED) {
// @ts-ignore
                  s11 = null;
                }
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                  s12 = peg$c77;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s12 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e104); }
                }
// @ts-ignore
                if (s12 !== peg$FAILED) {
// @ts-ignore
                  s13 = peg$parse__();
// @ts-ignore
                  s14 = peg$parseStatement();
// @ts-ignore
                  if (s14 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f103(s5, s8, s11, s14);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseForToken();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
              s3 = peg$c76;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e103); }
            }
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s4 = peg$parse__();
// @ts-ignore
              s5 = peg$parseVarToken();
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                s6 = peg$parse__();
// @ts-ignore
                s7 = peg$parseVariableDeclarationListNoIn();
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s8 = peg$parse__();
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                    s9 = peg$c74;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s9 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e101); }
                  }
// @ts-ignore
                  if (s9 !== peg$FAILED) {
// @ts-ignore
                    s10 = peg$parse__();
// @ts-ignore
                    s11 = peg$currPos;
// @ts-ignore
                    s12 = peg$parseExpression();
// @ts-ignore
                    if (s12 !== peg$FAILED) {
// @ts-ignore
                      s13 = peg$parse__();
// @ts-ignore
                      s12 = [s12, s13];
// @ts-ignore
                      s11 = s12;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s11;
// @ts-ignore
                      s11 = peg$FAILED;
                    }
// @ts-ignore
                    if (s11 === peg$FAILED) {
// @ts-ignore
                      s11 = null;
                    }
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                      s12 = peg$c74;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s12 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e101); }
                    }
// @ts-ignore
                    if (s12 !== peg$FAILED) {
// @ts-ignore
                      s13 = peg$parse__();
// @ts-ignore
                      s14 = peg$currPos;
// @ts-ignore
                      s15 = peg$parseExpression();
// @ts-ignore
                      if (s15 !== peg$FAILED) {
// @ts-ignore
                        s16 = peg$parse__();
// @ts-ignore
                        s15 = [s15, s16];
// @ts-ignore
                        s14 = s15;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s14;
// @ts-ignore
                        s14 = peg$FAILED;
                      }
// @ts-ignore
                      if (s14 === peg$FAILED) {
// @ts-ignore
                        s14 = null;
                      }
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                        s15 = peg$c77;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s15 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e104); }
                      }
// @ts-ignore
                      if (s15 !== peg$FAILED) {
// @ts-ignore
                        s16 = peg$parse__();
// @ts-ignore
                        s17 = peg$parseStatement();
// @ts-ignore
                        if (s17 !== peg$FAILED) {
// @ts-ignore
                          peg$savedPos = s0;
// @ts-ignore
                          s0 = peg$f104(s7, s11, s14, s17);
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseForToken();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
                s3 = peg$c76;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e103); }
              }
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                s4 = peg$parse__();
// @ts-ignore
                s5 = peg$parseLeftHandSideExpression();
// @ts-ignore
                if (s5 !== peg$FAILED) {
// @ts-ignore
                  s6 = peg$parse__();
// @ts-ignore
                  s7 = peg$parseInToken();
// @ts-ignore
                  if (s7 !== peg$FAILED) {
// @ts-ignore
                    s8 = peg$parse__();
// @ts-ignore
                    s9 = peg$parseExpression();
// @ts-ignore
                    if (s9 !== peg$FAILED) {
// @ts-ignore
                      s10 = peg$parse__();
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                        s11 = peg$c77;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s11 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e104); }
                      }
// @ts-ignore
                      if (s11 !== peg$FAILED) {
// @ts-ignore
                        s12 = peg$parse__();
// @ts-ignore
                        s13 = peg$parseStatement();
// @ts-ignore
                        if (s13 !== peg$FAILED) {
// @ts-ignore
                          peg$savedPos = s0;
// @ts-ignore
                          s0 = peg$f105(s5, s9, s13);
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parseForToken();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parse__();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
                  s3 = peg$c76;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s3 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e103); }
                }
// @ts-ignore
                if (s3 !== peg$FAILED) {
// @ts-ignore
                  s4 = peg$parse__();
// @ts-ignore
                  s5 = peg$parseVarToken();
// @ts-ignore
                  if (s5 !== peg$FAILED) {
// @ts-ignore
                    s6 = peg$parse__();
// @ts-ignore
                    s7 = peg$parseVariableDeclarationListNoIn();
// @ts-ignore
                    if (s7 !== peg$FAILED) {
// @ts-ignore
                      s8 = peg$parse__();
// @ts-ignore
                      s9 = peg$parseInToken();
// @ts-ignore
                      if (s9 !== peg$FAILED) {
// @ts-ignore
                        s10 = peg$parse__();
// @ts-ignore
                        s11 = peg$parseExpression();
// @ts-ignore
                        if (s11 !== peg$FAILED) {
// @ts-ignore
                          s12 = peg$parse__();
// @ts-ignore
                          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                            s13 = peg$c77;
// @ts-ignore
                            peg$currPos++;
// @ts-ignore
                          } else {
// @ts-ignore
                            s13 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e104); }
                          }
// @ts-ignore
                          if (s13 !== peg$FAILED) {
// @ts-ignore
                            s14 = peg$parse__();
// @ts-ignore
                            s15 = peg$parseStatement();
// @ts-ignore
                            if (s15 !== peg$FAILED) {
// @ts-ignore
                              peg$savedPos = s0;
// @ts-ignore
                              s0 = peg$f106(s7, s11, s15);
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseContinueStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseContinueToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseEOS();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f107();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseContinueToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseIdentifier();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parseEOS();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f108(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBreakStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBreakToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseEOS();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f109();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseBreakToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseIdentifier();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parseEOS();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f110(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseReturnStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseReturnToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseEOS();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f111();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseReturnToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseExpression();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parseEOS();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f112(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWithStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseWithToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c76;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c77;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseStatement();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f113(s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSwitchToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c76;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c77;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseCaseBlock();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f114(s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCaseBlock() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c79;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseCaseClauses();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s4 = peg$c75;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f115(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s1 = peg$c79;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseCaseClauses();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        s4 = peg$parseDefaultClause();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parseCaseClauses();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s7 = [s7, s8];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s6 = null;
          }
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
            s7 = peg$c75;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e102); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f116(s3, s4, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCaseClauses() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCaseClause();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCaseClause();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCaseClause();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f117(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCaseClause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCaseToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s5 = peg$c80;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parse__();
// @ts-ignore
          s8 = peg$parseStatementList();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s7 = [s7, s8];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s6 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f118(s3, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDefaultClause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDefaultToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c80;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parseStatementList();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f119(s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLabelledStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c80;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseStatement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f120(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseThrowStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseThrowToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseEOS();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f121(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTryStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseTryToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseBlock();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCatch();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseFinally();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f122(s3, s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseTryToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseBlock();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseCatch();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f123(s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseTryToken();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseBlock();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseFinally();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f124(s3, s5);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCatch() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCatchToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c76;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseIdentifier();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c77;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseBlock();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f125(s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFinally() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFinallyToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseBlock();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f126(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDebuggerStatement() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDebuggerToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseEOS();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f127();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFunctionToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseIdentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c76;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parseFormalParameterList();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse__();
// @ts-ignore
            s8 = [s8, s9];
// @ts-ignore
            s7 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s8 = peg$c77;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
              s10 = peg$c79;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s10 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e106); }
            }
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s11 = peg$parse__();
// @ts-ignore
              s12 = peg$parseFunctionBody();
// @ts-ignore
              s13 = peg$parse__();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                s14 = peg$c75;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s14 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e102); }
              }
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f128(s3, s7, s12);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFunctionToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseIdentifier();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s4 = peg$c76;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        s7 = peg$parseFormalParameterList();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s7 = [s7, s8];
// @ts-ignore
          s6 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s7 = peg$c77;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s9 = peg$c79;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseFunctionBody();
// @ts-ignore
            s12 = peg$parse__();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s13 = peg$c75;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s13 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e102); }
            }
// @ts-ignore
            if (s13 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f129(s3, s6, s11);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFormalParameterList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c78;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseIdentifier();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c78;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseIdentifier();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f130(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionBody() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSourceElements();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f131(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseProgram() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSourceElements();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f132(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSourceElements() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSourceElement();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseSourceElement();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseSourceElement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f133(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSourceElement() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseStatement();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseFunctionDeclaration();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "Start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "Start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = Program;
export type SourceCharacter = string;
export type WhiteSpace =
  | "\t"
  | "\u000b"
  | "\f"
  | " "
  | "\u00a0"
  | "\ufeff"
  | Zs;
export type LineTerminator = string;
export type LineTerminatorSequence = "\n" | "\r\n" | "\r" | "\u2028" | "\u2029";
export type Comment = MultiLineComment | SingleLineComment;
export type MultiLineComment = ["/*", [undefined, SourceCharacter][], "*/"];
export type MultiLineCommentNoLineTerminator = [
  "/*",
  [undefined, SourceCharacter][],
  "*/"
];
export type SingleLineComment = ["//", [undefined, SourceCharacter][]];
export type Identifier = IdentifierName;
export type IdentifierName = { type: "Identifier"; name: string };
export type IdentifierStart = UnicodeLetter | "$" | "_" | UnicodeEscapeSequence;
export type IdentifierPart =
  | IdentifierStart
  | UnicodeCombiningMark
  | Nd
  | Pc
  | "\u200c"
  | "\u200d";
export type UnicodeLetter = Lu | Ll | Lt | Lm | Lo | Nl;
export type UnicodeCombiningMark = Mn | Mc;
export type ReservedWord =
  | Keyword
  | FutureReservedWord
  | NullLiteral
  | BooleanLiteral;
export type Keyword =
  | BreakToken
  | CaseToken
  | CatchToken
  | ContinueToken
  | DebuggerToken
  | DefaultToken
  | DeleteToken
  | DoToken
  | ElseToken
  | FinallyToken
  | ForToken
  | FunctionToken
  | IfToken
  | InstanceofToken
  | InToken
  | NewToken
  | ReturnToken
  | SwitchToken
  | ThisToken
  | ThrowToken
  | TryToken
  | TypeofToken
  | VarToken
  | VoidToken
  | WhileToken
  | WithToken;
export type FutureReservedWord =
  | ClassToken
  | ConstToken
  | EnumToken
  | ExportToken
  | ExtendsToken
  | ImportToken
  | SuperToken;
export type Literal =
  | NullLiteral
  | BooleanLiteral
  | NumericLiteral
  | StringLiteral
  | RegularExpressionLiteral;
export type NullLiteral = { type: "Literal"; value: null };
export type BooleanLiteral =
  | { type: "Literal"; value: true }
  | { type: "Literal"; value: false };
export type NumericLiteral = HexIntegerLiteral | DecimalLiteral;
export type DecimalLiteral = { type: "Literal"; value: number };
export type DecimalIntegerLiteral = "0" | [NonZeroDigit, DecimalDigit[]];
export type DecimalDigit = string;
export type NonZeroDigit = string;
export type ExponentPart = [ExponentIndicator, SignedInteger];
export type ExponentIndicator = string;
export type SignedInteger = [string | null, DecimalDigit[]];
export type HexIntegerLiteral = { type: "Literal"; value: number };
export type HexDigit = string;
export type StringLiteral = { type: "Literal"; value: string };
export type DoubleStringCharacter = string | EscapeSequence | LineContinuation;
export type SingleStringCharacter = string | EscapeSequence | LineContinuation;
export type LineContinuation = "";
export type EscapeSequence =
  | CharacterEscapeSequence
  | "\0"
  | HexEscapeSequence
  | UnicodeEscapeSequence;
export type CharacterEscapeSequence =
  | SingleEscapeCharacter
  | NonEscapeCharacter;
export type SingleEscapeCharacter =
  | "'"
  | '"'
  | "\\"
  | "\b"
  | "\f"
  | "\n"
  | "\r"
  | "\t"
  | "\v";
export type NonEscapeCharacter = string;
export type EscapeCharacter = SingleEscapeCharacter | DecimalDigit | "x" | "u";
export type HexEscapeSequence = string;
export type UnicodeEscapeSequence = string;
export type RegularExpressionLiteral = {
  type: "Literal";
  value: RegExp | undefined;
};
export type RegularExpressionBody = [
  RegularExpressionFirstChar,
  RegularExpressionChar[]
];
export type RegularExpressionFirstChar =
  | [undefined, RegularExpressionNonTerminator]
  | RegularExpressionBackslashSequence
  | RegularExpressionClass;
export type RegularExpressionChar =
  | [undefined, RegularExpressionNonTerminator]
  | RegularExpressionBackslashSequence
  | RegularExpressionClass;
export type RegularExpressionBackslashSequence = [
  "\\",
  RegularExpressionNonTerminator
];
export type RegularExpressionNonTerminator = [undefined, SourceCharacter];
export type RegularExpressionClass = ["[", RegularExpressionClassChar[], "]"];
export type RegularExpressionClassChar =
  | [undefined, RegularExpressionNonTerminator]
  | RegularExpressionBackslashSequence;
export type RegularExpressionFlags = IdentifierPart[];
export type Ll = string;
export type Lm = string;
export type Lo = string;
export type Lt = string;
export type Lu = string;
export type Mc = string;
export type Mn = string;
export type Nd = string;
export type Nl = string;
export type Pc = string;
export type Zs = string;
export type BreakToken = ["break", undefined];
export type CaseToken = ["case", undefined];
export type CatchToken = ["catch", undefined];
export type ClassToken = ["class", undefined];
export type ConstToken = ["const", undefined];
export type ContinueToken = ["continue", undefined];
export type DebuggerToken = ["debugger", undefined];
export type DefaultToken = ["default", undefined];
export type DeleteToken = ["delete", undefined];
export type DoToken = ["do", undefined];
export type ElseToken = ["else", undefined];
export type EnumToken = ["enum", undefined];
export type ExportToken = ["export", undefined];
export type ExtendsToken = ["extends", undefined];
export type FalseToken = ["false", undefined];
export type FinallyToken = ["finally", undefined];
export type ForToken = ["for", undefined];
export type FunctionToken = ["function", undefined];
export type GetToken = ["get", undefined];
export type IfToken = ["if", undefined];
export type ImportToken = ["import", undefined];
export type InstanceofToken = ["instanceof", undefined];
export type InToken = ["in", undefined];
export type NewToken = ["new", undefined];
export type NullToken = ["null", undefined];
export type ReturnToken = ["return", undefined];
export type SetToken = ["set", undefined];
export type SuperToken = ["super", undefined];
export type SwitchToken = ["switch", undefined];
export type ThisToken = ["this", undefined];
export type ThrowToken = ["throw", undefined];
export type TrueToken = ["true", undefined];
export type TryToken = ["try", undefined];
export type TypeofToken = ["typeof", undefined];
export type VarToken = ["var", undefined];
export type VoidToken = ["void", undefined];
export type WhileToken = ["while", undefined];
export type WithToken = ["with", undefined];
export type __ = (WhiteSpace | LineTerminatorSequence | Comment)[];
export type _ = (WhiteSpace | MultiLineCommentNoLineTerminator)[];
export type EOS =
  | [__, ";"]
  | [_, SingleLineComment | null, LineTerminatorSequence]
  | [_, undefined]
  | [__, EOF];
export type EOF = undefined;
export type PrimaryExpression =
  | { type: "ThisExpression" }
  | Identifier
  | Literal
  | ArrayLiteral
  | ObjectLiteral
  | Expression;
export type ArrayLiteral =
  | { type: "ArrayExpression"; elements: any }
  | { type: "ArrayExpression"; elements: ElementList };
export type ElementList = any[];
export type Elision = any[];
export type ObjectLiteral =
  | { type: "ObjectExpression"; properties: [] }
  | { type: "ObjectExpression"; properties: PropertyNameAndValueList };
export type PropertyNameAndValueList = any[];
export type PropertyAssignment =
  | {
      type: "Property";
      key: PropertyName;
      value: AssignmentExpression;
      kind: "init";
    }
  | {
      type: "Property";
      key: PropertyName;
      value: {
        type: "FunctionExpression";
        id: null;
        params: [];
        body: FunctionBody;
      };
      kind: "get";
    }
  | {
      type: "Property";
      key: PropertyName;
      value: {
        type: "FunctionExpression";
        id: null;
        params: PropertySetParameterList;
        body: FunctionBody;
      };
      kind: "set";
    };
export type PropertyName = IdentifierName | StringLiteral | NumericLiteral;
export type PropertySetParameterList = [Identifier];
export type MemberExpression =
  | { property: Expression; computed: true }
  | { property: IdentifierName; computed: false };
export type NewExpression =
  | MemberExpression
  | { type: "NewExpression"; callee: NewExpression; arguments: [] };
export type CallExpression =
  | { type: "CallExpression"; arguments: Arguments }
  | { type: "MemberExpression"; property: Expression; computed: true }
  | { type: "MemberExpression"; property: IdentifierName; computed: false };
export type Arguments = any;
export type ArgumentList = any[];
export type LeftHandSideExpression = CallExpression | NewExpression;
export type PostfixExpression =
  | {
      type: "UpdateExpression";
      operator: PostfixOperator;
      argument: LeftHandSideExpression;
      prefix: false;
    }
  | LeftHandSideExpression;
export type PostfixOperator = "++" | "--";
export type UnaryExpression =
  | PostfixExpression
  | {
      type: string;
      operator: UnaryOperator;
      argument: UnaryExpression;
      prefix: true;
    };
export type UnaryOperator = string | "++" | "--" | "~" | "!";
export type ExponentiationExpression = any;
export type ExponentiationOperator = string;
export type MultiplicativeExpression = any;
export type MultiplicativeOperator = string;
export type AdditiveExpression = any;
export type AdditiveOperator = string;
export type ShiftExpression = any;
export type ShiftOperator = string;
export type RelationalExpression = any;
export type RelationalOperator = "<=" | ">=" | string;
export type RelationalExpressionNoIn = any;
export type RelationalOperatorNoIn = "<=" | ">=" | string;
export type EqualityExpression = any;
export type EqualityExpressionNoIn = any;
export type EqualityOperator = "===" | "!==" | "==" | "!=";
export type BitwiseANDExpression = any;
export type BitwiseANDExpressionNoIn = any;
export type BitwiseANDOperator = string;
export type BitwiseXORExpression = any;
export type BitwiseXORExpressionNoIn = any;
export type BitwiseXOROperator = string;
export type BitwiseORExpression = any;
export type BitwiseORExpressionNoIn = any;
export type BitwiseOROperator = string;
export type LogicalANDExpression = any;
export type LogicalANDExpressionNoIn = any;
export type LogicalANDOperator = "&&";
export type LogicalORExpression = any;
export type LogicalORExpressionNoIn = any;
export type LogicalOROperator = "||";
export type ConditionalExpression =
  | {
      type: "ConditionalExpression";
      test: LogicalORExpression;
      consequent: AssignmentExpression;
      alternate: AssignmentExpression;
    }
  | LogicalORExpression;
export type ConditionalExpressionNoIn =
  | {
      type: "ConditionalExpression";
      test: LogicalORExpressionNoIn;
      consequent: AssignmentExpression;
      alternate: AssignmentExpressionNoIn;
    }
  | LogicalORExpressionNoIn;
export type AssignmentExpression =
  | {
      type: "AssignmentExpression";
      operator: "=";
      left: LeftHandSideExpression;
      right: AssignmentExpression;
    }
  | {
      type: "AssignmentExpression";
      operator: AssignmentOperator;
      left: LeftHandSideExpression;
      right: AssignmentExpression;
    }
  | ConditionalExpression;
export type AssignmentExpressionNoIn =
  | {
      type: "AssignmentExpression";
      operator: "=";
      left: LeftHandSideExpression;
      right: AssignmentExpressionNoIn;
    }
  | {
      type: "AssignmentExpression";
      operator: AssignmentOperator;
      left: LeftHandSideExpression;
      right: AssignmentExpressionNoIn;
    }
  | ConditionalExpressionNoIn;
export type AssignmentOperator =
  | "**="
  | "*="
  | "/="
  | "%="
  | "+="
  | "-="
  | "<<="
  | ">>="
  | ">>>="
  | "&="
  | "^="
  | "|=";
export type Expression =
  | AssignmentExpression
  | { type: string; expressions: any[] };
export type ExpressionNoIn =
  | AssignmentExpressionNoIn
  | { type: string; expressions: any[] };
export type Statement =
  | Block
  | VariableStatement
  | EmptyStatement
  | ExpressionStatement
  | IfStatement
  | IterationStatement
  | ContinueStatement
  | BreakStatement
  | ReturnStatement
  | WithStatement
  | LabelledStatement
  | SwitchStatement
  | ThrowStatement
  | TryStatement
  | DebuggerStatement;
export type Block = { type: "BlockStatement"; body: any };
export type StatementList = any[];
export type VariableStatement = {
  type: "VariableDeclaration";
  declarations: VariableDeclarationList;
  kind: "var";
};
export type VariableDeclarationList = any[];
export type VariableDeclarationListNoIn = any[];
export type VariableDeclaration = {
  type: "VariableDeclarator";
  id: Identifier;
  init: any;
};
export type VariableDeclarationNoIn = {
  type: "VariableDeclarator";
  id: Identifier;
  init: any;
};
export type Initialiser = AssignmentExpression;
export type InitialiserNoIn = AssignmentExpressionNoIn;
export type EmptyStatement = { type: "EmptyStatement" };
export type ExpressionStatement = {
  type: "ExpressionStatement";
  expression: Expression;
};
export type IfStatement =
  | {
      type: "IfStatement";
      test: Expression;
      consequent: Statement;
      alternate: Statement;
    }
  | {
      type: "IfStatement";
      test: Expression;
      consequent: Statement;
      alternate: null;
    };
export type IterationStatement =
  | { type: "DoWhileStatement"; body: Statement; test: Expression }
  | { type: "WhileStatement"; test: Expression; body: Statement }
  | { type: "ForStatement"; init: any; test: any; update: any; body: Statement }
  | {
      type: "ForStatement";
      init: {
        type: "VariableDeclaration";
        declarations: VariableDeclarationListNoIn;
        kind: "var";
      };
      test: any;
      update: any;
      body: Statement;
    }
  | {
      type: "ForInStatement";
      left: LeftHandSideExpression;
      right: Expression;
      body: Statement;
    }
  | {
      type: "ForInStatement";
      left: {
        type: "VariableDeclaration";
        declarations: VariableDeclarationListNoIn;
        kind: "var";
      };
      right: Expression;
      body: Statement;
    };
export type ContinueStatement =
  | { type: "ContinueStatement"; label: null }
  | { type: "ContinueStatement"; label: Identifier };
export type BreakStatement =
  | { type: "BreakStatement"; label: null }
  | { type: "BreakStatement"; label: Identifier };
export type ReturnStatement =
  | { type: "ReturnStatement"; argument: null }
  | { type: "ReturnStatement"; argument: Expression };
export type WithStatement = {
  type: "WithStatement";
  object: Expression;
  body: Statement;
};
export type SwitchStatement = {
  type: "SwitchStatement";
  discriminant: Expression;
  cases: CaseBlock;
};
export type CaseBlock = any;
export type CaseClauses = any[];
export type CaseClause = {
  type: "SwitchCase";
  test: Expression;
  consequent: any;
};
export type DefaultClause = { type: "SwitchCase"; test: null; consequent: any };
export type LabelledStatement = {
  type: "LabeledStatement";
  label: Identifier;
  body: Statement;
};
export type ThrowStatement = { type: "ThrowStatement"; argument: Expression };
export type TryStatement =
  | { type: "TryStatement"; block: Block; handler: Catch; finalizer: Finally }
  | { type: "TryStatement"; block: Block; handler: Catch; finalizer: null }
  | { type: "TryStatement"; block: Block; handler: null; finalizer: Finally };
export type Catch = { type: "CatchClause"; param: Identifier; body: Block };
export type Finally = Block;
export type DebuggerStatement = { type: "DebuggerStatement" };
export type FunctionDeclaration = {
  type: "FunctionDeclaration";
  id: Identifier;
  params: any;
  body: FunctionBody;
};
export type FunctionExpression = {
  type: "FunctionExpression";
  id: any;
  params: any;
  body: FunctionBody;
};
export type FormalParameterList = any[];
export type FunctionBody = { type: "BlockStatement"; body: any };
export type Program = { type: "Program"; body: any };
export type SourceElements = any[];
export type SourceElement = Statement | FunctionDeclaration;
