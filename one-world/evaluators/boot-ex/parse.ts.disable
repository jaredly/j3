import { RecNodeT } from '../shared/nodes';

export const parse = (node: RecNodeT<unknown>): any => {
    switch (node.type) {
        case 'id': {
            return parsePrim(node) || c.evar(node.text, node.loc);
        }
        case 'string': {
            const exprs = node.templates.map((t) => parse(t.expr));
            return {
                type: 'estr',
                0: node.first.text,
                1: list(
                    node.templates.map((t, i) =>
                        pair(exprs[i], pair(t.suffix.text, t.suffix.loc)),
                    ),
                ),
                2: node.loc,
            };
        }
        case 'list': {
            const values = filterBlanks(node.values);
            // empty list gets parsed as a `()` unit value.
            if (!values.length) return c.evar('()', node.loc);
            if (values[0].type === 'identifier') {
                const first = values[0].text;
                // If we're in a list w/ the first item being an identifier, see if
                // we're in a 'special form' (defined below)
                if (forms[first]) {
                    const res = forms[first](node.loc, ...values.slice(1));
                    if (res) return res;
                }
            }
            // Otherwise do function application.
            const parsed = values.map(parse);
            return c.app(parsed[0], list(parsed.slice(1)), node.loc);
        }
        case 'array': {
            if (!node.values.length) return c.evar('nil', node.loc);
            let last = node.values[node.values.length - 1];
            // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).
            // a final `spread` node is neatly represented by replacing the
            // final `nil` with the contents of the spread.
            // so [a b ..c] becomes (cons a (cons b c))
            let res =
                last.type === 'spread'
                    ? parse(last.contents)
                    : c.cons(parse(last), c.nil(node.loc), node.loc);
            for (let i = node.values.length - 2; i >= 0; i--) {
                res = c.cons(parse(node.values[i]), res);
            }
            return res;
        }
        // for our language, the `raw-code` node just gets passed through as a runtime string.
        // we can call `eval` on it if we need an escape hatch for e.g. producing the API
        // expected by the structured editor.
        case 'raw-code':
            return { type: 'estr', 0: node.raw, 1: nil, 2: node.loc };
    }
    throw new Error(`cant parse ${JSON.stringify(node)}`);
};

const forms = {
    fn: (loc, args, body) => {
        if (!args || !body) return;
        if (args.type !== 'array') return;
        const pats = filterBlanks(args.values).map(parsePat);
        return { type: 'elambda', 0: list(pats), 1: parse(body), 2: loc };
    },
    let: (loc, bindings, body) => {
        if (!bindings || !body) return;
        if (bindings.type !== 'array') return;
        const pairs = makePairs(filterBlanks(bindings.values));
        return {
            type: 'elet',
            0: list(
                pairs.map(([pat, init]) => pair(parsePat(pat), parse(init))),
            ),
            1: parse(body),
            2: loc,
        };
    },
    'let->': (loc, bindings, body) => {
        if (!bindings || !body) return;
        if (bindings.type !== 'array') return;
        const pairs = makePairs(filterBlanks(bindings.values));
        return pairs.reduceRight(
            (body, [pat, init]) =>
                c.app(
                    c.evar('>>=', loc),
                    list([
                        parse(init),
                        {
                            type: 'elambda',
                            0: list([parsePat(pat)]),
                            1: body,
                            2: loc,
                        },
                    ]),
                    loc,
                ),
            parse(body),
        );
    },
    match: (loc, target, ...rest) => {
        if (!target || !rest.length) return;
        const cases = makePairs(rest);
        return {
            type: 'ematch',
            0: parse(target),
            1: list(
                cases.map(([pat, body]) => pair(parsePat(pat), parse(body))),
            ),
            2: loc,
        };
    },
    ',': (loc, ...args) =>
        args
            .map(parse)
            .reduceRight((right, left) =>
                c.app(c.evar(',', loc), list([left, right]), loc),
            ),
    '@': (loc, inner) => ({
        type: 'equot',
        0: { type: 'quot/expr', 0: parse(inner) },
        1: loc,
    }),
    '@!': (loc, inner) => ({
        type: 'equot',
        0: { type: 'quot/top', 0: parseTop(inner) },
        1: loc,
    }),
    '@p': (loc, inner) => ({
        type: 'equot',
        0: { type: 'quot/pat', 0: parsePat(inner) },
        1: loc,
    }),
    '@t': (loc, inner) => ({
        type: 'equot',
        0: { type: 'quot/type', 0: parseType(inner) },
        1: loc,
    }),
    // The "double quote" means that the runtime value isn't going to be an AST type, but rather
    // a CST type! We'll use it in the self-hosting parser to be able to write tests like
    // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the
    // CST of the structured editor into a data format that fits within our encoding, where
    // attributes of data types have numeric indices, not text labels.
    // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`
    '@@': (loc, inner) => ({
        type: 'equot',
        0: { type: 'quot/quot', 0: fromNode(inner) },
        1: loc,
    }),
    // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`
    if: (loc, cond, yes, no) => ({
        type: 'ematch',
        0: parse(cond),
        1: list([
            pair(
                {
                    type: 'pprim',
                    0: { type: 'pbool', 0: true, 1: loc },
                    1: loc,
                },
                parse(yes),
            ),
            pair({ type: 'pany', 0: loc }, parse(no)),
        ]),
    }),
};

const c = {
    prim: (prim, loc = -1) => ({ type: 'eprim', 0: prim, 1: loc }),
    int: (v, loc = -1) => ({ type: 'pint', 0: v, 1: loc }),
    bool: (v, loc = -1) => ({ type: 'pbool', 0: v, 1: loc }),
    evar: (text, loc = -1) => ({ type: 'evar', 0: text, 1: loc }),
    app: (target, arg, loc = -1) => ({
        type: 'eapp',
        0: target,
        1: arg,
        2: loc,
    }),
    nil: (l) => c.evar('nil', l),
    cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),
    list: (values, l) => {
        let v = c.nil(l);
        for (let i = values.length - 1; i >= 0; i--) {
            v = c.cons(values[i], v, l);
        }
        return v;
    },
};

// Here's our utility function for converting the structure editor's CST nodes into values that conform to our
// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays
// are converted to linked lists.
// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.
const fromNode = (node) => {
    if (isBlank(node)) return;
    switch (node.type) {
        case 'identifier':
            return { type: 'cst/id', 0: node.text, 1: node.loc };
        case 'spread':
            const inner = fromNode(node.contents);
            return inner
                ? { type: 'cst/spread', 0: inner, 1: node.loc }
                : { type: 'cst/empty-spread', 0: node.loc };
        case 'array':
        case 'record':
        case 'list':
            return {
                type: 'cst/' + node.type,
                0: list(node.values.map(fromNode).filter(Boolean)),
                1: node.loc,
            };
        case 'string':
            return {
                type: 'cst/string',
                0: node.first.text,
                1: list(
                    node.templates.map((item) =>
                        pair(
                            fromNode(item.expr) ?? {
                                type: 'cst/string',
                                0: '',
                                1: nil,
                            },
                            pair(item.suffix.text, item.suffix.loc),
                        ),
                    ),
                ),
                2: node.loc,
            };
    }
};

// Expects a node of type 'identifier' and if it's an int or true/false, returns
// the appropriate `prim`
const parsePrim = (node) => {
    const v = Number(node.text);
    if (v + '' === node.text && Number.isInteger(v)) {
        return c.prim(c.int(v, node.loc), node.loc);
    }
    if (node.text === 'true' || node.text === 'false') {
        return c.prim(c.bool(node.text === 'true', node.loc), node.loc);
    }
    return null;
};

const parseType = (node) => {
    if (node.type === 'identifier') {
        return { type: 'tcon', 0: node.text, 1: node.loc };
    }
    if (node.type === 'list') {
        const values = filterBlanks(node.values);
        if (!values.length) return { type: 'tcon', 0: '()', 1: node.loc };
        if (
            values.length === 3 &&
            values[0].type === 'identifier' &&
            values[0].text === 'fn' &&
            values[1].type === 'array'
        ) {
            const body = parseType(values[2]);
            // This 'reduceRight' is how we convert a function type declaration
            // with potentially many arguments into function types with only
            // single arguments.
            // for a fn type (fn [a b c] d)
            // the inner function will be called with
            //    [body]           [arg]
            //    d                c
            //    (-> c d)         b
            //    (-> b (-> c d))  a
            // and returns
            //    (-> a (-> b (-> c d)))
            return values[1].values.reduceRight(
                (body, arg) => ({
                    type: 'tapp',
                    0: {
                        type: 'tapp',
                        0: { type: 'tcon', 0: '->', 1: node.loc },
                        1: parseType(arg),
                        2: node.loc,
                    },
                    1: body,
                    2: node.loc,
                }),
                body,
            );
        }
        // Tuples are also a special case; (, a b c) is sugar for (, a (, b c))
        if (
            values[0].type === 'identifier' &&
            values[0].text === ',' &&
            values.length > 1
        ) {
            return values
                .slice(1)
                .map(parseType)
                .reduceRight((right, left) => ({
                    type: 'tapp',
                    0: {
                        type: 'tapp',
                        0: { type: 'tcon', 0: ',', 1: values[0].loc },
                        1: left,
                        2: node.loc,
                    },
                    1: right,
                    2: node.loc,
                }));
        }
        let res = parseType(values[0]);
        for (let i = 1; i < values.length; i++) {
            res = {
                type: 'tapp',
                0: res,
                1: parseType(values[i]),
                2: node.loc,
            };
        }
        return res;
    }
    throw new Error(`cant parse type ${node.type}`);
};

// Some helper functions for producing pattern AST nodes
const p = {
    prim: (v, loc = -1) => ({ type: 'pprim', 0: v, 1: loc }),
    bool: (v, loc = -1) => ({ type: 'pbool', 0: v, 1: loc }),
    int: (v, loc = -1) => ({ type: 'pint', 0: v, 1: loc }),
    any: (loc) => ({ type: 'pany', 0: loc }),
    con: (name, nloc, args, loc) => ({
        type: 'pcon',
        0: name,
        1: nloc,
        2: list(args),
        3: loc,
    }),
    cons: (one, two, loc) => p.con('cons', loc, [one, two], loc),
    nil: (loc) => p.con('nil', loc, [], loc),
};

const parsePat = (node) => {
    switch (node.type) {
        case 'identifier':
            switch (node.text) {
                case '_':
                    return p.any(node.loc);
                case 'true':
                case 'false':
                    return p.prim(
                        p.bool(node.text === 'true', node.loc),
                        node.loc,
                    );
            }
            const v = +node.text;
            if (v + '' === node.text && Math.floor(v) === v)
                return p.prim(p.int(v, node.loc), node.loc);
            return { type: 'pvar', 0: node.text, 1: node.loc };
        case 'string':
            return { type: 'pstr', 0: node.first.text, 1: node.loc };
        case 'list': {
            const values = filterBlanks(node.values);
            if (!values.length) return p.con('()', node.loc, [], node.loc);
            if (values[0].type !== 'identifier')
                throw new Error('pat exp must start with identifier');
            if (values[0].text === ',') {
                return values
                    .slice(1)
                    .map(parsePat)
                    .reduceRight((right, left) =>
                        p.con(',', values[0].loc, [left, right], node.loc),
                    );
            }
            return p.con(
                values[0].text,
                values[0].loc,
                values.slice(1).map(parsePat),
                node.loc,
            );
        }
        case 'array':
            const values = filterBlanks(node.values);
            if (!values.length) return p.nil(node.loc);
            let last = values[values.length - 1];
            // Doing the same trick here with the final spread as we do in the `parse` for expressions
            let res =
                last.type === 'spread'
                    ? parsePat(last.contents)
                    : p.cons(parsePat(last), p.nil(node.loc), node.loc);
            for (let i = values.length - 2; i >= 0; i--) {
                res = p.cons(parsePat(values[i]), res, node.loc);
            }
            return res;
    }
    throw new Error('unknown pat' + JSON.stringify(node));
};

const parseTop = (node) => {
    if (isBlank(node)) return;
    switch (node.type) {
        // Check for toplevel forms
        case 'list':
            const values = filterBlanks(node.values);
            if (values.length && values[0].type === 'identifier') {
                const f = topForms[values[0].text];
                if (f) {
                    const res = f(node.loc, ...values.slice(1));
                    if (res) return res;
                }
            }
    }
    // Otherwise, it's a toplevel expression
    const inner = parse(node);
    return inner ? { type: 'texpr', 0: inner, 1: node.loc } : inner;
};

const topForms = {
    deftype(loc, head, ...tail) {
        if (!head || !tail.length) return;
        // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)
        // we don't actually do anything with the type arguments, because we don't have a type checker yet,
        // and by the time we do we'll be in a self-hosted parser
        const name =
            head.type === 'identifier'
                ? { head, args: [] }
                : head.type === 'list' &&
                  head.values.length >= 1 &&
                  head.values[0].type === 'identifier'
                ? {
                      head: head.values[0],
                      args: head.values.slice(1).map((node) => {
                          if (node.type !== 'identifier')
                              throw new Error(
                                  `type argument must be an identifier`,
                              );
                          return pair(node.text, node.loc);
                      }),
                  }
                : null;
        if (!name) return;
        const constructors = tail.map((item) => {
            if (item.type !== 'list') throw new Error(`constructor not a list`);
            const values = filterBlanks(item.values);
            if (values.length < 1) throw new Error(`empty list`);
            return pair(
                values[0].text,
                pair(
                    values[0].loc,
                    pair(list(values.slice(1).map(parseType)), item.loc),
                ),
            );
        });
        return {
            type: 'tdeftype',
            0: name.head.text,
            1: name.head.loc,
            2: list(name.args),
            3: list(constructors),
            4: loc,
        };
    },
    def(loc, name, value) {
        if (!name || !value) return;
        if (name.type !== 'identifier') return;
        return {
            type: 'tdef',
            0: name.text,
            1: name.loc,
            2: parse(value),
            3: loc,
        };
    },
    defn(loc, name, args, value) {
        if (!name || !args || !value) return;
        if (name.type !== 'identifier' || args.type !== 'array') return;
        const body = forms.fn(loc, args, value);
        if (!body) return;
        return { type: 'tdef', 0: name.text, 1: name.loc, 2: body, 3: loc };
    },
    typealias(loc, head, tail) {
        let name, args;
        if (head.type === 'identifier') {
            name = head;
            args = [];
        } else if (
            head.type === 'list' &&
            head.values.length >= 1 &&
            head.values[0].type === 'identifier'
        ) {
            name = head.values[0];
            args = head.values.slice(1).map((n) => pair(n.text, n.loc));
        }
        return {
            type: 'ttypealias',
            0: name.text,
            1: name.loc,
            2: list(args),
            3: parseType(tail),
            4: loc,
        };
    },
};
