(deftype vec2 {x float y float})
(deftype vec3 {..vec2 z float})
(deftype vec4 {..vec3 w float})
(defn isLive [{x}:vec4] (> x 0.5))
(defn v2 [x:float y:float] {x x y y})
(defn v4 [x:float y:float z:float w:float] {x x y y z z w w})
(def neighborhood [(v2 -1.0 0.)
(v2 -1. 1.)
(v2 -1. -1.)
(v2 1. 0.)
(v2 1. 1.)
(v2 1. -1.)
(v2 0. 1.)
(v2 0. -1.)])

(defn + [one:vec2 two:vec2] {x (+ one.x two.x) y (+ one.y two.y)})
(defn - [one:vec2 two:vec2] {x (- one.x two.x) y (- one.y two.y)})
(defn / [one:vec2 two:vec2] {x (/ one.x two.x) y (/ one.y two.y)})
(defn / [one:vec2 two:float] {x (/ one.x two) y (/ one.y two)})

(defn neighbor [offset:vec2 coord:vec2 res:vec2 buffer:texture] (let [sub-coord (/ coord res)] (if (isLive (texture-get buffer (+ sub-coord offset))) 1 0)))
(defn countNeighbors [coord:vec2 res:vec2 buffer:texture] (reduce<vec2 int 8u> neighborhood 0 (fn [offset:vec2 total:int] (+ total (neighbor offset coord res buffer)))))
(defn random [st:vec2] (fract (* 43758.54531 (sin (dot {x st.x y st.y} (v2 12.98980 78.2330))))))
(def live (v4 1. 0.6 1. 1.))
(def dead (v4 0. 0. 0. 1.))
(deftype GLSLEnv {time float resolution vec2 mouse vec2})
(defn drawToBuffer [env:GLSLEnv fragCoord:vec2 buffer:texture] (if (< env.time 0.01)
(if (> (random (/ fragCoord env.resolution)) 0.95) live dead)
(let [self (isLive ([(/ fragCoord env.resolution)] buffer)) neighbors (countNeighbors fragCoord env.resolution buffer)] (if (|| (&& self (== 2 neighbors))
(== neighbors 3)) live dead))))
(defn drawToScreen [env:GLSLEnv fragCoord:vec2 buffer0:texture] (let [diff (- fragCoord env.mouse) coord (if (< (length diff) 250.)
(- env.mouse (/ diff 4.)) fragCoord)] ([(/ coord env.resolution)] buffer0)))