const map = /*1005*/(values) => /*1005*/(f) => /*1012*/(($target) => {
if ($target.type === "nil") {
return /*1016*/nil/*<1016*/
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*1023*//*1023*//*1023*/cons/*<1023*/(/*1023*//*1024*//*1025*/f/*<1025*/(/*1024*//*1026*/one/*<1026*/)/*<1024*/)/*<1023*/(/*1023*//*1027*//*1027*//*1031*/map/*<1031*/(/*1027*//*1032*/rest/*<1032*/)/*<1027*/(/*1027*//*1033*/f/*<1033*/)/*<1027*/)/*<1023*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1012');})(/*!*//*1014*/values/*<1014*/)/*<1012*//*<1005*//*<1005*/;

const mapi = /*1034*/(i) => /*1034*/(values) => /*1034*/(f) => /*1042*/(($target) => {
if ($target.type === "nil") {
return /*1046*/nil/*<1046*/
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*1053*//*1053*//*1053*/cons/*<1053*/(/*1053*//*1054*//*1054*//*1055*/f/*<1055*/(/*1054*//*1056*/i/*<1056*/)/*<1054*/(/*1054*//*1057*/one/*<1057*/)/*<1054*/)/*<1053*/(/*1053*//*1058*//*1058*//*1058*//*1062*/mapi/*<1062*/(/*1058*//*1063*//*1063*//*1064*/$pl/*<1064*/(/*1063*//*1065*/1/*<1065*/)/*<1063*/(/*1063*//*1066*/i/*<1066*/)/*<1063*/)/*<1058*/(/*1058*//*1067*/rest/*<1067*/)/*<1058*/(/*1058*//*1068*/f/*<1068*/)/*<1058*/)/*<1053*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1042');})(/*!*//*1044*/values/*<1044*/)/*<1042*//*<1034*//*<1034*//*<1034*/;

const zip = /*3516*/(one) => /*3516*/(two) => /*3523*/(($target) => {
if ($target.type === ",") {
if ($target[0].type === "nil") {
if ($target[1].type === "nil") {
return /*3534*/nil/*<3534*/
}
}
}
if ($target.type === ",") {
if ($target[0].type === "cons") {
{
let a = $target[0][0];
{
let one = $target[0][1];
if ($target[1].type === "cons") {
{
let b = $target[1][0];
{
let two = $target[1][1];
return /*3561*//*3561*//*3561*/cons/*<3561*/(/*3561*//*3562*//*3562*//*3563*/$co/*<3563*/(/*3562*//*3564*/a/*<3564*/)/*<3562*/(/*3562*//*3565*/b/*<3565*/)/*<3562*/)/*<3561*/(/*3561*//*3566*//*3566*//*3570*/zip/*<3570*/(/*3566*//*3571*/one/*<3571*/)/*<3566*/(/*3566*//*3572*/two/*<3572*/)/*<3566*/)/*<3561*/
}
}
}
}
}
}
}
return /*3576*/nil/*<3576*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3523');})(/*!*//*3525*//*3525*//*3526*/$co/*<3526*/(/*3525*//*3527*/one/*<3527*/)/*<3525*/(/*3525*//*3528*/two/*<3528*/)/*<3525*/)/*<3523*//*<3516*//*<3516*/;

const foldl = /*1069*/(init) => /*1069*/(items) => /*1069*/(f) => /*1077*/(($target) => {
if ($target.type === "nil") {
return /*1081*/init/*<1081*/
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*1088*//*1088*//*1088*//*1089*/foldl/*<1089*/(/*1088*//*1090*//*1090*//*1091*/f/*<1091*/(/*1090*//*1092*/init/*<1092*/)/*<1090*/(/*1090*//*1093*/one/*<1093*/)/*<1090*/)/*<1088*/(/*1088*//*1094*/rest/*<1094*/)/*<1088*/(/*1088*//*1095*/f/*<1095*/)/*<1088*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1077');})(/*!*//*1079*/items/*<1079*/)/*<1077*//*<1069*//*<1069*//*<1069*/;

const foldr = /*1106*/(init) => /*1106*/(items) => /*1106*/(f) => /*1114*/(($target) => {
if ($target.type === "nil") {
return /*1118*/init/*<1118*/
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*1125*//*1125*//*1126*/f/*<1126*/(/*1125*//*1127*//*1127*//*1127*//*1128*/foldr/*<1128*/(/*1127*//*1129*/init/*<1129*/)/*<1127*/(/*1127*//*1130*/rest/*<1130*/)/*<1127*/(/*1127*//*1131*/f/*<1131*/)/*<1127*/)/*<1125*/(/*1125*//*1132*/one/*<1132*/)/*<1125*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1114');})(/*!*//*1116*/items/*<1116*/)/*<1114*//*<1106*//*<1106*//*<1106*/;

const map_without = /*2665*/(map) => /*2665*/(set) => /*2672*//*2672*//*2672*//*2673*/foldr/*<2673*/(/*2672*//*2674*/map/*<2674*/)/*<2672*/(/*2672*//*2675*//*2676*/set$slto_list/*<2676*/(/*2675*//*2678*/set/*<2678*/)/*<2675*/)/*<2672*/(/*2672*//*2679*/map$slrm/*<2679*/)/*<2672*//*<2665*//*<2665*/;

const eprim = (v0) => (v1) => ({type: "eprim", 0: v0, 1: v1});
const estr = (v0) => (v1) => (v2) => ({type: "estr", 0: v0, 1: v1, 2: v2});
const evar = (v0) => (v1) => ({type: "evar", 0: v0, 1: v1});
const equot = (v0) => (v1) => ({type: "equot", 0: v0, 1: v1});
const equotquot = (v0) => (v1) => ({type: "equotquot", 0: v0, 1: v1});
const elambda = (v0) => (v1) => (v2) => (v3) => ({type: "elambda", 0: v0, 1: v1, 2: v2, 3: v3});
const eapp = (v0) => (v1) => (v2) => ({type: "eapp", 0: v0, 1: v1, 2: v2});
const ematch = (v0) => (v1) => (v2) => ({type: "ematch", 0: v0, 1: v1, 2: v2});
const pint = (v0) => (v1) => ({type: "pint", 0: v0, 1: v1});
const pbool = (v0) => (v1) => ({type: "pbool", 0: v0, 1: v1});
const pany = (v0) => ({type: "pany", 0: v0});
const pvar = (v0) => (v1) => ({type: "pvar", 0: v0, 1: v1});
const pcon = (v0) => (v1) => (v2) => ({type: "pcon", 0: v0, 1: v1, 2: v2});
const pstr = (v0) => (v1) => ({type: "pstr", 0: v0, 1: v1});
const pprim = (v0) => (v1) => ({type: "pprim", 0: v0, 1: v1});
const tvar = (v0) => (v1) => ({type: "tvar", 0: v0, 1: v1});
const tapp = (v0) => (v1) => (v2) => ({type: "tapp", 0: v0, 1: v1, 2: v2});
const tcon = (v0) => (v1) => ({type: "tcon", 0: v0, 1: v1});
const some = (v0) => ({type: "some", 0: v0});
const none = ({type: "none"});
const lol = /*6303*/tcon/*<6303*/;

const sdeftype = (v0) => (v1) => (v2) => (v3) => (v4) => ({type: "sdeftype", 0: v0, 1: v1, 2: v2, 3: v3, 4: v4});
const sdef = (v0) => (v1) => (v2) => (v3) => ({type: "sdef", 0: v0, 1: v1, 2: v2, 3: v3});
const sexpr = (v0) => (v1) => ({type: "sexpr", 0: v0, 1: v1});
const at = /*5746*/(arr) => /*5746*/(i) => /*5746*/(default_) => /*5753*/(($target) => {
if ($target.type === "nil") {
return /*5768*/default_/*<5768*/
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*5776*/(($target) => {
if ($target === true) {
return /*5784*/one/*<5784*/
}
return /*5785*//*5785*//*5785*//*5786*/at/*<5786*/(/*5785*//*5787*/rest/*<5787*/)/*<5785*/(/*5785*//*5788*//*5788*//*5789*/_/*<5789*/(/*5788*//*5790*/i/*<5790*/)/*<5788*/(/*5788*//*5791*/1/*<5791*/)/*<5788*/)/*<5785*/(/*5785*//*5792*/default_/*<5792*/)/*<5785*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5776');})(/*!*//*5778*//*5778*//*5781*/$eq/*<5781*/(/*5778*//*5782*/i/*<5782*/)/*<5778*/(/*5778*//*5783*/0/*<5783*/)/*<5778*/)/*<5776*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5753');})(/*!*//*5766*/arr/*<5766*/)/*<5753*//*<5746*//*<5746*//*<5746*/;

const letters = /*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5799*/"a"/*<5799*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5801*/"b"/*<5801*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5803*/"c"/*<5803*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5805*/"d"/*<5805*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5807*/"e"/*<5807*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5809*/"f"/*<5809*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5811*/"g"/*<5811*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5813*/"h"/*<5813*/)/*<5798*/(/*5798*//*5798*//*5798*//*5798*/cons/*<5798*/(/*5798*//*5815*/"i"/*<5815*/)/*<5798*/(/*5798*//*5798*/nil/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/)/*<5798*/;

const unwrap_fn = /*5852*/(t) => /*5858*/(($target) => {
if ($target.type === "tapp") {
if ($target[0].type === "tapp") {
if ($target[0][0].type === "tcon") {
if ($target[0][0][0] === "->"){
{
let a = $target[0][1];
{
let b = $target[1];
return /*5875*/(() => {const $target = /*5882*//*5883*/unwrap_fn/*<5883*/(/*5882*//*5884*/b/*<5884*/)/*<5882*/;
if ($target.type === ",") {
{
let args = $target[0];
{
let res = $target[1];
return /*5885*//*5885*//*5886*/$co/*<5886*/(/*5885*//*5887*//*5887*//*5887*/cons/*<5887*/(/*5887*//*5888*/a/*<5888*/)/*<5887*/(/*5887*//*5893*/args/*<5893*/)/*<5887*/)/*<5885*/(/*5885*//*5899*/res/*<5899*/)/*<5885*/
}
}
};
throw new Error('let pattern not matched 5878. ' + valueToString($target));})(/*!*/)/*<5875*/
}
}
}
}
}
}
return /*5901*//*5901*//*5902*/$co/*<5902*/(/*5901*//*5903*/nil/*<5903*/)/*<5901*/(/*5901*//*5904*/t/*<5904*/)/*<5901*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5858');})(/*!*//*5860*/t/*<5860*/)/*<5858*//*<5852*/;

const unwrap_app = /*6108*/(t) => /*6114*/(($target) => {
if ($target.type === "tapp") {
{
let a = $target[0];
{
let b = $target[1];
return /*6122*/(() => {const $target = /*6129*//*6130*/unwrap_app/*<6130*/(/*6129*//*6131*/a/*<6131*/)/*<6129*/;
if ($target.type === ",") {
{
let target = $target[0];
{
let args = $target[1];
return /*6132*//*6132*//*6133*/$co/*<6133*/(/*6132*//*6134*/target/*<6134*/)/*<6132*/(/*6132*//*6135*//*6135*//*6135*/cons/*<6135*/(/*6135*//*6136*/b/*<6136*/)/*<6135*/(/*6135*//*6137*/args/*<6137*/)/*<6135*/)/*<6132*/
}
}
};
throw new Error('let pattern not matched 6125. ' + valueToString($target));})(/*!*/)/*<6122*/
}
}
}
return /*6251*//*6251*//*6252*/$co/*<6252*/(/*6251*//*6253*/t/*<6253*/)/*<6251*/(/*6251*//*6254*/nil/*<6254*/)/*<6251*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 6114');})(/*!*//*6116*/t/*<6116*/)/*<6114*//*<6108*/;

const join = /*5929*/(sep) => /*5929*/(arr) => /*5939*/(($target) => {
if ($target.type === "nil") {
return /*5945*/""/*<5945*/
}
if ($target.type === "cons") {
{
let one = $target[0];
if ($target[1].type === "nil") {
return /*6011*/one/*<6011*/
}
}
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*5953*/`${/*5955*/one/*<5955*/}${/*5957*/sep/*<5957*/}${/*5959*//*5959*//*5961*/join/*<5961*/(/*5959*//*5962*/sep/*<5962*/)/*<5959*/(/*5959*//*5963*/rest/*<5963*/)/*<5959*/}`/*<5953*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5939');})(/*!*//*5943*/arr/*<5943*/)/*<5939*//*<5929*//*<5929*/;

const rev = /*6057*/(arr) => /*6057*/(col) => /*6063*/(($target) => {
if ($target.type === "nil") {
return /*6067*/col/*<6067*/
}
if ($target.type === "cons") {
{
let one = $target[0];
if ($target[1].type === "nil") {
return /*6070*//*6070*//*6070*/cons/*<6070*/(/*6070*//*6071*/one/*<6071*/)/*<6070*/(/*6070*//*6082*/col/*<6082*/)/*<6070*/
}
}
}
if ($target.type === "cons") {
{
let one = $target[0];
{
let rest = $target[1];
return /*6078*//*6078*//*6079*/rev/*<6079*/(/*6078*//*6080*/rest/*<6080*/)/*<6078*/(/*6078*//*6086*//*6086*//*6086*/cons/*<6086*/(/*6086*//*6087*/one/*<6087*/)/*<6086*/(/*6086*//*6088*/col/*<6088*/)/*<6086*/)/*<6078*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 6063');})(/*!*//*6065*/arr/*<6065*/)/*<6063*//*<6057*//*<6057*/;

const tts_list = /*6165*/(args) => /*6165*/(free) => /*6174*//*6174*//*6174*//*6175*/foldl/*<6175*/(/*6174*//*6176*//*6176*//*6177*/$co/*<6177*/(/*6176*//*6178*/nil/*<6178*/)/*<6176*/(/*6176*//*6179*/free/*<6179*/)/*<6176*/)/*<6174*/(/*6174*//*6180*/args/*<6180*/)/*<6174*/(/*6174*//*6181*/($fn_arg) => /*6181*/(($target) => {
if ($target.type === ",") {
{
let args = $target[0];
{
let free = $target[1];
return /*6181*/(a) => /*6189*/(() => {const $target = /*6196*//*6196*//*6197*/tts_inner/*<6197*/(/*6196*//*6198*/a/*<6198*/)/*<6196*/(/*6196*//*6199*/free/*<6199*/)/*<6196*/;
if ($target.type === ",") {
{
let a = $target[0];
{
let free = $target[1];
return /*6200*//*6200*//*6201*/$co/*<6201*/(/*6200*//*6202*//*6202*//*6202*/cons/*<6202*/(/*6202*//*6203*/a/*<6203*/)/*<6202*/(/*6202*//*6204*/args/*<6204*/)/*<6202*/)/*<6200*/(/*6200*//*6208*/free/*<6208*/)/*<6200*/
}
}
};
throw new Error('let pattern not matched 6192. ' + valueToString($target));})(/*!*/)/*<6189*//*<6181*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 6181');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<6181*//*<6181*/)/*<6174*//*<6165*//*<6165*/;

const tts_inner = /*2099*/(t) => /*2099*/(free) => /*2105*/(($target) => {
if ($target.type === "tvar") {
{
let s = $target[0];
return /*5637*/(() => {const $target = /*5645*/free/*<5645*/;
if ($target.type === ",") {
{
let fmap = $target[0];
{
let idx = $target[1];
return /*6340*/(($target) => {
if ($target.type === "some") {
{
let fmap = $target[0];
return /*2113*/(($target) => {
if ($target.type === "some") {
{
let s = $target[0];
return /*5618*//*5618*//*5615*/$co/*<5615*/(/*5618*//*5619*/s/*<5619*/)/*<5618*/(/*5618*//*5620*/free/*<5620*/)/*<5618*/
}
}
{
let none = $target;
return /*5617*/(() => {const $target = /*5649*//*5649*//*5649*//*5817*/at/*<5817*/(/*5649*//*5818*/letters/*<5818*/)/*<5649*/(/*5649*//*5819*/idx/*<5819*/)/*<5649*/(/*5649*//*5820*/"_"/*<5820*/)/*<5649*/;
{
let name = $target;
return /*5653*//*5653*//*5654*/$co/*<5654*/(/*5653*//*5655*/name/*<5655*/)/*<5653*/(/*5653*//*5656*//*5656*//*5657*/$co/*<5657*/(/*5656*//*6367*//*6368*/some/*<6368*/(/*6367*//*5658*//*5658*//*5658*//*5659*/map$slset/*<5659*/(/*5658*//*5660*/fmap/*<5660*/)/*<5658*/(/*5658*//*5661*/s/*<5661*/)/*<5658*/(/*5658*//*5662*/name/*<5662*/)/*<5658*/)/*<6367*/)/*<5656*/(/*5656*//*5663*//*5663*//*5665*/$pl/*<5665*/(/*5663*//*5666*/1/*<5666*/)/*<5663*/(/*5663*//*5667*/idx/*<5667*/)/*<5663*/)/*<5656*/)/*<5653*/
};
throw new Error('let pattern not matched 5648. ' + valueToString($target));})(/*!*/)/*<5617*/
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 2113');})(/*!*//*5605*//*5605*//*5609*/map$slget/*<5609*/(/*5605*//*5610*/fmap/*<5610*/)/*<5605*/(/*5605*//*5611*/s/*<5611*/)/*<5605*/)/*<2113*/
}
}
return /*6392*//*6392*//*6348*/$co/*<6348*/(/*6392*//*6393*/s/*<6393*/)/*<6392*/(/*6392*//*6394*/free/*<6394*/)/*<6392*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 6340');})(/*!*//*6343*/fmap/*<6343*/)/*<6340*/
}
}
};
throw new Error('let pattern not matched 5641. ' + valueToString($target));})(/*!*/)/*<5637*/
}
}
if ($target.type === "tcon") {
{
let s = $target[0];
return /*5672*//*5672*//*2118*/$co/*<2118*/(/*5672*//*5673*/s/*<5673*/)/*<5672*/(/*5672*//*5674*/free/*<5674*/)/*<5672*/
}
}
if ($target.type === "tapp") {
if ($target[0].type === "tapp") {
if ($target[0][0].type === "tcon") {
if ($target[0][0][0] === "->"){
{
let a = $target[0][1];
{
let b = $target[1];
return /*5675*/(() => {const $target = /*5909*//*5910*/unwrap_fn/*<5910*/(/*5909*//*5911*/b/*<5911*/)/*<5909*/;
if ($target.type === ",") {
{
let args = $target[0];
{
let r = $target[1];
return /*5675*/(() => {const $target = /*5913*//*5913*//*5913*/cons/*<5913*/(/*5913*//*5914*/a/*<5914*/)/*<5913*/(/*5913*//*5915*/args/*<5915*/)/*<5913*/;
{
let args = $target;
return /*5675*/(() => {const $target = /*5684*//*5684*//*6209*/tts_list/*<6209*/(/*5684*//*6210*/args/*<6210*/)/*<5684*/(/*5684*//*6211*/free/*<6211*/)/*<5684*/;
if ($target.type === ",") {
{
let args = $target[0];
{
let free = $target[1];
return /*5675*/(() => {const $target = /*5692*//*5692*//*5693*/tts_inner/*<5693*/(/*5692*//*5694*/r/*<5694*/)/*<5692*/(/*5692*//*5695*/free/*<5695*/)/*<5692*/;
if ($target.type === ",") {
{
let two = $target[0];
{
let free = $target[1];
return /*5696*//*5696*//*5697*/$co/*<5697*/(/*5696*//*2132*/`(fn [${/*5919*//*5919*//*2134*/join/*<2134*/(/*5919*//*5940*/" "/*<5940*/)/*<5919*/(/*5919*//*6100*//*6100*//*6101*/rev/*<6101*/(/*6100*//*5920*/args/*<5920*/)/*<6100*/(/*6100*//*6102*/nil/*<6102*/)/*<6100*/)/*<5919*/}] ${/*2138*/two/*<2138*/})`/*<2132*/)/*<5696*/(/*5696*//*5698*/free/*<5698*/)/*<5696*/
}
}
};
throw new Error('let pattern not matched 5688. ' + valueToString($target));})(/*!*/)/*<5675*/
}
}
};
throw new Error('let pattern not matched 5680. ' + valueToString($target));})(/*!*/)/*<5675*/
};
throw new Error('let pattern not matched 5912. ' + valueToString($target));})(/*!*/)/*<5675*/
}
}
};
throw new Error('let pattern not matched 5905. ' + valueToString($target));})(/*!*/)/*<5675*/
}
}
}
}
}
}
if ($target.type === "tapp") {
{
let a = $target[0];
{
let b = $target[1];
return /*5699*/(() => {const $target = /*6142*//*6146*/unwrap_app/*<6146*/(/*6142*//*6147*/a/*<6147*/)/*<6142*/;
if ($target.type === ",") {
{
let target = $target[0];
{
let args = $target[1];
return /*5699*/(() => {const $target = /*6149*//*6149*//*6149*/cons/*<6149*/(/*6149*//*6150*/b/*<6150*/)/*<6149*/(/*6149*//*6151*/args/*<6151*/)/*<6149*/;
{
let args = $target;
return /*5699*/(() => {const $target = /*6156*//*6156*//*6157*/rev/*<6157*/(/*6156*//*6158*/args/*<6158*/)/*<6156*/(/*6156*//*6255*/nil/*<6255*/)/*<6156*/;
{
let args = $target;
return /*5699*/(() => {const $target = /*6164*//*6164*//*6214*/tts_list/*<6214*/(/*6164*//*6215*/args/*<6215*/)/*<6164*/(/*6164*//*6216*/free/*<6216*/)/*<6164*/;
if ($target.type === ",") {
{
let args = $target[0];
{
let free = $target[1];
return /*5699*/(() => {const $target = /*5714*//*5714*//*5715*/tts_inner/*<5715*/(/*5714*//*5716*/target/*<5716*/)/*<5714*/(/*5714*//*5717*/free/*<5717*/)/*<5714*/;
if ($target.type === ",") {
{
let one = $target[0];
{
let free = $target[1];
return /*5718*//*5718*//*5719*/$co/*<5719*/(/*5718*//*2148*/`(${/*2150*/one/*<2150*/} ${/*2154*//*2154*//*6217*/join/*<6217*/(/*2154*//*6218*/" "/*<6218*/)/*<2154*/(/*2154*//*6220*//*6220*//*6221*/rev/*<6221*/(/*6220*//*6222*/args/*<6222*/)/*<6220*/(/*6220*//*6256*/nil/*<6256*/)/*<6220*/)/*<2154*/})`/*<2148*/)/*<5718*/(/*5718*//*5720*/free/*<5720*/)/*<5718*/
}
}
};
throw new Error('let pattern not matched 5710. ' + valueToString($target));})(/*!*/)/*<5699*/
}
}
};
throw new Error('let pattern not matched 6159. ' + valueToString($target));})(/*!*/)/*<5699*/
};
throw new Error('let pattern not matched 6155. ' + valueToString($target));})(/*!*/)/*<5699*/
};
throw new Error('let pattern not matched 6148. ' + valueToString($target));})(/*!*/)/*<5699*/
}
}
};
throw new Error('let pattern not matched 6141. ' + valueToString($target));})(/*!*/)/*<5699*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 2105');})(/*!*//*2107*/t/*<2107*/)/*<2105*//*<2099*//*<2099*/;

const type_to_string = /*5590*/(t) => /*5624*/(() => {const $target = /*5596*//*5596*//*5597*/tts_inner/*<5597*/(/*5596*//*5598*/t/*<5598*/)/*<5596*/(/*5596*//*5601*//*5601*//*5599*/$co/*<5599*/(/*5601*//*6349*//*5602*/some/*<5602*/(/*6349*//*6350*/map$slnil/*<6350*/)/*<6349*/)/*<5601*/(/*5601*//*5603*/0/*<5603*/)/*<5601*/)/*<5596*/;
if ($target.type === ",") {
{
let text = $target[0];
return /*5636*/text/*<5636*/
}
};
throw new Error('let pattern not matched 5632. ' + valueToString($target));})(/*!*/)/*<5624*//*<5590*/;

const type_to_string_raw = /*6370*/(t) => /*6376*/(() => {const $target = /*6384*//*6384*//*6385*/tts_inner/*<6385*/(/*6384*//*6386*/t/*<6386*/)/*<6384*/(/*6384*//*6387*//*6387*//*6388*/$co/*<6388*/(/*6387*//*6389*/none/*<6389*/)/*<6387*/(/*6387*//*6390*/0/*<6390*/)/*<6387*/)/*<6384*/;
if ($target.type === ",") {
{
let text = $target[0];
return /*6391*/text/*<6391*/
}
};
throw new Error('let pattern not matched 6380. ' + valueToString($target));})(/*!*/)/*<6376*//*<6370*/;

const type_with_free = /*5172*/(type) => /*5172*/(free) => /*5179*/(($target) => {
if ($target.type === "tvar") {
return /*5186*/type/*<5186*/
}
if ($target.type === "tcon") {
{
let s = $target[0];
{
let l = $target[1];
return /*5191*/(($target) => {
if ($target === true) {
return /*5198*//*5198*//*5199*/tvar/*<5199*/(/*5198*//*5200*/s/*<5200*/)/*<5198*/(/*5198*//*5201*/l/*<5201*/)/*<5198*/
}
return /*5202*/type/*<5202*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5191');})(/*!*//*5193*//*5193*//*5195*/set$slhas/*<5195*/(/*5193*//*5196*/free/*<5196*/)/*<5193*/(/*5193*//*5197*/s/*<5197*/)/*<5193*/)/*<5191*/
}
}
}
if ($target.type === "tapp") {
{
let a = $target[0];
{
let b = $target[1];
{
let l = $target[2];
return /*5209*//*5209*//*5209*//*5210*/tapp/*<5210*/(/*5209*//*5211*//*5211*//*5212*/type_with_free/*<5212*/(/*5211*//*5213*/a/*<5213*/)/*<5211*/(/*5211*//*5214*/free/*<5214*/)/*<5211*/)/*<5209*/(/*5209*//*5215*//*5215*//*5216*/type_with_free/*<5216*/(/*5215*//*5217*/b/*<5217*/)/*<5215*/(/*5215*//*5218*/free/*<5218*/)/*<5215*/)/*<5209*/(/*5209*//*5219*/l/*<5219*/)/*<5209*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5179');})(/*!*//*5181*/type/*<5181*/)/*<5179*//*<5172*//*<5172*/;

const scheme = (v0) => (v1) => ({type: "scheme", 0: v0, 1: v1});
const tconstructor = (v0) => (v1) => (v2) => ({type: "tconstructor", 0: v0, 1: v1, 2: v2});
const tenv = (v0) => (v1) => (v2) => ({type: "tenv", 0: v0, 1: v1, 2: v2});
const tenv$sltype = /*3270*/($fn_arg) => /*3270*/(($target) => {
if ($target.type === "tenv") {
{
let types = $target[0];
return /*3270*/(key) => /*3281*//*3281*//*3282*/map$slget/*<3282*/(/*3281*//*3283*/types/*<3283*/)/*<3281*/(/*3281*//*3284*/key/*<3284*/)/*<3281*//*<3270*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3270');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3270*//*<3270*/;

const tenv$slcon = /*3285*/($fn_arg) => /*3285*/(($target) => {
if ($target.type === "tenv") {
{
let cons = $target[1];
return /*3285*/(key) => /*3296*//*3296*//*3297*/map$slget/*<3297*/(/*3296*//*3298*/cons/*<3298*/)/*<3296*/(/*3296*//*3299*/key/*<3299*/)/*<3296*//*<3285*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3285');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3285*//*<3285*/;

const tenv$slnames = /*3300*/($fn_arg) => /*3300*/(($target) => {
if ($target.type === "tenv") {
{
let names = $target[2];
return /*3300*/(key) => /*3311*//*3311*//*3312*/map$slget/*<3312*/(/*3311*//*3313*/names/*<3313*/)/*<3311*/(/*3311*//*3314*/key/*<3314*/)/*<3311*//*<3300*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3300');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3300*//*<3300*/;

const tenv$slrm = /*926*/($fn_arg) => /*926*/(($target) => {
if ($target.type === "tenv") {
{
let types = $target[0];
{
let cons = $target[1];
{
let names = $target[2];
return /*926*/($var) => /*3319*//*3319*//*3319*//*3320*/tenv/*<3320*/(/*3319*//*981*//*981*//*982*/map$slrm/*<982*/(/*981*//*983*/types/*<983*/)/*<981*/(/*981*//*984*/$var/*<984*/)/*<981*/)/*<3319*/(/*3319*//*3321*/cons/*<3321*/)/*<3319*/(/*3319*//*3322*/names/*<3322*/)/*<3319*//*<926*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 926');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<926*//*<926*/;

const tenv$slset_type = /*3336*/($fn_arg) => /*3336*/(($target) => {
if ($target.type === "tenv") {
{
let types = $target[0];
{
let cons = $target[1];
{
let names = $target[2];
return /*3336*/(k) => /*3336*/(v) => /*3348*//*3348*//*3348*//*3349*/tenv/*<3349*/(/*3348*//*3350*//*3350*//*3350*//*3351*/map$slset/*<3351*/(/*3350*//*3352*/types/*<3352*/)/*<3350*/(/*3350*//*3353*/k/*<3353*/)/*<3350*/(/*3350*//*3354*/v/*<3354*/)/*<3350*/)/*<3348*/(/*3348*//*3355*/cons/*<3355*/)/*<3348*/(/*3348*//*3356*/names/*<3356*/)/*<3348*//*<3336*//*<3336*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3336');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3336*//*<3336*/;

const type_free = /*754*/(type) => /*761*/(($target) => {
if ($target.type === "tvar") {
{
let n = $target[0];
return /*769*//*769*//*953*/set$sladd/*<953*/(/*769*//*954*/set$slnil/*<954*/)/*<769*/(/*769*//*955*/n/*<955*/)/*<769*/
}
}
if ($target.type === "tcon") {
return /*775*/set$slnil/*<775*/
}
if ($target.type === "tapp") {
{
let a = $target[0];
{
let b = $target[1];
return /*781*//*781*//*794*/set$slmerge/*<794*/(/*781*//*795*//*796*/type_free/*<796*/(/*795*//*797*/a/*<797*/)/*<795*/)/*<781*/(/*781*//*798*//*799*/type_free/*<799*/(/*798*//*800*/b/*<800*/)/*<798*/)/*<781*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 761');})(/*!*//*763*/type/*<763*/)/*<761*//*<754*/;

const scheme_free = /*888*/($fn_arg) => /*888*/(($target) => {
if ($target.type === "scheme") {
{
let vbls = $target[0];
{
let type = $target[1];
return /*895*//*895*//*900*/set$sldiff/*<900*/(/*895*//*901*//*902*/type_free/*<902*/(/*901*//*903*/type/*<903*/)/*<901*/)/*<895*/(/*895*//*904*/vbls/*<904*/)/*<895*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 888');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<888*//*<888*/;

const tenv_free = /*985*/($fn_arg) => /*985*/(($target) => {
if ($target.type === "tenv") {
{
let types = $target[0];
return /*991*//*991*//*991*//*992*/foldr/*<992*/(/*991*//*994*/set$slnil/*<994*/)/*<991*/(/*991*//*995*//*995*//*996*/map/*<996*/(/*995*//*998*//*999*/map$slvalues/*<999*/(/*998*//*1000*/types/*<1000*/)/*<998*/)/*<995*/(/*995*//*1135*/scheme_free/*<1135*/)/*<995*/)/*<991*/(/*991*//*1169*/set$slmerge/*<1169*/)/*<991*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 985');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<985*//*<985*/;

const type_apply = /*839*/(subst) => /*839*/(type) => /*847*/(($target) => {
if ($target.type === "tvar") {
{
let n = $target[0];
return /*854*/(($target) => {
if ($target.type === "none") {
return /*864*/type/*<864*/
}
if ($target.type === "some") {
{
let t = $target[0];
return /*868*/t/*<868*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 854');})(/*!*//*856*//*856*//*928*/map$slget/*<928*/(/*856*//*861*/subst/*<861*/)/*<856*/(/*856*//*929*/n/*<929*/)/*<856*/)/*<854*/
}
}
if ($target.type === "tapp") {
{
let a = $target[0];
{
let b = $target[1];
{
let c = $target[2];
return /*874*//*874*//*874*//*875*/tapp/*<875*/(/*874*//*876*//*876*//*877*/type_apply/*<877*/(/*876*//*878*/subst/*<878*/)/*<876*/(/*876*//*879*/a/*<879*/)/*<876*/)/*<874*/(/*874*//*881*//*881*//*882*/type_apply/*<882*/(/*881*//*883*/subst/*<883*/)/*<881*/(/*881*//*884*/b/*<884*/)/*<881*/)/*<874*/(/*874*//*885*/c/*<885*/)/*<874*/
}
}
}
}
return /*887*/type/*<887*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 847');})(/*!*//*849*/type/*<849*/)/*<847*//*<839*//*<839*/;

const scheme_apply = /*905*/(subst) => /*905*/($fn_arg) => /*905*/(($target) => {
if ($target.type === "scheme") {
{
let vbls = $target[0];
{
let type = $target[1];
return /*915*//*915*//*917*/scheme/*<917*/(/*915*//*918*/vbls/*<918*/)/*<915*/(/*915*//*919*//*919*//*920*/type_apply/*<920*/(/*919*//*921*//*921*//*922*/map_without/*<922*/(/*921*//*923*/subst/*<923*/)/*<921*/(/*921*//*924*/vbls/*<924*/)/*<921*/)/*<919*/(/*919*//*925*/type/*<925*/)/*<919*/)/*<915*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 905');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<905*//*<905*//*<905*/;

const tenv_apply = /*1170*/(subst) => /*1170*/($fn_arg) => /*1170*/(($target) => {
if ($target.type === "tenv") {
{
let types = $target[0];
{
let cons = $target[1];
{
let names = $target[2];
return /*3332*//*3332*//*3332*//*3333*/tenv/*<3333*/(/*3332*//*1179*//*1179*//*1180*/map$slmap/*<1180*/(/*1179*//*1181*//*1182*/scheme_apply/*<1182*/(/*1181*//*1183*/subst/*<1183*/)/*<1181*/)/*<1179*/(/*1179*//*1185*/types/*<1185*/)/*<1179*/)/*<3332*/(/*3332*//*3334*/cons/*<3334*/)/*<3332*/(/*3332*//*3335*/names/*<3335*/)/*<3332*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1170');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<1170*//*<1170*//*<1170*/;

const compose_subst = /*956*/(earlier) => /*956*/(later) => /*963*//*963*//*964*/map$slmerge/*<964*/(/*963*//*965*//*965*//*966*/map$slmap/*<966*/(/*965*//*967*//*968*/type_apply/*<968*/(/*967*//*969*/earlier/*<969*/)/*<967*/)/*<965*/(/*965*//*970*/later/*<970*/)/*<965*/)/*<963*/(/*963*//*971*/earlier/*<971*/)/*<963*//*<956*//*<956*/;

const earlier_subst = /*2692*//*2693*/map$slfrom_list/*<2693*/(/*2692*//*2694*//*2694*//*2694*/cons/*<2694*/(/*2694*//*2695*//*2695*//*2696*/$co/*<2696*/(/*2695*//*2697*/"a"/*<2697*/)/*<2695*/(/*2695*//*2699*//*2699*//*2700*/tcon/*<2700*/(/*2699*//*2701*/"a-mapped"/*<2701*/)/*<2699*/(/*2699*//*2703*/-1/*<2703*/)/*<2699*/)/*<2695*/)/*<2694*/(/*2694*//*2694*//*2694*//*2694*/cons/*<2694*/(/*2694*//*2774*//*2774*//*2775*/$co/*<2775*/(/*2774*//*2776*/"b"/*<2776*/)/*<2774*/(/*2774*//*2778*//*2778*//*2779*/tvar/*<2779*/(/*2778*//*2780*/"c"/*<2780*/)/*<2778*/(/*2778*//*2782*/-1/*<2782*/)/*<2778*/)/*<2774*/)/*<2694*/(/*2694*//*2694*/nil/*<2694*/)/*<2694*/)/*<2694*/)/*<2692*/;

const generalize = /*1186*/(tenv) => /*1186*/(t) => /*1193*//*1193*//*1194*/scheme/*<1194*/(/*1193*//*1195*//*1195*//*1196*/set$sldiff/*<1196*/(/*1195*//*1197*//*1198*/type_free/*<1198*/(/*1197*//*1199*/t/*<1199*/)/*<1197*/)/*<1195*/(/*1195*//*1200*//*1201*/tenv_free/*<1201*/(/*1200*//*1202*/tenv/*<1202*/)/*<1200*/)/*<1195*/)/*<1193*/(/*1193*//*1203*/t/*<1203*/)/*<1193*//*<1186*//*<1186*/;

const new_type_var = /*1731*/(prefix) => /*1731*/(nidx) => /*1739*//*1739*//*1740*/$co/*<1740*/(/*1739*//*2074*//*2074*//*2075*/tvar/*<2075*/(/*2074*//*1741*/`${/*1743*/prefix/*<1743*/}:${/*1745*/nidx/*<1745*/}`/*<1741*/)/*<2074*/(/*2074*//*2076*/-1/*<2076*/)/*<2074*/)/*<1739*/(/*1739*//*1759*//*1759*//*1761*/$pl/*<1761*/(/*1759*//*1762*/1/*<1762*/)/*<1759*/(/*1759*//*1747*/nidx/*<1747*/)/*<1759*/)/*<1739*//*<1731*//*<1731*/;

const make_subst_for_vars = /*1212*/(vars) => /*1212*/(coll) => /*1212*/(nidx) => /*1219*/(($target) => {
if ($target.type === "nil") {
return /*1223*//*1223*//*1224*/$co/*<1224*/(/*1223*//*1225*/coll/*<1225*/)/*<1223*/(/*1223*//*1226*/nidx/*<1226*/)/*<1223*/
}
if ($target.type === "cons") {
{
let v = $target[0];
{
let rest = $target[1];
return /*1748*/(() => {const $target = /*1755*//*1755*//*1756*/new_type_var/*<1756*/(/*1755*//*1757*/v/*<1757*/)/*<1755*/(/*1755*//*1758*/nidx/*<1758*/)/*<1755*/;
if ($target.type === ",") {
{
let vn = $target[0];
{
let nidx = $target[1];
return /*1262*//*1262*//*1262*//*1264*/make_subst_for_vars/*<1264*/(/*1262*//*1269*/rest/*<1269*/)/*<1262*/(/*1262*//*1270*//*1270*//*1270*//*1271*/map$slset/*<1271*/(/*1270*//*1272*/coll/*<1272*/)/*<1270*/(/*1270*//*1273*/v/*<1273*/)/*<1270*/(/*1270*//*1274*/vn/*<1274*/)/*<1270*/)/*<1262*/(/*1262*//*1293*/nidx/*<1293*/)/*<1262*/
}
}
};
throw new Error('let pattern not matched 1751. ' + valueToString($target));})(/*!*/)/*<1748*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1219');})(/*!*//*1221*/vars/*<1221*/)/*<1219*//*<1212*//*<1212*//*<1212*/;

const instantiate = /*1136*/($fn_arg) => /*1136*/(($target) => {
if ($target.type === "scheme") {
{
let vars = $target[0];
{
let t = $target[1];
return /*1136*/(nidx) => /*1211*/(() => {const $target = /*1290*//*1290*//*1290*//*1291*/make_subst_for_vars/*<1291*/(/*1290*//*2036*//*2037*/set$slto_list/*<2037*/(/*2036*//*1298*/vars/*<1298*/)/*<2036*/)/*<1290*/(/*1290*//*1300*/map$slnil/*<1300*/)/*<1290*/(/*1290*//*1301*/nidx/*<1301*/)/*<1290*/;
if ($target.type === ",") {
{
let subst = $target[0];
{
let nidx = $target[1];
return /*1302*//*1302*//*1302*//*1303*/$co$co/*<1303*/(/*1302*//*1304*//*1304*//*1305*/type_apply/*<1305*/(/*1304*//*1306*/subst/*<1306*/)/*<1304*/(/*1304*//*1307*/t/*<1307*/)/*<1304*/)/*<1302*/(/*1302*//*3495*/subst/*<3495*/)/*<1302*/(/*1302*//*1308*/nidx/*<1308*/)/*<1302*/
}
}
};
throw new Error('let pattern not matched 1285. ' + valueToString($target));})(/*!*/)/*<1211*//*<1136*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1136');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<1136*//*<1136*/;

const unify = /*1309*/(t1) => /*1309*/(t2) => /*1309*/(nidx) => /*1317*/(($target) => {
if ($target.type === ",") {
if ($target[0].type === "tapp") {
{
let target_1 = $target[0][0];
{
let arg_1 = $target[0][1];
if ($target[1].type === "tapp") {
{
let target_2 = $target[1][0];
{
let arg_2 = $target[1][1];
return /*1326*/(() => {const $target = /*1481*//*1481*//*1481*//*1482*/unify/*<1482*/(/*1481*//*1483*/target_1/*<1483*/)/*<1481*/(/*1481*//*1484*/target_2/*<1484*/)/*<1481*/(/*1481*//*1499*/nidx/*<1499*/)/*<1481*/;
if ($target.type === ",") {
{
let target_subst = $target[0];
{
let nidx = $target[1];
return /*1326*/(() => {const $target = /*1489*//*1489*//*1489*//*1490*/unify/*<1490*/(/*1489*//*1491*//*1491*//*1492*/type_apply/*<1492*/(/*1491*//*1493*/target_subst/*<1493*/)/*<1491*/(/*1491*//*1494*/arg_1/*<1494*/)/*<1491*/)/*<1489*/(/*1489*//*1495*//*1495*//*1496*/type_apply/*<1496*/(/*1495*//*1497*/target_subst/*<1497*/)/*<1495*/(/*1495*//*1498*/arg_2/*<1498*/)/*<1495*/)/*<1489*/(/*1489*//*1500*/nidx/*<1500*/)/*<1489*/;
if ($target.type === ",") {
{
let arg_subst = $target[0];
{
let nidx = $target[1];
return /*1501*//*1501*//*1502*/$co/*<1502*/(/*1501*//*1503*//*1503*//*1504*/compose_subst/*<1504*/(/*1503*//*1505*/target_subst/*<1505*/)/*<1503*/(/*1503*//*1506*/arg_subst/*<1506*/)/*<1503*/)/*<1501*/(/*1501*//*1507*/nidx/*<1507*/)/*<1501*/
}
}
};
throw new Error('let pattern not matched 1485. ' + valueToString($target));})(/*!*/)/*<1326*/
}
}
};
throw new Error('let pattern not matched 1476. ' + valueToString($target));})(/*!*/)/*<1326*/
}
}
}
}
}
}
}
if ($target.type === ",") {
if ($target[0].type === "tvar") {
{
let $var = $target[0][0];
{
let t = $target[1];
return /*1621*//*1621*//*1622*/$co/*<1622*/(/*1621*//*1514*//*1514*//*1515*/var_bind/*<1515*/(/*1514*//*1516*/$var/*<1516*/)/*<1514*/(/*1514*//*1517*/t/*<1517*/)/*<1514*/)/*<1621*/(/*1621*//*1625*/nidx/*<1625*/)/*<1621*/
}
}
}
}
if ($target.type === ",") {
{
let t = $target[0];
if ($target[1].type === "tvar") {
{
let $var = $target[1][0];
return /*1623*//*1623*//*1624*/$co/*<1624*/(/*1623*//*1526*//*1526*//*1527*/var_bind/*<1527*/(/*1526*//*1528*/$var/*<1528*/)/*<1526*/(/*1526*//*1529*/t/*<1529*/)/*<1526*/)/*<1623*/(/*1623*//*1626*/nidx/*<1626*/)/*<1623*/
}
}
}
}
if ($target.type === ",") {
if ($target[0].type === "tcon") {
{
let a = $target[0][0];
{
let la = $target[0][1];
if ($target[1].type === "tcon") {
{
let b = $target[1][0];
{
let lb = $target[1][1];
return /*1541*/(($target) => {
if ($target === true) {
return /*2071*//*2071*//*2072*/$co/*<2072*/(/*2071*//*1548*/map$slnil/*<1548*/)/*<2071*/(/*2071*//*2073*/nidx/*<2073*/)/*<2071*/
}
return /*1549*//*1550*/fatal/*<1550*/(/*1549*//*1551*/`cant unify ${/*3020*/a/*<3020*/} (${/*3016*/la/*<3016*/}) and ${/*3022*/b/*<3022*/} (${/*3018*/lb/*<3018*/})`/*<1551*/)/*<1549*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1541');})(/*!*//*1544*//*1544*//*1545*/$eq/*<1545*/(/*1544*//*1546*/a/*<1546*/)/*<1544*/(/*1544*//*1547*/b/*<1547*/)/*<1544*/)/*<1541*/
}
}
}
}
}
}
}
return /*1554*//*1555*/fatal/*<1555*/(/*1554*//*1556*/`cant unify ${/*1558*//*1560*/type_to_string/*<1560*/(/*1558*//*1561*/t1/*<1561*/)/*<1558*/} and ${/*1562*//*1564*/type_to_string/*<1564*/(/*1562*//*1566*/t2/*<1566*/)/*<1562*/}`/*<1556*/)/*<1554*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1317');})(/*!*//*1319*//*1319*//*1320*/$co/*<1320*/(/*1319*//*1321*/t1/*<1321*/)/*<1319*/(/*1319*//*1322*/t2/*<1322*/)/*<1319*/)/*<1317*//*<1309*//*<1309*//*<1309*/;

const var_bind = /*1567*/($var) => /*1567*/(type) => /*1575*/(($target) => {
if ($target.type === "tvar") {
{
let v = $target[0];
return /*1582*/(($target) => {
if ($target === true) {
return /*1588*/map$slnil/*<1588*/
}
return /*1592*//*1592*//*1592*//*1617*/map$slset/*<1617*/(/*1592*//*1618*/map$slnil/*<1618*/)/*<1592*/(/*1592*//*1619*/$var/*<1619*/)/*<1592*/(/*1592*//*1620*/type/*<1620*/)/*<1592*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1582');})(/*!*//*1584*//*1584*//*1585*/$eq/*<1585*/(/*1584*//*1586*/$var/*<1586*/)/*<1584*/(/*1584*//*1587*/v/*<1587*/)/*<1584*/)/*<1582*/
}
}
return /*1597*/(($target) => {
if ($target === true) {
return /*1605*//*1606*/fatal/*<1606*/(/*1605*//*1607*/"occurs check"/*<1607*/)/*<1605*/
}
return /*1614*//*1614*//*1614*//*1610*/map$slset/*<1610*/(/*1614*//*1611*/map$slnil/*<1611*/)/*<1614*/(/*1614*//*1612*/$var/*<1612*/)/*<1614*/(/*1614*//*1613*/type/*<1613*/)/*<1614*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1597');})(/*!*//*1599*//*1599*//*1600*/set$slhas/*<1600*/(/*1599*//*1601*//*1602*/type_free/*<1602*/(/*1601*//*1603*/type/*<1603*/)/*<1601*/)/*<1599*/(/*1599*//*1604*/$var/*<1604*/)/*<1599*/)/*<1597*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1575');})(/*!*//*1577*/type/*<1577*/)/*<1575*//*<1567*//*<1567*/;

const t_prim = /*1627*/(prim) => /*1633*/(($target) => {
if ($target.type === "pint") {
{
let l = $target[1];
return /*1639*//*1639*//*1640*/tcon/*<1640*/(/*1639*//*1641*/"int"/*<1641*/)/*<1639*/(/*1639*//*1643*/l/*<1643*/)/*<1639*/
}
}
if ($target.type === "pbool") {
{
let l = $target[1];
return /*1649*//*1649*//*1650*/tcon/*<1650*/(/*1649*//*1651*/"bool"/*<1651*/)/*<1649*/(/*1649*//*1653*/l/*<1653*/)/*<1649*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1633');})(/*!*//*1635*/prim/*<1635*/)/*<1633*//*<1627*/;

const tfn = /*1865*/(a) => /*1865*/(b) => /*1865*/(l) => /*1873*//*1873*//*1873*//*1874*/tapp/*<1874*/(/*1873*//*1875*//*1875*//*1875*//*1876*/tapp/*<1876*/(/*1875*//*1877*//*1877*//*1878*/tcon/*<1878*/(/*1877*//*1879*/"->"/*<1879*/)/*<1877*/(/*1877*//*1881*/l/*<1881*/)/*<1877*/)/*<1875*/(/*1875*//*1882*/a/*<1882*/)/*<1875*/(/*1875*//*1886*/l/*<1886*/)/*<1875*/)/*<1873*/(/*1873*//*1887*/b/*<1887*/)/*<1873*/(/*1873*//*1888*/l/*<1888*/)/*<1873*//*<1865*//*<1865*//*<1865*/;

const t_expr = /*1654*/(tenv) => /*1654*/(expr) => /*1654*/(nidx) => /*1664*/(($target) => {
if ($target.type === "evar") {
{
let name = $target[0];
{
let l = $target[1];
return /*1671*/(($target) => {
if ($target.type === "none") {
return /*1680*//*1681*/fatal/*<1681*/(/*1680*//*1682*/`Unbound variable ${/*1684*/name/*<1684*/}`/*<1682*/)/*<1680*/
}
if ($target.type === "some") {
{
let found = $target[0];
return /*1690*/(() => {const $target = /*1697*//*1697*//*1698*/instantiate/*<1698*/(/*1697*//*1699*/found/*<1699*/)/*<1697*/(/*1697*//*1700*/nidx/*<1700*/)/*<1697*/;
if ($target.type === ",,") {
{
let t = $target[0];
{
let nidx = $target[2];
return /*1701*//*1701*//*1701*//*1702*/$co$co/*<1702*/(/*1701*//*1704*/map$slnil/*<1704*/)/*<1701*/(/*1701*//*1705*/t/*<1705*/)/*<1701*/(/*1701*//*1706*/nidx/*<1706*/)/*<1701*/
}
}
};
throw new Error('let pattern not matched 1693. ' + valueToString($target));})(/*!*/)/*<1690*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1671');})(/*!*//*1673*//*1673*//*1674*/tenv$sltype/*<1674*/(/*1673*//*1675*/tenv/*<1675*/)/*<1673*/(/*1673*//*1676*/name/*<1676*/)/*<1673*/)/*<1671*/
}
}
}
if ($target.type === "equot") {
{
let l = $target[1];
return /*5832*//*5832*//*5832*//*5833*/$co$co/*<5833*/(/*5832*//*5835*/map$slnil/*<5835*/)/*<5832*/(/*5832*//*5823*//*5823*//*5828*/tcon/*<5828*/(/*5823*//*5829*/"ast"/*<5829*/)/*<5823*/(/*5823*//*5831*/l/*<5831*/)/*<5823*/)/*<5832*/(/*5832*//*5834*/nidx/*<5834*/)/*<5832*/
}
}
if ($target.type === "eprim") {
{
let prim = $target[0];
return /*1710*//*1710*//*1710*//*1711*/$co$co/*<1711*/(/*1710*//*1723*/map$slnil/*<1723*/)/*<1710*/(/*1710*//*1712*//*1713*/t_prim/*<1713*/(/*1712*//*1714*/prim/*<1714*/)/*<1712*/)/*<1710*/(/*1710*//*1715*/nidx/*<1715*/)/*<1710*/
}
}
if ($target.type === "elambda") {
{
let name = $target[0];
{
let nl = $target[1];
{
let body = $target[2];
{
let l = $target[3];
return /*1722*/(() => {const $target = /*1730*//*1730*//*1763*/new_type_var/*<1763*/(/*1730*//*1764*/name/*<1764*/)/*<1730*/(/*1730*//*1765*/nidx/*<1765*/)/*<1730*/;
if ($target.type === ",") {
{
let arg_type = $target[0];
{
let nidx = $target[1];
return /*1722*/(() => {const $target = /*1773*//*1773*//*1773*//*1774*/tenv$slset_type/*<1774*/(/*1773*//*1775*/tenv/*<1775*/)/*<1773*/(/*1773*//*1779*/name/*<1779*/)/*<1773*/(/*1773*//*1780*//*1780*//*1781*/scheme/*<1781*/(/*1780*//*1782*/set$slnil/*<1782*/)/*<1780*/(/*1780*//*1783*/arg_type/*<1783*/)/*<1780*/)/*<1773*/;
{
let env_with_name = $target;
return /*1722*/(() => {const $target = /*1789*//*1789*//*1789*//*1790*/t_expr/*<1790*/(/*1789*//*1791*/env_with_name/*<1791*/)/*<1789*/(/*1789*//*1792*/body/*<1792*/)/*<1789*/(/*1789*//*2068*/nidx/*<2068*/)/*<1789*/;
if ($target.type === ",,") {
{
let body_subst = $target[0];
{
let body_type = $target[1];
{
let nidx = $target[2];
return /*1766*//*1766*//*1766*//*1793*/$co$co/*<1793*/(/*1766*//*1794*/body_subst/*<1794*/)/*<1766*/(/*1766*//*1795*//*1795*//*1795*//*1796*/tfn/*<1796*/(/*1795*//*1804*//*1804*//*1805*/type_apply/*<1805*/(/*1804*//*1806*/body_subst/*<1806*/)/*<1804*/(/*1804*//*1807*/arg_type/*<1807*/)/*<1804*/)/*<1795*/(/*1795*//*1808*/body_type/*<1808*/)/*<1795*/(/*1795*//*1811*/l/*<1811*/)/*<1795*/)/*<1766*/(/*1766*//*1809*/nidx/*<1809*/)/*<1766*/
}
}
}
};
throw new Error('let pattern not matched 1784. ' + valueToString($target));})(/*!*/)/*<1722*/
};
throw new Error('let pattern not matched 1772. ' + valueToString($target));})(/*!*/)/*<1722*/
}
}
};
throw new Error('let pattern not matched 1726. ' + valueToString($target));})(/*!*/)/*<1722*/
}
}
}
}
}
if ($target.type === "eapp") {
{
let target = $target[0];
{
let arg = $target[1];
{
let l = $target[2];
return /*1816*/(() => {const $target = /*1823*//*1823*//*1824*/new_type_var/*<1824*/(/*1823*//*1825*/"a"/*<1825*/)/*<1823*/(/*1823*//*1827*/nidx/*<1827*/)/*<1823*/;
if ($target.type === ",") {
{
let result_var = $target[0];
{
let nidx = $target[1];
return /*1816*/(() => {const $target = /*1833*//*1833*//*1833*//*1834*/t_expr/*<1834*/(/*1833*//*1835*/tenv/*<1835*/)/*<1833*/(/*1833*//*1836*/target/*<1836*/)/*<1833*/(/*1833*//*1850*/nidx/*<1850*/)/*<1833*/;
if ($target.type === ",,") {
{
let target_subst = $target[0];
{
let target_type = $target[1];
{
let nidx = $target[2];
return /*1816*/(() => {const $target = /*1842*//*1842*//*1842*//*1843*/t_expr/*<1843*/(/*1842*//*1844*//*1844*//*1845*/tenv_apply/*<1845*/(/*1844*//*1846*/target_subst/*<1846*/)/*<1844*/(/*1844*//*1847*/tenv/*<1847*/)/*<1844*/)/*<1842*/(/*1842*//*1848*/arg/*<1848*/)/*<1842*/(/*1842*//*1849*/nidx/*<1849*/)/*<1842*/;
if ($target.type === ",,") {
{
let arg_subst = $target[0];
{
let arg_type = $target[1];
{
let nidx = $target[2];
return /*1816*/(() => {const $target = /*1855*//*1855*//*1855*//*1856*/unify/*<1856*/(/*1855*//*1857*//*1857*//*1858*/type_apply/*<1858*/(/*1857*//*1859*/arg_subst/*<1859*/)/*<1857*/(/*1857*//*1860*/target_type/*<1860*/)/*<1857*/)/*<1855*/(/*1855*//*1861*//*1861*//*1861*//*1890*/tfn/*<1890*/(/*1861*//*1891*/arg_type/*<1891*/)/*<1861*/(/*1861*//*1892*/result_var/*<1892*/)/*<1861*/(/*1861*//*1893*/l/*<1893*/)/*<1861*/)/*<1855*/(/*1855*//*1894*/nidx/*<1894*/)/*<1855*/;
if ($target.type === ",") {
{
let unified_subst = $target[0];
{
let nidx = $target[1];
return /*1889*//*1889*//*1889*//*1896*/$co$co/*<1896*/(/*1889*//*1897*//*1897*//*1898*/compose_subst/*<1898*/(/*1897*//*1899*/unified_subst/*<1899*/)/*<1897*/(/*1897*//*1900*//*1900*//*1901*/compose_subst/*<1901*/(/*1900*//*1902*/arg_subst/*<1902*/)/*<1900*/(/*1900*//*1903*/target_subst/*<1903*/)/*<1900*/)/*<1897*/)/*<1889*/(/*1889*//*1905*//*1905*//*1906*/type_apply/*<1906*/(/*1905*//*1907*/unified_subst/*<1907*/)/*<1905*/(/*1905*//*1908*/result_var/*<1908*/)/*<1905*/)/*<1889*/(/*1889*//*1909*/nidx/*<1909*/)/*<1889*/
}
}
};
throw new Error('let pattern not matched 1851. ' + valueToString($target));})(/*!*/)/*<1816*/
}
}
}
};
throw new Error('let pattern not matched 1837. ' + valueToString($target));})(/*!*/)/*<1816*/
}
}
}
};
throw new Error('let pattern not matched 1828. ' + valueToString($target));})(/*!*/)/*<1816*/
}
}
};
throw new Error('let pattern not matched 1819. ' + valueToString($target));})(/*!*/)/*<1816*/
}
}
}
}
if ($target.type === "elet") {
{
let pat = $target[0];
{
let init = $target[1];
{
let body = $target[2];
{
let l = $target[3];
return /*2368*//*2368*//*2368*//*2368*//*4403*/pat_and_body/*<4403*/(/*2368*//*4413*/tenv/*<4413*/)/*<2368*/(/*2368*//*4404*/pat/*<4404*/)/*<2368*/(/*2368*//*4405*/body/*<4405*/)/*<2368*/(/*2368*//*4406*//*4406*//*4406*//*5493*/t_expr/*<5493*/(/*4406*//*5494*/tenv/*<5494*/)/*<4406*/(/*4406*//*5495*/init/*<5495*/)/*<4406*/(/*4406*//*5496*/nidx/*<5496*/)/*<4406*/)/*<2368*/
}
}
}
}
}
if ($target.type === "ematch") {
{
let target = $target[0];
{
let cases = $target[1];
{
let l = $target[2];
return /*2252*/(() => {const $target = /*4432*//*4432*//*4436*/new_type_var/*<4436*/(/*4432*//*4437*/"match-res"/*<4437*/)/*<4432*/(/*4432*//*4439*/nidx/*<4439*/)/*<4432*/;
if ($target.type === ",") {
{
let result_var = $target[0];
{
let nidx = $target[1];
return /*2252*/(() => {const $target = /*2264*//*2264*//*2264*//*2265*/t_expr/*<2265*/(/*2264*//*2266*/tenv/*<2266*/)/*<2264*/(/*2264*//*2267*/target/*<2267*/)/*<2264*/(/*2264*//*2268*/nidx/*<2268*/)/*<2264*/;
if ($target.type === ",,") {
{
let target_subst = $target[0];
{
let target_type = $target[1];
{
let nidx = $target[2];
return /*2283*//*2283*//*2283*//*4484*/foldr/*<4484*/(/*2283*//*4485*//*4485*//*4485*//*4486*/$co$co/*<4486*/(/*4485*//*4487*/target_subst/*<4487*/)/*<4485*/(/*4485*//*4488*/result_var/*<4488*/)/*<4485*/(/*4485*//*4489*/nidx/*<4489*/)/*<4485*/)/*<2283*/(/*2283*//*4490*/cases/*<4490*/)/*<2283*/(/*2283*//*4491*/($fn_arg) => /*4491*/(($target) => {
if ($target.type === ",,") {
{
let subst = $target[0];
{
let result = $target[1];
{
let nidx = $target[2];
return /*4491*/($fn_arg) => /*4491*/(($target) => {
if ($target.type === ",") {
{
let pat = $target[0];
{
let body = $target[1];
return /*4503*/(() => {const $target = /*4512*//*4512*//*4512*//*4512*//*4513*/pat_and_body/*<4513*/(/*4512*//*4514*/tenv/*<4514*/)/*<4512*/(/*4512*//*4515*/pat/*<4515*/)/*<4512*/(/*4512*//*4516*/body/*<4516*/)/*<4512*/(/*4512*//*4517*//*4517*//*4517*//*4518*/$co$co/*<4518*/(/*4517*//*4519*/subst/*<4519*/)/*<4517*/(/*4517*//*4520*/target_type/*<4520*/)/*<4517*/(/*4517*//*4521*/nidx/*<4521*/)/*<4517*/)/*<4512*/;
if ($target.type === ",,") {
{
let subst = $target[0];
{
let body = $target[1];
{
let nidx = $target[2];
return /*4503*/(() => {const $target = /*4526*//*4526*//*4526*//*4527*/unify/*<4527*/(/*4526*//*4528*/result/*<4528*/)/*<4526*/(/*4526*//*4529*/body/*<4529*/)/*<4526*/(/*4526*//*4530*/nidx/*<4530*/)/*<4526*/;
if ($target.type === ",") {
{
let unified_subst = $target[0];
{
let nidx = $target[1];
return /*4531*//*4531*//*4531*//*4532*/$co$co/*<4532*/(/*4531*//*4533*//*4533*//*4534*/compose_subst/*<4534*/(/*4533*//*4535*/subst/*<4535*/)/*<4533*/(/*4533*//*4536*/unified_subst/*<4536*/)/*<4533*/)/*<4531*/(/*4531*//*4537*//*4537*//*4538*/type_apply/*<4538*/(/*4537*//*4539*/unified_subst/*<4539*/)/*<4537*/(/*4537*//*4540*/result/*<4540*/)/*<4537*/)/*<4531*/(/*4531*//*4541*/nidx/*<4541*/)/*<4531*/
}
}
};
throw new Error('let pattern not matched 4522. ' + valueToString($target));})(/*!*/)/*<4503*/
}
}
}
};
throw new Error('let pattern not matched 4506. ' + valueToString($target));})(/*!*/)/*<4503*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4491');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4491*//*<4491*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4491');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4491*//*<4491*/)/*<2283*/
}
}
}
};
throw new Error('let pattern not matched 4431. ' + valueToString($target));})(/*!*/)/*<2252*/
}
}
};
throw new Error('let pattern not matched 2259. ' + valueToString($target));})(/*!*/)/*<2252*/
}
}
}
}
return /*2064*//*2065*/fatal/*<2065*/(/*2064*//*2066*/`cannot infer type for ${/*2247*//*2249*/valueToString/*<2249*/(/*2247*//*2250*/expr/*<2250*/)/*<2247*/}`/*<2066*/)/*<2064*/
throw new Error('failed to match ' + jsonify($target) + '. Loc: 1664');})(/*!*//*1666*/expr/*<1666*/)/*<1664*//*<1654*//*<1654*//*<1654*/;

const pat_and_body = /*4282*/(tenv) => /*4282*/(pat) => /*4282*/(body) => /*4282*/($fn_arg) => /*4282*/(($target) => {
if ($target.type === ",,") {
{
let value_subst = $target[0];
{
let value_type = $target[1];
{
let nidx = $target[2];
return /*4289*/(() => {const $target = /*4308*//*4308*//*4308*//*4309*/t_pat/*<4309*/(/*4308*//*4310*/tenv/*<4310*/)/*<4308*/(/*4308*//*4311*/pat/*<4311*/)/*<4308*/(/*4308*//*4312*/nidx/*<4312*/)/*<4308*/;
if ($target.type === ",,") {
{
let pat_type = $target[0];
{
let bindings = $target[1];
{
let nidx = $target[2];
return /*4289*/(() => {const $target = /*4317*//*4317*//*4317*//*4318*/unify/*<4318*/(/*4317*//*4319*/value_type/*<4319*/)/*<4317*/(/*4317*//*4320*/pat_type/*<4320*/)/*<4317*/(/*4317*//*4321*/nidx/*<4321*/)/*<4317*/;
if ($target.type === ",") {
{
let unified_subst = $target[0];
{
let nidx = $target[1];
return /*4289*/(() => {const $target = /*4323*//*4323*//*4324*/map$slmap/*<4324*/(/*4323*//*4325*//*4326*/type_apply/*<4326*/(/*4325*//*4327*//*4327*//*4328*/compose_subst/*<4328*/(/*4327*//*4329*/value_subst/*<4329*/)/*<4327*/(/*4327*//*4330*/unified_subst/*<4330*/)/*<4327*/)/*<4325*/)/*<4323*/(/*4323*//*4331*/bindings/*<4331*/)/*<4323*/;
{
let bindings = $target;
return /*4289*/(() => {const $target = /*4333*//*4333*//*4334*/map$slmap/*<4334*/(/*4333*//*4335*//*4336*/generalize/*<4336*/(/*4335*//*4337*//*4337*//*4338*/tenv_apply/*<4338*/(/*4337*//*4339*//*4339*//*4340*/compose_subst/*<4340*/(/*4339*//*4341*/value_subst/*<4341*/)/*<4339*/(/*4339*//*4342*/unified_subst/*<4342*/)/*<4339*/)/*<4337*/(/*4337*//*4343*/tenv/*<4343*/)/*<4337*/)/*<4335*/)/*<4333*/(/*4333*//*4344*/bindings/*<4344*/)/*<4333*/;
{
let schemes = $target;
return /*4289*/(() => {const $target = /*4346*//*4346*//*4346*//*4347*/foldr/*<4347*/(/*4346*//*4348*//*4348*//*4349*/tenv_apply/*<4349*/(/*4348*//*4350*/value_subst/*<4350*/)/*<4348*/(/*4348*//*4351*/tenv/*<4351*/)/*<4348*/)/*<4346*/(/*4346*//*4352*//*4353*/map$slto_list/*<4353*/(/*4352*//*4354*/schemes/*<4354*/)/*<4352*/)/*<4346*/(/*4346*//*4355*/(tenv) => /*4355*/($fn_arg) => /*4355*/(($target) => {
if ($target.type === ",") {
{
let name = $target[0];
{
let scheme = $target[1];
return /*4363*//*4363*//*4363*//*4364*/tenv$slset_type/*<4364*/(/*4363*//*4365*/tenv/*<4365*/)/*<4363*/(/*4363*//*4366*/name/*<4366*/)/*<4363*/(/*4363*//*4367*/scheme/*<4367*/)/*<4363*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4355');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4355*//*<4355*//*<4355*/)/*<4346*/;
{
let bound_env = $target;
return /*4289*/(() => {const $target = /*4373*//*4373*//*4373*//*4374*/t_expr/*<4374*/(/*4373*//*4375*//*4375*//*4376*/tenv_apply/*<4376*/(/*4375*//*4377*//*4377*//*4378*/compose_subst/*<4378*/(/*4377*//*4379*/unified_subst/*<4379*/)/*<4377*/(/*4377*//*4380*/value_subst/*<4380*/)/*<4377*/)/*<4375*/(/*4375*//*4381*/bound_env/*<4381*/)/*<4375*/)/*<4373*/(/*4373*//*4382*/body/*<4382*/)/*<4373*/(/*4373*//*4383*/nidx/*<4383*/)/*<4373*/;
if ($target.type === ",,") {
{
let body_subst = $target[0];
{
let body_type = $target[1];
{
let nidx = $target[2];
return /*4384*//*4384*//*4384*//*4385*/$co$co/*<4385*/(/*4384*//*4386*//*4386*//*4387*/compose_subst/*<4387*/(/*4386*//*4388*/unified_subst/*<4388*/)/*<4386*/(/*4386*//*4389*//*4389*//*4390*/compose_subst/*<4390*/(/*4389*//*4391*/value_subst/*<4391*/)/*<4389*/(/*4389*//*4392*/body_subst/*<4392*/)/*<4389*/)/*<4386*/)/*<4384*/(/*4384*//*4393*//*4393*//*4394*/type_apply/*<4394*/(/*4393*//*4395*/unified_subst/*<4395*/)/*<4393*/(/*4393*//*4396*/body_type/*<4396*/)/*<4393*/)/*<4384*/(/*4384*//*4397*/nidx/*<4397*/)/*<4384*/
}
}
}
};
throw new Error('let pattern not matched 4368. ' + valueToString($target));})(/*!*/)/*<4289*/
};
throw new Error('let pattern not matched 4345. ' + valueToString($target));})(/*!*/)/*<4289*/
};
throw new Error('let pattern not matched 4332. ' + valueToString($target));})(/*!*/)/*<4289*/
};
throw new Error('let pattern not matched 4322. ' + valueToString($target));})(/*!*/)/*<4289*/
}
}
};
throw new Error('let pattern not matched 4313. ' + valueToString($target));})(/*!*/)/*<4289*/
}
}
}
};
throw new Error('let pattern not matched 4303. ' + valueToString($target));})(/*!*/)/*<4289*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4282');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4282*//*<4282*//*<4282*//*<4282*//*<4282*/;

const t_pat = /*2466*/(tenv) => /*2466*/(pat) => /*2466*/(nidx) => /*2475*/(($target) => {
if ($target.type === "pany") {
{
let nl = $target[0];
return /*6412*/(() => {const $target = /*6405*//*6405*//*6408*/new_type_var/*<6408*/(/*6405*//*6409*/"any"/*<6409*/)/*<6405*/(/*6405*//*6411*/nidx/*<6411*/)/*<6405*/;
if ($target.type === ",") {
{
let $var = $target[0];
{
let nidx = $target[1];
return /*6420*//*6420*//*6420*//*6421*/$co$co/*<6421*/(/*6420*//*6422*/$var/*<6422*/)/*<6420*/(/*6420*//*6423*/map$slnil/*<6423*/)/*<6420*/(/*6420*//*6424*/nidx/*<6424*/)/*<6420*/
}
}
};
throw new Error('let pattern not matched 6416. ' + valueToString($target));})(/*!*/)/*<6412*/
}
}
if ($target.type === "pvar") {
{
let name = $target[0];
{
let nl = $target[1];
return /*3450*/(() => {const $target = /*2482*//*2482*//*3403*/new_type_var/*<3403*/(/*2482*//*3404*/name/*<3404*/)/*<2482*/(/*2482*//*3405*/nidx/*<3405*/)/*<2482*/;
if ($target.type === ",") {
{
let $var = $target[0];
{
let nidx = $target[1];
return /*3459*//*3459*//*3459*//*3460*/$co$co/*<3460*/(/*3459*//*3461*/$var/*<3461*/)/*<3459*/(/*3459*//*3464*//*3464*//*3464*//*3465*/map$slset/*<3465*/(/*3464*//*3466*/map$slnil/*<3466*/)/*<3464*/(/*3464*//*3467*/name/*<3467*/)/*<3464*/(/*3464*//*3469*/$var/*<3469*/)/*<3464*/)/*<3459*/(/*3459*//*3462*/nidx/*<3462*/)/*<3459*/
}
}
};
throw new Error('let pattern not matched 3455. ' + valueToString($target));})(/*!*/)/*<3450*/
}
}
}
if ($target.type === "pstr") {
{
let nl = $target[1];
return /*3407*//*3407*//*3407*//*3412*/$co$co/*<3412*/(/*3407*//*3413*//*3413*//*3414*/tcon/*<3414*/(/*3413*//*3415*/"string"/*<3415*/)/*<3413*/(/*3413*//*3417*/nl/*<3417*/)/*<3413*/)/*<3407*/(/*3407*//*3472*/map$slnil/*<3472*/)/*<3407*/(/*3407*//*3419*/nidx/*<3419*/)/*<3407*/
}
}
if ($target.type === "pprim") {
if ($target[0].type === "pbool") {
{
let l = $target[1];
return /*3426*//*3426*//*3426*//*3427*/$co$co/*<3427*/(/*3426*//*3428*//*3428*//*3429*/tcon/*<3429*/(/*3428*//*3430*/"bool"/*<3430*/)/*<3428*/(/*3428*//*3432*/l/*<3432*/)/*<3428*/)/*<3426*/(/*3426*//*3473*/map$slnil/*<3473*/)/*<3426*/(/*3426*//*3433*/nidx/*<3433*/)/*<3426*/
}
}
}
if ($target.type === "pprim") {
if ($target[0].type === "pint") {
{
let l = $target[1];
return /*3441*//*3441*//*3441*//*3442*/$co$co/*<3442*/(/*3441*//*3443*//*3443*//*3444*/tcon/*<3444*/(/*3443*//*3445*/"int"/*<3445*/)/*<3443*/(/*3443*//*3447*/l/*<3447*/)/*<3443*/)/*<3441*/(/*3441*//*3474*/map$slnil/*<3474*/)/*<3441*/(/*3441*//*3448*/nidx/*<3448*/)/*<3441*/
}
}
}
if ($target.type === "pcon") {
{
let name = $target[0];
{
let args = $target[1];
{
let l = $target[2];
return /*3479*/(() => {const $target = /*3661*/(($target) => {
if ($target.type === "none") {
return /*3665*//*3666*/fatal/*<3666*/(/*3665*//*3668*/`Unknown constructor: ${/*3670*/name/*<3670*/}`/*<3668*/)/*<3665*/
}
if ($target.type === "some") {
{
let v = $target[0];
return /*3750*/v/*<3750*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3661');})(/*!*//*3488*//*3488*//*3489*/tenv$slcon/*<3489*/(/*3488*//*3490*/tenv/*<3490*/)/*<3488*/(/*3488*//*3491*/name/*<3491*/)/*<3488*/)/*<3661*/;
if ($target.type === "tconstructor") {
{
let free = $target[0];
{
let cargs = $target[1];
{
let cres = $target[2];
return /*3479*/(() => {const $target = /*3502*//*3502*//*3503*/instantiate/*<3503*/(/*3502*//*3504*//*3504*//*3505*/scheme/*<3505*/(/*3504*//*3506*/free/*<3506*/)/*<3504*/(/*3504*//*3507*/cres/*<3507*/)/*<3504*/)/*<3502*/(/*3502*//*3754*/nidx/*<3754*/)/*<3502*/;
if ($target.type === ",,") {
{
let tres = $target[0];
{
let tsubst = $target[1];
{
let nidx = $target[2];
return /*3479*/(() => {const $target = /*3509*//*3509*//*3510*/map/*<3510*/(/*3509*//*3511*/cargs/*<3511*/)/*<3509*/(/*3509*//*3512*//*3513*/type_apply/*<3513*/(/*3512*//*3514*/tsubst/*<3514*/)/*<3512*/)/*<3509*/;
{
let cargs = $target;
return /*3479*/(() => {const $target = /*3581*//*3581*//*3582*/zip/*<3582*/(/*3581*//*3583*/args/*<3583*/)/*<3581*/(/*3581*//*3584*/cargs/*<3584*/)/*<3581*/;
{
let zipped = $target;
return /*3479*/(() => {const $target = /*3590*//*3590*//*3590*//*3591*/foldl/*<3591*/(/*3590*//*3592*//*3592*//*3592*//*3593*/$co$co/*<3593*/(/*3592*//*3595*/map$slnil/*<3595*/)/*<3592*/(/*3592*//*3596*/map$slnil/*<3596*/)/*<3592*/(/*3592*//*3597*/nidx/*<3597*/)/*<3592*/)/*<3590*/(/*3590*//*3598*/zipped/*<3598*/)/*<3590*/(/*3590*//*3599*/($fn_arg) => /*3599*/(($target) => {
if ($target.type === ",,") {
{
let subst = $target[0];
{
let bindings = $target[1];
{
let nidx = $target[2];
return /*3599*/($fn_arg) => /*3599*/(($target) => {
if ($target.type === ",") {
{
let arg = $target[0];
{
let carg = $target[1];
return /*3611*/(() => {const $target = /*3622*//*3622*//*3622*//*3623*/t_pat/*<3623*/(/*3622*//*3625*/tenv/*<3625*/)/*<3622*/(/*3622*//*3626*/arg/*<3626*/)/*<3622*/(/*3622*//*3627*/nidx/*<3627*/)/*<3622*/;
if ($target.type === ",,") {
{
let pat_type = $target[0];
{
let pat_bind = $target[1];
{
let nidx = $target[2];
return /*3611*/(() => {const $target = /*3637*//*3637*//*3637*//*3638*/unify/*<3638*/(/*3637*//*3639*/pat_type/*<3639*/)/*<3637*/(/*3637*//*3640*/carg/*<3640*/)/*<3637*/(/*3637*//*3755*/nidx/*<3755*/)/*<3637*/;
if ($target.type === ",") {
{
let unified_subst = $target[0];
{
let nidx = $target[1];
return /*3616*//*3616*//*3616*//*3629*/$co$co/*<3629*/(/*3616*//*3630*//*3630*//*3631*/compose_subst/*<3631*/(/*3630*//*3632*/unified_subst/*<3632*/)/*<3630*/(/*3630*//*3641*/subst/*<3641*/)/*<3630*/)/*<3616*/(/*3616*//*3642*//*3642*//*3778*/map$slmerge/*<3778*/(/*3642*//*3779*/bindings/*<3779*/)/*<3642*/(/*3642*//*3780*/pat_bind/*<3780*/)/*<3642*/)/*<3616*/(/*3616*//*3643*/nidx/*<3643*/)/*<3616*/
}
}
};
throw new Error('let pattern not matched 3633. ' + valueToString($target));})(/*!*/)/*<3611*/
}
}
}
};
throw new Error('let pattern not matched 3617. ' + valueToString($target));})(/*!*/)/*<3611*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3599');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3599*//*<3599*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 3599');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<3599*//*<3599*/)/*<3590*/;
if ($target.type === ",,") {
{
let subst = $target[0];
{
let bindings = $target[1];
{
let nidx = $target[2];
return /*3492*//*3492*//*3492*//*3493*/$co$co/*<3493*/(/*3492*//*3494*//*3494*//*3645*/type_apply/*<3645*/(/*3494*//*3646*/subst/*<3646*/)/*<3494*/(/*3494*//*3647*/tres/*<3647*/)/*<3494*/)/*<3492*/(/*3492*//*3781*//*3781*//*3782*/map$slmap/*<3782*/(/*3781*//*3783*//*3784*/type_apply/*<3784*/(/*3783*//*3785*/subst/*<3785*/)/*<3783*/)/*<3781*/(/*3781*//*3851*/bindings/*<3851*/)/*<3781*/)/*<3492*/(/*3492*//*3648*/nidx/*<3648*/)/*<3492*/
}
}
}
};
throw new Error('let pattern not matched 3585. ' + valueToString($target));})(/*!*/)/*<3479*/
};
throw new Error('let pattern not matched 3580. ' + valueToString($target));})(/*!*/)/*<3479*/
};
throw new Error('let pattern not matched 3508. ' + valueToString($target));})(/*!*/)/*<3479*/
}
}
}
};
throw new Error('let pattern not matched 3497. ' + valueToString($target));})(/*!*/)/*<3479*/
}
}
}
};
throw new Error('let pattern not matched 3482. ' + valueToString($target));})(/*!*/)/*<3479*/
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 2475');})(/*!*//*2477*/pat/*<2477*/)/*<2475*//*<2466*//*<2466*//*<2466*/;

const tenv$slnil = /*3361*//*3361*//*3361*//*3362*/tenv/*<3362*/(/*3361*//*3363*/map$slnil/*<3363*/)/*<3361*/(/*3361*//*3364*/map$slnil/*<3364*/)/*<3361*/(/*3361*//*3365*/map$slnil/*<3365*/)/*<3361*/;

const infer = /*1976*/(tenv) => /*1976*/(expr) => /*1984*/(() => {const $target = /*1992*//*1992*//*1992*//*1993*/t_expr/*<1993*/(/*1992*//*1994*/tenv/*<1994*/)/*<1992*/(/*1992*//*1995*/expr/*<1995*/)/*<1992*/(/*1992*//*1996*/0/*<1996*/)/*<1992*/;
if ($target.type === ",,") {
{
let s = $target[0];
{
let t = $target[1];
{
let nidx = $target[2];
return /*1997*//*1997*//*2000*/type_apply/*<2000*/(/*1997*//*2001*/s/*<2001*/)/*<1997*/(/*1997*//*2002*/t/*<2002*/)/*<1997*/
}
}
}
};
throw new Error('let pattern not matched 1987. ' + valueToString($target));})(/*!*/)/*<1984*//*<1976*//*<1976*/;

const tint = /*2055*//*2055*//*2056*/tcon/*<2056*/(/*2055*//*2057*/"int"/*<2057*/)/*<2055*/(/*2055*//*2059*/-1/*<2059*/)/*<2055*/;

const tbool = /*5416*//*5416*//*5417*/tcon/*<5417*/(/*5416*//*5418*/"bool"/*<5418*/)/*<5416*/(/*5416*//*5421*/-1/*<5421*/)/*<5416*/;

const basic = /*3374*//*3374*//*3374*//*3375*/tenv/*<3375*/(/*3374*//*3367*//*3368*/map$slfrom_list/*<3368*/(/*3367*//*3366*//*3366*//*3366*/cons/*<3366*/(/*3366*//*2042*//*2042*//*2043*/$co/*<2043*/(/*2042*//*2045*/"+"/*<2045*/)/*<2042*/(/*2042*//*2087*//*2087*//*2088*/scheme/*<2088*/(/*2087*//*2091*/set$slnil/*<2091*/)/*<2087*/(/*2087*//*2047*//*2047*//*2047*//*2048*/tfn/*<2048*/(/*2047*//*2049*/tint/*<2049*/)/*<2047*/(/*2047*//*2094*//*2094*//*2094*//*2095*/tfn/*<2095*/(/*2094*//*2096*/tint/*<2096*/)/*<2094*/(/*2094*//*2061*/tint/*<2061*/)/*<2094*/(/*2094*//*2097*/-1/*<2097*/)/*<2094*/)/*<2047*/(/*2047*//*2062*/-1/*<2062*/)/*<2047*/)/*<2087*/)/*<2042*/)/*<3366*/(/*3366*//*3366*//*3366*//*3366*/cons/*<3366*/(/*3366*//*3369*//*3369*//*3370*/$co/*<3370*/(/*3369*//*3372*/","/*<3372*/)/*<3369*/(/*3369*//*2374*//*2374*//*2375*/scheme/*<2375*/(/*2374*//*2376*//*2380*/set$slfrom_list/*<2380*/(/*2376*//*3225*//*3225*//*3225*/cons/*<3225*/(/*3225*//*2382*/"a"/*<2382*/)/*<3225*/(/*3225*//*3225*//*3225*//*3225*/cons/*<3225*/(/*3225*//*3226*/"b"/*<3226*/)/*<3225*/(/*3225*//*3225*/nil/*<3225*/)/*<3225*/)/*<3225*/)/*<2376*/)/*<2374*/(/*2374*//*2377*//*2377*//*2377*//*2378*/tfn/*<2378*/(/*2377*//*2379*//*2379*//*2384*/tvar/*<2384*/(/*2379*//*2385*/"a"/*<2385*/)/*<2379*/(/*2379*//*2387*/-1/*<2387*/)/*<2379*/)/*<2377*/(/*2377*//*2388*//*2388*//*2388*//*2389*/tfn/*<2389*/(/*2388*//*2390*//*2390*//*2391*/tvar/*<2391*/(/*2390*//*2392*/"b"/*<2392*/)/*<2390*/(/*2390*//*2394*/-1/*<2394*/)/*<2390*/)/*<2388*/(/*2388*//*2402*//*2402*//*2402*//*2403*/tapp/*<2403*/(/*2402*//*2400*//*2400*//*2400*//*2401*/tapp/*<2401*/(/*2400*//*2395*//*2395*//*2396*/tcon/*<2396*/(/*2395*//*2397*/","/*<2397*/)/*<2395*/(/*2395*//*2399*/-1/*<2399*/)/*<2395*/)/*<2400*/(/*2400*//*2404*//*2404*//*2405*/tvar/*<2405*/(/*2404*//*2406*/"a"/*<2406*/)/*<2404*/(/*2404*//*2408*/-1/*<2408*/)/*<2404*/)/*<2400*/(/*2400*//*2409*/-1/*<2409*/)/*<2400*/)/*<2402*/(/*2402*//*2410*//*2410*//*2411*/tvar/*<2411*/(/*2410*//*2412*/"b"/*<2412*/)/*<2410*/(/*2410*//*2414*/-1/*<2414*/)/*<2410*/)/*<2402*/(/*2402*//*2415*/-1/*<2415*/)/*<2402*/)/*<2388*/(/*2388*//*2416*/-1/*<2416*/)/*<2388*/)/*<2377*/(/*2377*//*2417*/-1/*<2417*/)/*<2377*/)/*<2374*/)/*<3369*/)/*<3366*/(/*3366*//*3366*/nil/*<3366*/)/*<3366*/)/*<3366*/)/*<3367*/)/*<3374*/(/*3374*//*3376*//*3676*/map$slfrom_list/*<3676*/(/*3376*//*3677*//*3677*//*3677*/cons/*<3677*/(/*3677*//*3678*//*3678*//*3681*/$co/*<3681*/(/*3678*//*3682*/","/*<3682*/)/*<3678*/(/*3678*//*3684*//*3684*//*3684*//*3685*/tconstructor/*<3685*/(/*3684*//*3686*//*3687*/set$slfrom_list/*<3687*/(/*3686*//*3688*//*3688*//*3688*/cons/*<3688*/(/*3688*//*3689*/"a"/*<3689*/)/*<3688*/(/*3688*//*3688*//*3688*//*3688*/cons/*<3688*/(/*3688*//*3691*/"b"/*<3691*/)/*<3688*/(/*3688*//*3688*/nil/*<3688*/)/*<3688*/)/*<3688*/)/*<3686*/)/*<3684*/(/*3684*//*3693*//*3693*//*3693*/cons/*<3693*/(/*3693*//*3696*//*3696*//*3697*/tvar/*<3697*/(/*3696*//*3698*/"a"/*<3698*/)/*<3696*/(/*3696*//*3700*/-1/*<3700*/)/*<3696*/)/*<3693*/(/*3693*//*3693*//*3693*//*3693*/cons/*<3693*/(/*3693*//*3701*//*3701*//*3702*/tvar/*<3702*/(/*3701*//*3703*/"b"/*<3703*/)/*<3701*/(/*3701*//*3705*/-1/*<3705*/)/*<3701*/)/*<3693*/(/*3693*//*3693*/nil/*<3693*/)/*<3693*/)/*<3693*/)/*<3684*/(/*3684*//*3706*//*3706*//*3706*//*3707*/tapp/*<3707*/(/*3706*//*3708*//*3708*//*3708*//*3709*/tapp/*<3709*/(/*3708*//*3710*//*3710*//*3711*/tcon/*<3711*/(/*3710*//*3712*/","/*<3712*/)/*<3710*/(/*3710*//*3714*/-1/*<3714*/)/*<3710*/)/*<3708*/(/*3708*//*3715*//*3715*//*3716*/tvar/*<3716*/(/*3715*//*3717*/"a"/*<3717*/)/*<3715*/(/*3715*//*3719*/-1/*<3719*/)/*<3715*/)/*<3708*/(/*3708*//*3727*/-1/*<3727*/)/*<3708*/)/*<3706*/(/*3706*//*3720*//*3720*//*3721*/tvar/*<3721*/(/*3720*//*3722*/"b"/*<3722*/)/*<3720*/(/*3720*//*3724*/-1/*<3724*/)/*<3720*/)/*<3706*/(/*3706*//*3726*/-1/*<3726*/)/*<3706*/)/*<3684*/)/*<3678*/)/*<3677*/(/*3677*//*3677*/nil/*<3677*/)/*<3677*/)/*<3376*/)/*<3374*/(/*3374*//*3377*/map$slnil/*<3377*/)/*<3374*/;

const infer_show = /*4985*/(tenv) => /*4985*/(x) => /*4996*//*4997*/type_to_string/*<4997*/(/*4996*//*4998*//*4998*//*5000*/infer/*<5000*/(/*4998*//*5001*/tenv/*<5001*/)/*<4998*/(/*4998*//*5002*/x/*<5002*/)/*<4998*/)/*<4996*//*<4985*//*<4985*/;

const infer_stmt = /*2197*/(tenv$qu) => /*2197*/(stmt) => /*4547*/(($target) => {
if ($target.type === "sdef") {
{
let name = $target[0];
{
let nl = $target[1];
{
let expr = $target[2];
{
let l = $target[3];
return /*5499*/(() => {const $target = /*5554*/0/*<5554*/;
{
let nidx = $target;
return /*5499*/(() => {const $target = /*5569*//*5569*//*5570*/new_type_var/*<5570*/(/*5569*//*5572*/name/*<5572*/)/*<5569*/(/*5569*//*5571*/nidx/*<5571*/)/*<5569*/;
if ($target.type === ",") {
{
let self = $target[0];
{
let nidx = $target[1];
return /*5499*/(() => {const $target = /*5556*//*5556*//*5556*//*5557*/tenv$slset_type/*<5557*/(/*5556*//*5559*/tenv$qu/*<5559*/)/*<5556*/(/*5556*//*5560*/name/*<5560*/)/*<5556*/(/*5556*//*5561*//*5561*//*5562*/scheme/*<5562*/(/*5561*//*5563*/set$slnil/*<5563*/)/*<5561*/(/*5561*//*5564*/self/*<5564*/)/*<5561*/)/*<5556*/;
{
let self_bound = $target;
return /*5499*/(() => {const $target = /*5510*//*5510*//*5510*//*5511*/t_expr/*<5511*/(/*5510*//*5512*/self_bound/*<5512*/)/*<5510*/(/*5510*//*5513*/expr/*<5513*/)/*<5510*/(/*5510*//*5514*/0/*<5514*/)/*<5510*/;
if ($target.type === ",,") {
{
let s = $target[0];
{
let t = $target[1];
{
let nidx = $target[2];
return /*5499*/(() => {const $target = /*6510*//*6510*//*6511*/type_apply/*<6511*/(/*6510*//*6512*/s/*<6512*/)/*<6510*/(/*6510*//*6513*/self/*<6513*/)/*<6510*/;
{
let selfed = $target;
return /*5499*/(() => {const $target = /*5585*//*5585*//*5585*//*5586*/unify/*<5586*/(/*5585*//*6425*/selfed/*<6425*/)/*<5585*/(/*5585*//*5588*/t/*<5588*/)/*<5585*/(/*5585*//*5589*/nidx/*<5589*/)/*<5585*/;
if ($target.type === ",") {
{
let u_subst = $target[0];
{
let nidx = $target[1];
return /*5499*/(() => {const $target = /*6520*//*6520*//*6521*/compose_subst/*<6521*/(/*6520*//*6522*/u_subst/*<6522*/)/*<6520*/(/*6520*//*5574*//*5574*//*5575*/compose_subst/*<5575*/(/*5574*//*5577*/u_subst/*<5577*/)/*<5574*/(/*5574*//*6519*/s/*<6519*/)/*<5574*/)/*<6520*/;
{
let s2 = $target;
return /*5499*/(() => {const $target = /*5516*//*5516*//*5517*/type_apply/*<5517*/(/*5516*//*5518*/s2/*<5518*/)/*<5516*/(/*5516*//*5519*/t/*<5519*/)/*<5516*/;
{
let t = $target;
return /*5499*/(() => {const $target = /*6515*//*6515*//*6516*/type_apply/*<6516*/(/*6515*//*6517*/s2/*<6517*/)/*<6515*/(/*6515*//*6518*/selfed/*<6518*/)/*<6515*/;
{
let sb = $target;
return /*4554*//*4554*//*4554*//*4555*/tenv$slset_type/*<4555*/(/*4554*//*4556*/tenv$qu/*<4556*/)/*<4554*/(/*4554*//*4557*/name/*<4557*/)/*<4554*/(/*4554*//*4558*//*4558*//*4559*/generalize/*<4559*/(/*4558*//*4560*/tenv$qu/*<4560*/)/*<4558*/(/*4558*//*4561*/t/*<4561*/)/*<4558*/)/*<4554*/
};
throw new Error('let pattern not matched 6514. ' + valueToString($target));})(/*!*/)/*<5499*/
};
throw new Error('let pattern not matched 5515. ' + valueToString($target));})(/*!*/)/*<5499*/
};
throw new Error('let pattern not matched 5573. ' + valueToString($target));})(/*!*/)/*<5499*/
}
}
};
throw new Error('let pattern not matched 5581. ' + valueToString($target));})(/*!*/)/*<5499*/
};
throw new Error('let pattern not matched 6509. ' + valueToString($target));})(/*!*/)/*<5499*/
}
}
}
};
throw new Error('let pattern not matched 5505. ' + valueToString($target));})(/*!*/)/*<5499*/
};
throw new Error('let pattern not matched 5555. ' + valueToString($target));})(/*!*/)/*<5499*/
}
}
};
throw new Error('let pattern not matched 5565. ' + valueToString($target));})(/*!*/)/*<5499*/
};
throw new Error('let pattern not matched 5553. ' + valueToString($target));})(/*!*/)/*<5499*/
}
}
}
}
}
if ($target.type === "sexpr") {
{
let expr = $target[0];
{
let l = $target[1];
return /*4568*/(() => {const $target = /*4574*//*4574*//*4575*/infer/*<4575*/(/*4574*//*4576*/tenv$qu/*<4576*/)/*<4574*/(/*4574*//*4577*/expr/*<4577*/)/*<4574*/;
return /*4579*/tenv$qu/*<4579*/;
throw new Error('let pattern not matched 4573. ' + valueToString($target));})(/*!*/)/*<4568*/
}
}
}
if ($target.type === "sdeftype") {
{
let tname = $target[0];
{
let tnl = $target[1];
{
let targs = $target[2];
{
let constructors = $target[3];
{
let l = $target[4];
return /*4583*/(() => {const $target = /*4592*/tenv$qu/*<4592*/;
if ($target.type === "tenv") {
{
let values = $target[0];
{
let cons = $target[1];
{
let types = $target[2];
return /*4583*/(() => {const $target = /*4595*//*4595*//*4596*/map/*<4596*/(/*4595*//*4597*/constructors/*<4597*/)/*<4595*/(/*4595*//*4598*/($fn_arg) => /*4598*/(($target) => {
if ($target.type === ",,,") {
{
let name = $target[0];
return /*4620*/name/*<4620*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4598');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4598*//*<4598*/)/*<4595*/;
{
let names = $target;
return /*4583*/(() => {const $target = /*4919*//*4919*//*4919*//*4920*/foldl/*<4920*/(/*4919*//*4921*//*4921*//*4922*/tcon/*<4922*/(/*4921*//*4923*/tname/*<4923*/)/*<4921*/(/*4921*//*4924*/tnl/*<4924*/)/*<4921*/)/*<4919*/(/*4919*//*4925*/targs/*<4925*/)/*<4919*/(/*4919*//*4928*/(body) => /*4928*/($fn_arg) => /*4928*/(($target) => {
if ($target.type === ",") {
{
let arg = $target[0];
{
let al = $target[1];
return /*4933*//*4933*//*4933*//*4934*/tapp/*<4934*/(/*4933*//*4935*/body/*<4935*/)/*<4933*/(/*4933*//*4936*//*4936*//*4937*/tvar/*<4937*/(/*4936*//*4938*/arg/*<4938*/)/*<4936*/(/*4936*//*4939*/al/*<4939*/)/*<4936*/)/*<4933*/(/*4933*//*4940*/l/*<4940*/)/*<4933*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4928');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4928*//*<4928*//*<4928*/)/*<4919*/;
{
let final = $target;
return /*4583*/(() => {const $target = /*5233*//*5233*//*5233*//*5234*/foldl/*<5234*/(/*5233*//*5235*/set$slnil/*<5235*/)/*<5233*/(/*5233*//*5236*/targs/*<5236*/)/*<5233*/(/*5233*//*5237*/(free) => /*5237*/($fn_arg) => /*5237*/(($target) => {
if ($target.type === ",") {
{
let arg = $target[0];
return /*5245*//*5245*//*5246*/set$sladd/*<5246*/(/*5245*//*5247*/free/*<5247*/)/*<5245*/(/*5245*//*5248*/arg/*<5248*/)/*<5245*/
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 5237');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<5237*//*<5237*//*<5237*/)/*<5233*/;
{
let free_set = $target;
return /*4583*/(() => {const $target = /*4622*//*4622*//*4622*//*4623*/foldl/*<4623*/(/*4622*//*4734*//*4734*//*4641*/$co/*<4641*/(/*4734*//*4739*/values/*<4739*/)/*<4734*/(/*4734*//*4735*/cons/*<4735*/)/*<4734*/)/*<4622*/(/*4622*//*4625*/constructors/*<4625*/)/*<4622*/(/*4622*//*4626*/($fn_arg) => /*4626*/(($target) => {
if ($target.type === ",") {
{
let values = $target[0];
{
let cons = $target[1];
return /*4626*/($fn_arg) => /*4626*/(($target) => {
if ($target.type === ",,,") {
{
let name = $target[0];
{
let nl = $target[1];
{
let args = $target[2];
{
let l = $target[3];
return /*4648*/(() => {const $target = /*5221*//*5221*//*5222*/map/*<5222*/(/*5221*//*5223*/args/*<5223*/)/*<5221*/(/*5221*//*5224*/(arg) => /*5228*//*5228*//*5229*/type_with_free/*<5229*/(/*5228*//*5230*/arg/*<5230*/)/*<5228*/(/*5228*//*5231*/free_set/*<5231*/)/*<5228*//*<5224*/)/*<5221*/;
{
let args = $target;
return /*4648*/(() => {const $target = /*4651*//*4651*//*4651*//*4659*/foldl/*<4659*/(/*4651*//*4660*/set$slnil/*<4660*/)/*<4651*/(/*4651*//*4661*/args/*<4661*/)/*<4651*/(/*4651*//*4662*/(free) => /*4662*/(arg) => /*4667*//*4667*//*4668*/set$slmerge/*<4668*/(/*4667*//*4669*/free/*<4669*/)/*<4667*/(/*4667*//*4670*//*4671*/type_free/*<4671*/(/*4670*//*4672*/arg/*<4672*/)/*<4670*/)/*<4667*//*<4662*//*<4662*/)/*<4651*/;
{
let free = $target;
return /*4741*//*4741*//*4743*/$co/*<4743*/(/*4741*//*4745*//*4745*//*4745*//*4746*/map$slset/*<4746*/(/*4745*//*4747*/values/*<4747*/)/*<4745*/(/*4745*//*4748*/name/*<4748*/)/*<4745*/(/*4745*//*4749*//*4749*//*4750*/scheme/*<4750*/(/*4749*//*4751*/free/*<4751*/)/*<4749*/(/*4749*//*4752*//*4752*//*4752*//*4756*/foldr/*<4756*/(/*4752*//*4757*/final/*<4757*/)/*<4752*/(/*4752*//*4782*/args/*<4782*/)/*<4752*/(/*4752*//*4783*/(body) => /*4783*/(arg) => /*4788*//*4788*//*4788*//*4789*/tfn/*<4789*/(/*4788*//*4790*/arg/*<4790*/)/*<4788*/(/*4788*//*4791*/body/*<4791*/)/*<4788*/(/*4788*//*4890*/l/*<4890*/)/*<4788*//*<4783*//*<4783*/)/*<4752*/)/*<4749*/)/*<4745*/)/*<4741*/(/*4741*//*4636*//*4636*//*4636*//*4637*/map$slset/*<4637*/(/*4636*//*4638*/cons/*<4638*/)/*<4636*/(/*4636*//*4639*/name/*<4639*/)/*<4636*/(/*4636*//*4640*//*4640*//*4640*//*4673*/tconstructor/*<4673*/(/*4640*//*4674*/free/*<4674*/)/*<4640*/(/*4640*//*4681*/args/*<4681*/)/*<4640*/(/*4640*//*4840*/final/*<4840*/)/*<4640*/)/*<4636*/)/*<4741*/
};
throw new Error('let pattern not matched 4680. ' + valueToString($target));})(/*!*/)/*<4648*/
};
throw new Error('let pattern not matched 5220. ' + valueToString($target));})(/*!*/)/*<4648*/
}
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4626');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4626*//*<4626*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4626');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<4626*//*<4626*/)/*<4622*/;
if ($target.type === ",") {
{
let values = $target[0];
{
let cons = $target[1];
return /*4682*//*4682*//*4682*//*4683*/tenv/*<4683*/(/*4682*//*4684*/values/*<4684*/)/*<4682*/(/*4682*//*4685*/cons/*<4685*/)/*<4682*/(/*4682*//*4686*//*4686*//*4686*//*4687*/map$slset/*<4687*/(/*4686*//*4688*/types/*<4688*/)/*<4686*/(/*4686*//*4689*/tname/*<4689*/)/*<4686*/(/*4686*//*4691*//*4692*/set$slfrom_list/*<4692*/(/*4691*//*4693*/names/*<4693*/)/*<4691*/)/*<4686*/)/*<4682*/
}
}
};
throw new Error('let pattern not matched 4731. ' + valueToString($target));})(/*!*/)/*<4583*/
};
throw new Error('let pattern not matched 5232. ' + valueToString($target));})(/*!*/)/*<4583*/
};
throw new Error('let pattern not matched 4918. ' + valueToString($target));})(/*!*/)/*<4583*/
};
throw new Error('let pattern not matched 4594. ' + valueToString($target));})(/*!*/)/*<4583*/
}
}
}
};
throw new Error('let pattern not matched 4586. ' + valueToString($target));})(/*!*/)/*<4583*/
}
}
}
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 4547');})(/*!*//*4549*/stmt/*<4549*/)/*<4547*//*<2197*//*<2197*/;

const several = /*5087*/(stmts) => /*5087*/(expr) => /*5087*/(tenv) => /*5094*/(() => {const $target = /*5098*//*5098*//*5098*//*5099*/foldl/*<5099*/(/*5098*//*5100*/tenv/*<5100*/)/*<5098*/(/*5098*//*5101*/stmts/*<5101*/)/*<5098*/(/*5098*//*5102*/infer_stmt/*<5102*/)/*<5098*/;
{
let env = $target;
return /*5109*//*5109*//*5110*/infer/*<5110*/(/*5109*//*5111*/env/*<5111*/)/*<5109*/(/*5109*//*5112*/expr/*<5112*/)/*<5109*/
};
throw new Error('let pattern not matched 5097. ' + valueToString($target));})(/*!*/)/*<5094*//*<5087*//*<5087*//*<5087*/;

const builtin_env = /*5253*//*5253*//*5253*//*5254*/foldl/*<5254*/(/*5253*//*5255*//*5255*//*5255*//*5281*/tenv/*<5281*/(/*5255*//*5282*//*5286*/map$slfrom_list/*<5286*/(/*5282*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5289*//*5289*//*5290*/$co/*<5290*/(/*5289*//*5291*/"+"/*<5291*/)/*<5289*/(/*5289*//*5293*//*5293*//*5294*/scheme/*<5294*/(/*5293*//*5295*/set$slnil/*<5295*/)/*<5293*/(/*5293*//*5296*//*5296*//*5296*//*5297*/tfn/*<5297*/(/*5296*//*5298*/tint/*<5298*/)/*<5296*/(/*5296*//*5299*//*5299*//*5299*//*5300*/tfn/*<5300*/(/*5299*//*5301*/tint/*<5301*/)/*<5299*/(/*5299*//*5302*/tint/*<5302*/)/*<5299*/(/*5299*//*5303*/-1/*<5303*/)/*<5299*/)/*<5296*/(/*5296*//*5304*/-1/*<5304*/)/*<5296*/)/*<5293*/)/*<5289*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5380*//*5380*//*5381*/$co/*<5381*/(/*5380*//*5382*/"-"/*<5382*/)/*<5380*/(/*5380*//*5384*//*5384*//*5385*/scheme/*<5385*/(/*5384*//*5386*/set$slnil/*<5386*/)/*<5384*/(/*5384*//*5387*//*5387*//*5387*//*5388*/tfn/*<5388*/(/*5387*//*5389*/tint/*<5389*/)/*<5387*/(/*5387*//*5390*//*5390*//*5390*//*5391*/tfn/*<5391*/(/*5390*//*5392*/tint/*<5392*/)/*<5390*/(/*5390*//*5393*/tint/*<5393*/)/*<5390*/(/*5390*//*5394*/-1/*<5394*/)/*<5390*/)/*<5387*/(/*5387*//*5395*/-1/*<5395*/)/*<5387*/)/*<5384*/)/*<5380*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5396*//*5396*//*5397*/$co/*<5397*/(/*5396*//*5398*/">"/*<5398*/)/*<5396*/(/*5396*//*5400*//*5400*//*5401*/scheme/*<5401*/(/*5400*//*5402*/set$slnil/*<5402*/)/*<5400*/(/*5400*//*5403*//*5403*//*5403*//*5404*/tfn/*<5404*/(/*5403*//*5405*/tint/*<5405*/)/*<5403*/(/*5403*//*5406*//*5406*//*5406*//*5407*/tfn/*<5407*/(/*5406*//*5408*/tint/*<5408*/)/*<5406*/(/*5406*//*5409*/tbool/*<5409*/)/*<5406*/(/*5406*//*5410*/-1/*<5410*/)/*<5406*/)/*<5403*/(/*5403*//*5411*/-1/*<5411*/)/*<5403*/)/*<5400*/)/*<5396*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5422*//*5422*//*5423*/$co/*<5423*/(/*5422*//*5424*/"<"/*<5424*/)/*<5422*/(/*5422*//*5426*//*5426*//*5427*/scheme/*<5427*/(/*5426*//*5428*/set$slnil/*<5428*/)/*<5426*/(/*5426*//*5429*//*5429*//*5429*//*5430*/tfn/*<5430*/(/*5429*//*5431*/tint/*<5431*/)/*<5429*/(/*5429*//*5432*//*5432*//*5432*//*5433*/tfn/*<5433*/(/*5432*//*5434*/tint/*<5434*/)/*<5432*/(/*5432*//*5435*/tbool/*<5435*/)/*<5432*/(/*5432*//*5436*/-1/*<5436*/)/*<5432*/)/*<5429*/(/*5429*//*5437*/-1/*<5437*/)/*<5429*/)/*<5426*/)/*<5422*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5438*//*5438*//*5439*/$co/*<5439*/(/*5438*//*5440*/"="/*<5440*/)/*<5438*/(/*5438*//*5442*//*5442*//*5443*/scheme/*<5443*/(/*5442*//*5444*/set$slnil/*<5444*/)/*<5442*/(/*5442*//*5445*//*5445*//*5445*//*5446*/tfn/*<5446*/(/*5445*//*5447*/tint/*<5447*/)/*<5445*/(/*5445*//*5448*//*5448*//*5448*//*5449*/tfn/*<5449*/(/*5448*//*5450*/tint/*<5450*/)/*<5448*/(/*5448*//*5451*/tbool/*<5451*/)/*<5448*/(/*5448*//*5452*/-1/*<5452*/)/*<5448*/)/*<5445*/(/*5445*//*5453*/-1/*<5453*/)/*<5445*/)/*<5442*/)/*<5438*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5454*//*5454*//*5455*/$co/*<5455*/(/*5454*//*5456*/">="/*<5456*/)/*<5454*/(/*5454*//*5458*//*5458*//*5459*/scheme/*<5459*/(/*5458*//*5460*/set$slnil/*<5460*/)/*<5458*/(/*5458*//*5461*//*5461*//*5461*//*5462*/tfn/*<5462*/(/*5461*//*5463*/tint/*<5463*/)/*<5461*/(/*5461*//*5464*//*5464*//*5464*//*5465*/tfn/*<5465*/(/*5464*//*5466*/tint/*<5466*/)/*<5464*/(/*5464*//*5467*/tbool/*<5467*/)/*<5464*/(/*5464*//*5468*/-1/*<5468*/)/*<5464*/)/*<5461*/(/*5461*//*5469*/-1/*<5469*/)/*<5461*/)/*<5458*/)/*<5454*/)/*<5287*/(/*5287*//*5287*//*5287*//*5287*/cons/*<5287*/(/*5287*//*5470*//*5470*//*5471*/$co/*<5471*/(/*5470*//*5472*/"<="/*<5472*/)/*<5470*/(/*5470*//*5474*//*5474*//*5475*/scheme/*<5475*/(/*5474*//*5476*/set$slnil/*<5476*/)/*<5474*/(/*5474*//*5477*//*5477*//*5477*//*5478*/tfn/*<5478*/(/*5477*//*5479*/tint/*<5479*/)/*<5477*/(/*5477*//*5480*//*5480*//*5480*//*5481*/tfn/*<5481*/(/*5480*//*5482*/tint/*<5482*/)/*<5480*/(/*5480*//*5483*/tbool/*<5483*/)/*<5480*/(/*5480*//*5484*/-1/*<5484*/)/*<5480*/)/*<5477*/(/*5477*//*5485*/-1/*<5485*/)/*<5477*/)/*<5474*/)/*<5470*/)/*<5287*/(/*5287*//*5287*/nil/*<5287*/)/*<5287*/)/*<5287*/)/*<5287*/)/*<5287*/)/*<5287*/)/*<5287*/)/*<5287*/)/*<5282*/)/*<5255*/(/*5255*//*5285*/map$slnil/*<5285*/)/*<5255*/(/*5255*//*5284*/map$slnil/*<5284*/)/*<5255*/)/*<5253*/(/*5253*//*5256*//*5256*//*5256*/cons/*<5256*/(/*5256*//*5258*/{"0":"array","1":5264,"2":{"0":{"0":"a","1":5265,"type":","},"1":{"type":"nil"},"type":"cons"},"3":{"0":{"0":"cons","1":5267,"2":{"0":{"0":"a","1":5268,"type":"tcon"},"1":{"0":{"0":{"0":"array","1":5270,"type":"tcon"},"1":{"0":"a","1":5272,"type":"tcon"},"2":5269,"type":"tapp"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"3":5266,"type":",,,"},"1":{"0":{"0":"nil","1":5274,"2":{"type":"nil"},"3":5273,"type":",,,"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"4":5261,"type":"sdeftype"}/*<5258*/)/*<5256*/(/*5256*//*5256*//*5256*//*5256*/cons/*<5256*/(/*5256*//*5313*/{"0":",","1":5319,"2":{"0":{"0":"a","1":5320,"type":","},"1":{"0":{"0":"b","1":5321,"type":","},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"3":{"0":{"0":",","1":5323,"2":{"0":{"0":"a","1":5324,"type":"tcon"},"1":{"0":{"0":"b","1":5325,"type":"tcon"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"3":5322,"type":",,,"},"1":{"type":"nil"},"type":"cons"},"4":5316,"type":"sdeftype"}/*<5313*/)/*<5256*/(/*5256*//*5256*//*5256*//*5256*/cons/*<5256*/(/*5256*//*5329*/{"0":",,","1":5335,"2":{"0":{"0":"a","1":5336,"type":","},"1":{"0":{"0":"b","1":5337,"type":","},"1":{"0":{"0":"c","1":5338,"type":","},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"3":{"0":{"0":",,","1":5340,"2":{"0":{"0":"a","1":5343,"type":"tcon"},"1":{"0":{"0":"b","1":5344,"type":"tcon"},"1":{"0":{"0":"c","1":5345,"type":"tcon"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"3":5339,"type":",,,"},"1":{"type":"nil"},"type":"cons"},"4":5332,"type":"sdeftype"}/*<5329*/)/*<5256*/(/*5256*//*5256*//*5256*//*5256*/cons/*<5256*/(/*5256*//*5346*/{"0":",,,","1":5351,"2":{"0":{"0":"a","1":5352,"type":","},"1":{"0":{"0":"b","1":5353,"type":","},"1":{"0":{"0":"c","1":5354,"type":","},"1":{"0":{"0":"d","1":5355,"type":","},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"3":{"0":{"0":",,,","1":5357,"2":{"0":{"0":"a","1":5358,"type":"tcon"},"1":{"0":{"0":"b","1":5359,"type":"tcon"},"1":{"0":{"0":"c","1":5360,"type":"tcon"},"1":{"0":{"0":"d","1":5361,"type":"tcon"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"3":5356,"type":",,,"},"1":{"type":"nil"},"type":"cons"},"4":5348,"type":"sdeftype"}/*<5346*/)/*<5256*/(/*5256*//*5256*//*5256*//*5256*/cons/*<5256*/(/*5256*//*5362*/{"0":",,,,","1":5367,"2":{"0":{"0":"a","1":5368,"type":","},"1":{"0":{"0":"b","1":5369,"type":","},"1":{"0":{"0":"c","1":5370,"type":","},"1":{"0":{"0":"d","1":5371,"type":","},"1":{"0":{"0":"e","1":5372,"type":","},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"3":{"0":{"0":",,,,","1":5374,"2":{"0":{"0":"a","1":5375,"type":"tcon"},"1":{"0":{"0":"b","1":5376,"type":"tcon"},"1":{"0":{"0":"c","1":5377,"type":"tcon"},"1":{"0":{"0":"d","1":5378,"type":"tcon"},"1":{"0":{"0":"e","1":5379,"type":"tcon"},"1":{"type":"nil"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"type":"cons"},"3":5373,"type":",,,"},"1":{"type":"nil"},"type":"cons"},"4":5364,"type":"sdeftype"}/*<5362*/)/*<5256*/(/*5256*//*5256*/nil/*<5256*/)/*<5256*/)/*<5256*/)/*<5256*/)/*<5256*/)/*<5256*/)/*<5253*/(/*5253*//*5257*/infer_stmt/*<5257*/)/*<5253*/;

const typecheck = (v0) => (v1) => (v2) => (v3) => ({type: "typecheck", 0: v0, 1: v1, 2: v2, 3: v3});
const subst_to_string = /*6304*/(subst) => /*6330*//*6330*//*6331*/join/*<6331*/(/*6330*//*6334*/"\n"/*<6334*/)/*<6330*/(/*6330*//*6313*//*6313*//*6314*/map/*<6314*/(/*6313*//*6310*//*6311*/map$slto_list/*<6311*/(/*6310*//*6312*/subst/*<6312*/)/*<6310*/)/*<6313*/(/*6313*//*6315*/($fn_arg) => /*6315*/(($target) => {
if ($target.type === ",") {
{
let k = $target[0];
{
let v = $target[1];
return /*6322*/`${/*6324*/k/*<6324*/} : ${/*6326*//*6328*/type_to_string_raw/*<6328*/(/*6326*//*6329*/v/*<6329*/)/*<6326*/}`/*<6322*/
}
}
}
throw new Error('failed to match ' + jsonify($target) + '. Loc: 6315');})(/*!*//*-1*/$fn_arg/*<-1*/)/*<6315*//*<6315*/)/*<6313*/)/*<6330*//*<6304*/;

return /*4983*//*4983*//*4983*//*4983*//*5008*/typecheck/*<5008*/(/*4983*//*5009*/builtin_env/*<5009*/)/*<4983*/(/*4983*//*5010*/infer_stmt/*<5010*/)/*<4983*/(/*4983*//*5011*/infer/*<5011*/)/*<4983*/(/*4983*//*5012*/type_to_string/*<5012*/)/*<4983*/