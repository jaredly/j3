{"map":{"0":{"type":"rich-text","contents":[{"id":"8fd26af0-7082-4132-96f0-eb9bd9a651aa","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"Bootstrap (js) parser + evaluator","styles":{}}],"children":[]}],"loc":0},"2":{"type":"rich-text","contents":[{"id":"68285dbb-f6ad-428e-a83c-89f93b2af3cf","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because we're using a structured editor for our language, the job of parsing is quite a bit simpler; we just need to turn the CST into the AST, instead of messing around with tokenizing, counting parentheses, etc.","styles":{}}],"children":[]}],"loc":2},"8":{"type":"raw-code","lang":"javascript","raw":"({type: 'fns', prelude,\n  compile, compile_stmt,\n  parse_stmt: parseStmt, parse_expr: parse,\n  names,\n  externals_stmt: externals,\n  externals_expr: e => externals_expr(e, []),\n  fromNode: x => x,\n  toNode: x => x})","loc":8},"17":{"type":"blank","loc":17},"21":{"type":"raw-code","lang":"javascript","raw":"evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21},"23":{"type":"raw-code","lang":"javascript","raw":"c = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23},"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nlist = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}","loc":25},"27":{"type":"raw-code","lang":"javascript","raw":"cons = (a, b) => ({type: 'cons', 0: a, 1: b})","loc":27},"29":{"type":"raw-code","lang":"javascript","raw":"nil = {type: 'nil'}","loc":29},"33":{"type":"raw-code","lang":"javascript","raw":"parse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33},"35":{"type":"rich-text","contents":[{"id":"d75f4bc9-5f31-4967-b242-4c02865ab461","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Tree-Walking Evaluator","styles":{}}],"children":[]}],"loc":35},"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42},"57":{"type":"raw-code","lang":"javascript","raw":"pair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57},"68":{"type":"raw-code","lang":"javascript","raw":"forms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68},"70":{"type":"raw-code","lang":"javascript","raw":"foldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70},"76":{"type":"raw-code","lang":"javascript","raw":"parsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76},"78":{"type":"list","values":[80,81,82],"loc":78},"80":{"type":"identifier","text":",","loc":80},"81":{"type":"raw-code","lang":"javascript","raw":"v => valueToString(parse(v))","loc":81},"82":{"type":"array","values":[83,116,1202,1173,1165,1189,127,152,170,191,784],"loc":82},"83":{"type":"list","values":[84,88,1188],"loc":83},"84":{"type":"identifier","text":",","loc":84},"86":{"type":"blank","loc":86},"87":{"type":"identifier","text":"@","loc":87},"88":{"type":"list","values":[87,89],"loc":88},"89":{"type":"identifier","text":"1","loc":89},"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98},"109":{"type":"raw-code","lang":"javascript","raw":"unwrapList(list([1,2,3]))","loc":109},"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111},"116":{"type":"list","values":[117,1163,1172],"loc":116},"117":{"type":"identifier","text":",","loc":117},"118":{"type":"array","values":[],"loc":118},"119":{"type":"blank","loc":119},"127":{"type":"list","values":[128,129,1506],"loc":127},"128":{"type":"identifier","text":",","loc":128},"129":{"type":"list","values":[131,132,133],"loc":129},"130":{"type":"blank","loc":130},"131":{"type":"identifier","text":"fn","loc":131},"132":{"type":"array","values":[136,1505],"loc":132},"133":{"type":"identifier","text":"1","loc":133},"136":{"type":"identifier","text":"a","loc":136},"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149},"152":{"type":"list","values":[153,154,1184],"loc":152},"153":{"type":"identifier","text":",","loc":153},"154":{"type":"list","values":[156,157],"loc":154},"155":{"type":"blank","loc":155},"156":{"type":"identifier","text":"@","loc":156},"157":{"type":"list","values":[160,161,162,163,164,166],"loc":157},"159":{"type":"blank","loc":159},"160":{"type":"identifier","text":"match","loc":160},"161":{"type":"identifier","text":"x","loc":161},"162":{"type":"identifier","text":"1","loc":162},"163":{"type":"identifier","text":"2","loc":163},"164":{"type":"string","first":165,"templates":[],"loc":164},"165":{"type":"stringText","loc":165,"text":"hi"},"166":{"type":"identifier","text":"1","loc":166},"170":{"type":"list","values":[171,172,1502],"loc":170},"171":{"type":"identifier","text":",","loc":171},"172":{"type":"list","values":[174,175],"loc":172},"173":{"type":"blank","loc":173},"174":{"type":"identifier","text":"@","loc":174},"175":{"type":"list","values":[178,179,186],"loc":175},"177":{"type":"blank","loc":177},"178":{"type":"identifier","text":"let","loc":178},"179":{"type":"array","values":[180,185],"loc":179},"180":{"type":"list","values":[181,182,184],"loc":180},"181":{"type":"identifier","text":",","loc":181},"182":{"type":"identifier","text":"a","loc":182},"184":{"type":"identifier","text":"b","loc":184},"185":{"type":"identifier","text":"c","loc":185},"186":{"type":"identifier","text":"d","loc":186},"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\np = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188},"191":{"type":"list","values":[192,193,1503],"loc":191},"192":{"type":"identifier","text":",","loc":192},"193":{"type":"list","values":[195,196],"loc":193},"194":{"type":"blank","loc":194},"195":{"type":"identifier","text":"@","loc":195},"196":{"type":"list","values":[200,201,209],"loc":196},"198":{"type":"blank","loc":198},"200":{"type":"identifier","text":"let","loc":200},"201":{"type":"array","values":[202,208],"loc":201},"202":{"type":"array","values":[203,207],"loc":202},"203":{"type":"identifier","text":"a","loc":203},"204":{"type":"identifier","text":"b","loc":204},"207":{"type":"spread","contents":204,"loc":207},"208":{"type":"identifier","text":"c","loc":208},"209":{"type":"identifier","text":"d","loc":209},"211":{"type":"rich-text","contents":[{"id":"b188e96a-7452-4d88-8430-9cf830c2407c","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Parser","styles":{}}],"children":[]}],"loc":211},"213":{"type":"rich-text","contents":[{"id":"8e76a41f-02ae-4fa5-beb2-1c769056e297","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Prelude","styles":{}}],"children":[]},{"id":"eee0519b-267f-4dba-b79e-d5c8d1cac4ac","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some basic handy functions","styles":{}}],"children":[]}],"loc":213},"215":{"type":"rich-text","contents":[{"id":"ad2112fc-475c-4792-a999-68dc69e2495b","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Expressions","styles":{}}],"children":[]}],"loc":215},"217":{"type":"rich-text","contents":[{"id":"93144679-d97b-45e4-af01-c151bc706b2e","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Patterns","styles":{}}],"children":[]}],"loc":217},"219":{"type":"rich-text","contents":[{"id":"9a25177e-d6f3-4440-9188-01447ef87df0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Statements","styles":{}}],"children":[]}],"loc":219},"221":{"type":"raw-code","lang":"javascript","raw":"parseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221},"225":{"type":"raw-code","lang":"javascript","raw":"stmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225},"229":{"type":"list","values":[231,232,233],"loc":229},"231":{"type":"identifier","text":",","loc":231},"232":{"type":"raw-code","lang":"javascript","raw":"v => valueToString(parseStmt(v))","loc":232},"233":{"type":"array","values":[234,240,1006,256],"loc":233},"234":{"type":"list","values":[235,236,1289],"loc":234},"235":{"type":"identifier","text":",","loc":235},"236":{"type":"list","values":[237,238],"loc":236},"237":{"type":"identifier","text":"@","loc":237},"238":{"type":"identifier","text":"1","loc":238},"239":{"type":"blank","loc":239},"240":{"type":"list","values":[241,242,1290],"loc":240},"241":{"type":"identifier","text":",","loc":241},"242":{"type":"list","values":[244,245],"loc":242},"243":{"type":"blank","loc":243},"244":{"type":"identifier","text":"@","loc":244},"245":{"type":"list","values":[252,253,254],"loc":245},"252":{"type":"identifier","text":"def","loc":252},"253":{"type":"identifier","text":"hi","loc":253},"254":{"type":"identifier","text":"10","loc":254},"256":{"type":"list","values":[257,258,1523],"loc":256},"257":{"type":"identifier","text":",","loc":257},"258":{"type":"list","values":[260,261],"loc":258},"259":{"type":"blank","loc":259},"260":{"type":"identifier","text":"@","loc":260},"261":{"type":"list","values":[264,265,266,270],"loc":261},"263":{"type":"blank","loc":263},"264":{"type":"identifier","text":"defn","loc":264},"265":{"type":"identifier","text":"lol","loc":265},"266":{"type":"array","values":[268,269],"loc":266},"268":{"type":"identifier","text":"a","loc":268},"269":{"type":"identifier","text":"b","loc":269},"270":{"type":"list","values":[271,272,273],"loc":270},"271":{"type":"identifier","text":"+","loc":271},"272":{"type":"identifier","text":"a","loc":272},"273":{"type":"identifier","text":"b","loc":273},"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286},"335":{"type":"raw-code","lang":"javascript","raw":"evalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335},"369":{"type":"list","values":[371,372,373],"loc":369},"371":{"type":"identifier","text":",","loc":371},"372":{"type":"raw-code","lang":"javascript","raw":"v => evaluate(parse(v), {'$co': a => b => pair(a,b)})","loc":372},"373":{"type":"array","values":[374,388,407,1568,539,558,582],"loc":373},"374":{"type":"list","values":[375,376,387],"loc":374},"375":{"type":"identifier","text":",","loc":375},"376":{"type":"list","values":[377,378],"loc":376},"377":{"type":"identifier","text":"@","loc":377},"378":{"type":"list","values":[381,386],"loc":378},"381":{"type":"list","values":[382,383,385],"loc":381},"382":{"type":"identifier","text":"fn","loc":382},"383":{"type":"array","values":[384],"loc":383},"384":{"type":"identifier","text":"x","loc":384},"385":{"type":"identifier","text":"1","loc":385},"386":{"type":"identifier","text":"0","loc":386},"387":{"type":"identifier","text":"1","loc":387},"388":{"type":"list","values":[389,395,391],"loc":388},"389":{"type":"identifier","text":",","loc":389},"390":{"type":"list","values":[392,393,394],"loc":390},"391":{"type":"identifier","text":"1","loc":391},"392":{"type":"identifier","text":",","loc":392},"393":{"type":"identifier","text":"1","loc":393},"394":{"type":"identifier","text":"2","loc":394},"395":{"type":"list","values":[396,397],"loc":395},"396":{"type":"identifier","text":"@","loc":396},"397":{"type":"list","values":[398,400,406],"loc":397},"398":{"type":"identifier","text":"let","loc":398},"399":{"type":"blank","loc":399},"400":{"type":"array","values":[402,390],"loc":400},"402":{"type":"list","values":[403,404,405],"loc":402},"403":{"type":"identifier","text":",","loc":403},"404":{"type":"identifier","text":"x","loc":404},"405":{"type":"identifier","text":"_","loc":405},"406":{"type":"identifier","text":"x","loc":406},"407":{"type":"list","values":[408,409,1298],"loc":407},"408":{"type":"identifier","text":",","loc":408},"409":{"type":"list","values":[412,413],"loc":409},"410":{"type":"blank","loc":410},"412":{"type":"identifier","text":"@","loc":412},"413":{"type":"list","values":[414,415,416,417,418,419],"loc":413},"414":{"type":"identifier","text":"match","loc":414},"415":{"type":"identifier","text":"3","loc":415},"416":{"type":"identifier","text":"1","loc":416},"417":{"type":"identifier","text":"2","loc":417},"418":{"type":"identifier","text":"3","loc":418},"419":{"type":"identifier","text":"10","loc":419},"420":{"type":"raw-code","lang":"javascript","raw":"evaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420},"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422},"455":{"type":"list","values":[457,458,459],"loc":455},"457":{"type":"identifier","text":",","loc":457},"458":{"type":"raw-code","lang":"javascript","raw":"evalStmts","loc":458},"459":{"type":"array","values":[460,468,478,495,1333,520,756,1646],"loc":459},"460":{"type":"list","values":[461,462,1309],"loc":460},"461":{"type":"identifier","text":",","loc":461},"462":{"type":"array","values":[466],"loc":462},"463":{"type":"blank","loc":463},"466":{"type":"identifier","text":"0","loc":466},"468":{"type":"list","values":[469,470,1308],"loc":468},"469":{"type":"identifier","text":",","loc":469},"470":{"type":"array","values":[472,476],"loc":470},"471":{"type":"blank","loc":471},"472":{"type":"list","values":[473,474,475],"loc":472},"473":{"type":"identifier","text":"def","loc":473},"474":{"type":"identifier","text":"n","loc":474},"475":{"type":"identifier","text":"10","loc":475},"476":{"type":"identifier","text":"n","loc":476},"478":{"type":"list","values":[479,480,1304],"loc":478},"479":{"type":"identifier","text":",","loc":479},"480":{"type":"array","values":[482,491],"loc":480},"481":{"type":"blank","loc":481},"482":{"type":"list","values":[483,484,485,487],"loc":482},"483":{"type":"identifier","text":"defn","loc":483},"484":{"type":"identifier","text":"hi","loc":484},"485":{"type":"array","values":[486],"loc":485},"486":{"type":"identifier","text":"x","loc":486},"487":{"type":"list","values":[488,489,490],"loc":487},"488":{"type":"identifier","text":",","loc":488},"489":{"type":"identifier","text":"x","loc":489},"490":{"type":"identifier","text":"2","loc":490},"491":{"type":"list","values":[492,493],"loc":491},"492":{"type":"identifier","text":"hi","loc":492},"493":{"type":"identifier","text":"5","loc":493},"495":{"type":"list","values":[496,497,1305],"loc":495},"496":{"type":"identifier","text":",","loc":496},"497":{"type":"array","values":[516],"loc":497},"498":{"type":"blank","loc":498},"499":{"type":"blank","loc":499},"506":{"type":"blank","loc":506},"516":{"type":"list","values":[517,518],"loc":516},"517":{"type":"identifier","text":"some","loc":517},"518":{"type":"identifier","text":"10","loc":518},"520":{"type":"list","values":[521,522,1306],"loc":520},"521":{"type":"identifier","text":",","loc":521},"522":{"type":"array","values":[524,532],"loc":522},"523":{"type":"blank","loc":523},"524":{"type":"list","values":[525,526,527],"loc":524},"525":{"type":"identifier","text":"deftype","loc":525},"526":{"type":"identifier","text":"lots","loc":526},"527":{"type":"list","values":[528,529,530,531],"loc":527},"528":{"type":"identifier","text":"lol","loc":528},"529":{"type":"identifier","text":"a","loc":529},"530":{"type":"identifier","text":"b","loc":530},"531":{"type":"identifier","text":"c","loc":531},"532":{"type":"list","values":[533,534,535,536],"loc":532},"533":{"type":"identifier","text":"lol","loc":533},"534":{"type":"identifier","text":"1","loc":534},"535":{"type":"identifier","text":"true","loc":535},"536":{"type":"string","first":537,"templates":[],"loc":536},"537":{"type":"stringText","loc":537,"text":"hi"},"539":{"type":"list","values":[540,541,542],"loc":539},"540":{"type":"identifier","text":",","loc":540},"541":{"type":"list","values":[544,545],"loc":541},"542":{"type":"string","first":550,"templates":[],"loc":542},"543":{"type":"stringText","loc":543,"text":""},"544":{"type":"identifier","text":"@","loc":544},"545":{"type":"string","first":546,"templates":[{"expr":548,"suffix":549}],"loc":545},"546":{"type":"stringText","loc":546,"text":"hi "},"548":{"type":"identifier","text":"1","loc":548},"549":{"type":"stringText","text":".","loc":549},"550":{"type":"stringText","loc":550,"text":"hi 1."},"553":{"type":"stringText","loc":553,"text":""},"558":{"type":"list","values":[559,563,561],"loc":558},"559":{"type":"identifier","text":",","loc":559},"560":{"type":"string","first":562,"templates":[],"loc":560},"561":{"type":"string","first":565,"templates":[],"loc":561},"562":{"type":"stringText","loc":562,"text":"hi"},"563":{"type":"list","values":[564,560],"loc":563},"564":{"type":"identifier","text":"@","loc":564},"565":{"type":"stringText","loc":565,"text":"hi"},"570":{"type":"raw-code","lang":"javascript","raw":"makePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570},"572":{"type":"raw-code","lang":"javascript","raw":"prelude = makePrelude({evaluate,evaluateStmt,unwrapList,constrFn,sanitize,sanMap,evalPat,kwds,unescapeSlashes}) ","loc":572},"576":{"type":"blank","loc":576},"582":{"type":"list","values":[583,584,1297],"loc":582},"583":{"type":"identifier","text":",","loc":583},"584":{"type":"list","values":[587,588],"loc":584},"585":{"type":"blank","loc":585},"587":{"type":"identifier","text":"@","loc":587},"588":{"type":"list","values":[589,590,591],"loc":588},"589":{"type":"identifier","text":",","loc":589},"590":{"type":"identifier","text":"1","loc":590},"591":{"type":"identifier","text":"2","loc":591},"593":{"type":"raw-code","lang":"javascript","raw":"compile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593},"595":{"type":"raw-code","lang":"javascript","raw":"compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595},"597":{"type":"rich-text","contents":[{"id":"e8800480-68f3-4e7e-99c1-03c3b168698b","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Analysis","styles":{}}],"children":[]}],"loc":597},"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599},"601":{"type":"list","values":[603,615,616],"loc":601},"603":{"type":"identifier","text":",","loc":603},"606":{"type":"identifier","text":",","loc":606},"611":{"type":"raw-code","lang":"javascript","raw":"externals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611},"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613},"615":{"type":"raw-code","lang":"javascript","raw":"v =>(externals(parseStmt(v)))","loc":615},"616":{"type":"array","values":[617,631,646,656,673,814],"loc":616},"617":{"type":"list","values":[606,619,1049],"loc":617},"618":{"type":"identifier","text":"@","loc":618},"619":{"type":"list","values":[618,620],"loc":619},"620":{"type":"identifier","text":"lol","loc":620},"621":{"type":"blank","loc":621},"630":{"type":"stringText","loc":630,"text":"[[\\\"lol\\\", (value), 620]]"},"631":{"type":"list","values":[632,633,1051],"loc":631},"632":{"type":"identifier","text":",","loc":632},"633":{"type":"list","values":[635,636],"loc":633},"634":{"type":"blank","loc":634},"635":{"type":"identifier","text":"@","loc":635},"636":{"type":"list","values":[637,638,640],"loc":636},"637":{"type":"identifier","text":"fn","loc":637},"638":{"type":"array","values":[644],"loc":638},"639":{"type":"identifier","text":",","loc":639},"640":{"type":"list","values":[641,642],"loc":640},"641":{"type":"identifier","text":"+","loc":641},"642":{"type":"identifier","text":"x","loc":642},"644":{"type":"list","values":[639,645],"loc":644},"645":{"type":"identifier","text":"x","loc":645},"646":{"type":"list","values":[647,648,1055],"loc":646},"647":{"type":"identifier","text":",","loc":647},"648":{"type":"list","values":[650,651],"loc":648},"649":{"type":"blank","loc":649},"650":{"type":"identifier","text":"@","loc":650},"651":{"type":"string","first":652,"templates":[{"expr":653,"suffix":654}],"loc":651},"652":{"type":"stringText","loc":652,"text":"hi "},"653":{"type":"identifier","text":"x","loc":653},"654":{"type":"stringText","text":"","loc":654},"656":{"type":"list","values":[657,658,1054],"loc":656},"657":{"type":"identifier","text":",","loc":657},"658":{"type":"list","values":[660,661],"loc":658},"659":{"type":"blank","loc":659},"660":{"type":"identifier","text":"@","loc":660},"661":{"type":"list","values":[662,663,664,670],"loc":661},"662":{"type":"identifier","text":"match","loc":662},"663":{"type":"identifier","text":"m","loc":663},"664":{"type":"list","values":[666,668,669],"loc":664},"665":{"type":"identifier","text":"+","loc":665},"666":{"type":"identifier","text":",","loc":666},"668":{"type":"identifier","text":"a","loc":668},"669":{"type":"identifier","text":"b","loc":669},"670":{"type":"list","values":[665,671],"loc":670},"671":{"type":"identifier","text":"a","loc":671},"673":{"type":"list","values":[674,675,1052],"loc":673},"674":{"type":"identifier","text":",","loc":674},"675":{"type":"list","values":[677,678],"loc":675},"676":{"type":"blank","loc":676},"677":{"type":"identifier","text":"@","loc":677},"678":{"type":"list","values":[681,682,685],"loc":678},"680":{"type":"blank","loc":680},"681":{"type":"identifier","text":"let","loc":681},"682":{"type":"array","values":[683,684],"loc":682},"683":{"type":"identifier","text":"x","loc":683},"684":{"type":"identifier","text":"2","loc":684},"685":{"type":"list","values":[686,687],"loc":685},"686":{"type":"identifier","text":"+","loc":686},"687":{"type":"identifier","text":"x","loc":687},"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689},"693":{"type":"list","values":[696,697,699],"loc":693},"696":{"type":"identifier","text":",","loc":696},"697":{"type":"raw-code","lang":"javascript","raw":"v => names(parseStmt(v))","loc":697},"699":{"type":"array","values":[700,707,717],"loc":699},"700":{"type":"list","values":[701,702,1047],"loc":700},"701":{"type":"identifier","text":",","loc":701},"702":{"type":"list","values":[703,704],"loc":702},"703":{"type":"identifier","text":"@","loc":703},"704":{"type":"identifier","text":"hi","loc":704},"705":{"type":"blank","loc":705},"707":{"type":"list","values":[708,709,1056],"loc":707},"708":{"type":"identifier","text":",","loc":708},"709":{"type":"list","values":[711,712],"loc":709},"710":{"type":"blank","loc":710},"711":{"type":"identifier","text":"@","loc":711},"712":{"type":"list","values":[713,714,715],"loc":712},"713":{"type":"identifier","text":"def","loc":713},"714":{"type":"identifier","text":"x","loc":714},"715":{"type":"identifier","text":"10","loc":715},"717":{"type":"list","values":[718,719,1057],"loc":717},"718":{"type":"identifier","text":",","loc":718},"719":{"type":"list","values":[721,722],"loc":719},"720":{"type":"blank","loc":720},"721":{"type":"identifier","text":"@","loc":721},"722":{"type":"list","values":[723,724,727,732],"loc":722},"723":{"type":"identifier","text":"deftype","loc":723},"724":{"type":"list","values":[725,726],"loc":724},"725":{"type":"identifier","text":"option","loc":725},"726":{"type":"identifier","text":"x","loc":726},"727":{"type":"list","values":[730,731],"loc":727},"729":{"type":"blank","loc":729},"730":{"type":"identifier","text":"some","loc":730},"731":{"type":"identifier","text":"x","loc":731},"732":{"type":"list","values":[733],"loc":732},"733":{"type":"identifier","text":"none","loc":733},"738":{"type":"raw-code","lang":"javascript","raw":"testCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738},"740":{"type":"list","values":[742,743],"loc":740},"742":{"type":"raw-code","lang":"javascript","raw":"testCompileStmt","loc":742},"743":{"type":"list","values":[744,747,748,750],"loc":743},"744":{"type":"identifier","text":"deftype","loc":744},"747":{"type":"identifier","text":"card","loc":747},"748":{"type":"list","values":[749],"loc":748},"749":{"type":"identifier","text":"red","loc":749},"750":{"type":"list","values":[751],"loc":750},"751":{"type":"identifier","text":"black","loc":751},"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754},"756":{"type":"list","values":[757,758,1307],"loc":756},"757":{"type":"identifier","text":",","loc":757},"758":{"type":"array","values":[760,770],"loc":758},"759":{"type":"blank","loc":759},"760":{"type":"list","values":[761,762,765],"loc":760},"761":{"type":"identifier","text":"deftype","loc":761},"762":{"type":"identifier","text":"a","loc":762},"765":{"type":"list","values":[767,768,769],"loc":765},"767":{"type":"identifier","text":"com,","loc":767},"768":{"type":"identifier","text":"1","loc":768},"769":{"type":"identifier","text":"2","loc":769},"770":{"type":"list","values":[771,772,773],"loc":770},"771":{"type":"identifier","text":"com,","loc":771},"772":{"type":"identifier","text":"1","loc":772},"773":{"type":"identifier","text":"2","loc":773},"775":{"type":"list","values":[1219,1220,1221],"loc":775},"784":{"type":"list","values":[785,786,1670],"loc":784},"785":{"type":"identifier","text":",","loc":785},"786":{"type":"list","values":[788,789],"loc":786},"787":{"type":"blank","loc":787},"788":{"type":"identifier","text":"@","loc":788},"789":{"type":"array","values":[790,794],"loc":789},"790":{"type":"identifier","text":"a","loc":790},"791":{"type":"identifier","text":"b","loc":791},"794":{"type":"spread","contents":791,"loc":794},"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803},"806":{"type":"raw-code","lang":"javascript","raw":"sanitize('for')","loc":806},"808":{"type":"raw-code","lang":"javascript","raw":"sanMap = {\n    // '$$$$' gets interpreted by replaceAll as '$$', for reasons\n    $: '$$$$',\n    '-': '_',\n    '+': '$pl',\n    '*': '$ti',\n    '=': '$eq',\n    '>': '$gt',\n    '<': '$lt',\n    \"'\": '$qu',\n    '\"': '$dq',\n    ',': '$co',\n    '/': '$sl',\n    ';': '$semi',\n    '@': '$at',\n    '!': '$ex',\n    '|': '$bar',\n    '()': '$unit',\n    '?': '$qe',\n  };\n","loc":808},"810":{"type":"raw-code","lang":"javascript","raw":"kwds = (() => {\n  const kwds =\n    'case new var const let if else return super break while for default';\n  const rx = [];\n  return kwds.split(' ')\n})();\n","loc":810},"814":{"type":"list","values":[815,816,1053],"loc":814},"815":{"type":"identifier","text":",","loc":815},"816":{"type":"list","values":[818,837],"loc":816},"817":{"type":"blank","loc":817},"818":{"type":"identifier","text":"@","loc":818},"819":{"type":"blank","loc":819},"821":{"type":"blank","loc":821},"837":{"loc":837,"type":"list","values":[838,839,840,845]},"838":{"loc":838,"type":"identifier","text":"defn"},"839":{"loc":839,"type":"identifier","text":"pat-loop"},"840":{"loc":840,"type":"array","values":[841,842,843,844]},"841":{"loc":841,"type":"identifier","text":"target"},"842":{"loc":842,"type":"identifier","text":"args"},"843":{"loc":843,"type":"identifier","text":"i"},"844":{"loc":844,"type":"identifier","text":"inner"},"845":{"loc":845,"type":"list","values":[846,847,848,849,850,854]},"846":{"loc":846,"type":"identifier","text":"match"},"847":{"loc":847,"type":"identifier","text":"args"},"848":{"loc":848,"type":"array","values":[]},"849":{"loc":849,"type":"identifier","text":"inner"},"850":{"loc":850,"type":"array","values":[851,852]},"851":{"loc":851,"type":"identifier","text":"arg"},"852":{"loc":852,"type":"spread","contents":853},"853":{"loc":853,"type":"identifier","text":"rest"},"854":{"loc":854,"type":"list","values":[855,856,857,863]},"855":{"loc":855,"type":"identifier","text":"compile-pat"},"856":{"loc":856,"type":"identifier","text":"arg"},"857":{"loc":857,"type":"string","first":858,"templates":[{"expr":859,"suffix":860},{"expr":861,"suffix":862}]},"858":{"loc":858,"type":"stringText","text":""},"859":{"loc":859,"type":"identifier","text":"target"},"860":{"loc":860,"type":"stringText","text":"["},"861":{"loc":861,"type":"identifier","text":"i"},"862":{"loc":862,"type":"stringText","text":"]"},"863":{"loc":863,"type":"list","values":[864,865,866,867,871]},"864":{"loc":864,"type":"identifier","text":"pat-loop"},"865":{"loc":865,"type":"identifier","text":"target"},"866":{"loc":866,"type":"identifier","text":"rest"},"867":{"loc":867,"type":"list","values":[868,869,870]},"868":{"loc":868,"type":"identifier","text":"+"},"869":{"loc":869,"type":"identifier","text":"i"},"870":{"loc":870,"type":"identifier","text":"1"},"871":{"loc":871,"type":"identifier","text":"inner"},"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872},"879":{"loc":879,"type":"list","values":[880,881,884,886]},"880":{"loc":880,"type":"identifier","text":"deftype"},"881":{"loc":881,"type":"list","values":[882,883]},"882":{"loc":882,"type":"identifier","text":"list"},"883":{"loc":883,"type":"identifier","text":"a"},"884":{"loc":884,"type":"list","values":[885]},"885":{"loc":885,"type":"identifier","text":"nil"},"886":{"loc":886,"type":"list","values":[887,888,889]},"887":{"loc":887,"type":"identifier","text":"cons"},"888":{"loc":888,"type":"identifier","text":"a"},"889":{"loc":889,"type":"list","values":[890,891]},"890":{"loc":890,"type":"identifier","text":"list"},"891":{"loc":891,"type":"identifier","text":"a"},"893":{"loc":893,"type":"list","values":[894,895,896,899,902,906,910,915]},"894":{"loc":894,"type":"identifier","text":"deftype"},"895":{"loc":895,"type":"identifier","text":"expr"},"896":{"loc":896,"type":"list","values":[897,898]},"897":{"loc":897,"type":"identifier","text":"eprim"},"898":{"loc":898,"type":"identifier","text":"prim"},"899":{"loc":899,"type":"list","values":[900,901]},"900":{"loc":900,"type":"identifier","text":"evar"},"901":{"loc":901,"type":"identifier","text":"string"},"902":{"loc":902,"type":"list","values":[903,904,905]},"903":{"loc":903,"type":"identifier","text":"elambda"},"904":{"loc":904,"type":"identifier","text":"string"},"905":{"loc":905,"type":"identifier","text":"expr"},"906":{"loc":906,"type":"list","values":[907,908,909]},"907":{"loc":907,"type":"identifier","text":"eapp"},"908":{"loc":908,"type":"identifier","text":"expr"},"909":{"loc":909,"type":"identifier","text":"expr"},"910":{"loc":910,"type":"list","values":[911,912,913,914]},"911":{"loc":911,"type":"identifier","text":"elet"},"912":{"loc":912,"type":"identifier","text":"string"},"913":{"loc":913,"type":"identifier","text":"expr"},"914":{"loc":914,"type":"identifier","text":"expr"},"915":{"loc":915,"type":"list","values":[916,917,918]},"916":{"loc":916,"type":"identifier","text":"ematch"},"917":{"loc":917,"type":"identifier","text":"expr"},"918":{"loc":918,"type":"list","values":[919,920]},"919":{"loc":919,"type":"identifier","text":"list"},"920":{"loc":920,"type":"list","values":[921,922,923]},"921":{"loc":921,"type":"identifier","text":","},"922":{"loc":922,"type":"identifier","text":"pat"},"923":{"loc":923,"type":"identifier","text":"expr"},"925":{"loc":925,"type":"list","values":[926,927,928,931]},"926":{"loc":926,"type":"identifier","text":"deftype"},"927":{"loc":927,"type":"identifier","text":"prim"},"928":{"loc":928,"type":"list","values":[929,930]},"929":{"loc":929,"type":"identifier","text":"pint"},"930":{"loc":930,"type":"identifier","text":"int"},"931":{"loc":931,"type":"list","values":[932,933]},"932":{"loc":932,"type":"identifier","text":"pbool"},"933":{"loc":933,"type":"identifier","text":"bool"},"935":{"loc":935,"type":"list","values":[936,937,938,940,943,946,949]},"936":{"loc":936,"type":"identifier","text":"deftype"},"937":{"loc":937,"type":"identifier","text":"pat"},"938":{"loc":938,"type":"list","values":[939]},"939":{"loc":939,"type":"identifier","text":"pany"},"940":{"loc":940,"type":"list","values":[941,942]},"941":{"loc":941,"type":"identifier","text":"pvar"},"942":{"loc":942,"type":"identifier","text":"string"},"943":{"loc":943,"type":"list","values":[944,945]},"944":{"loc":944,"type":"identifier","text":"pprim"},"945":{"loc":945,"type":"identifier","text":"prim"},"946":{"loc":946,"type":"list","values":[947,948]},"947":{"loc":947,"type":"identifier","text":"pstr"},"948":{"loc":948,"type":"identifier","text":"string"},"949":{"loc":949,"type":"list","values":[950,951,952]},"950":{"loc":950,"type":"identifier","text":"pcon"},"951":{"loc":951,"type":"identifier","text":"string"},"952":{"loc":952,"type":"list","values":[953,954]},"953":{"loc":953,"type":"identifier","text":"list"},"954":{"loc":954,"type":"identifier","text":"string"},"956":{"loc":956,"type":"list","values":[957,958,959,962,966]},"957":{"loc":957,"type":"identifier","text":"deftype"},"958":{"loc":958,"type":"identifier","text":"type"},"959":{"loc":959,"type":"list","values":[960,961]},"960":{"loc":960,"type":"identifier","text":"tvar"},"961":{"loc":961,"type":"identifier","text":"int"},"962":{"loc":962,"type":"list","values":[963,964,965]},"963":{"loc":963,"type":"identifier","text":"tapp"},"964":{"loc":964,"type":"identifier","text":"type"},"965":{"loc":965,"type":"identifier","text":"type"},"966":{"loc":966,"type":"list","values":[967,968]},"967":{"loc":967,"type":"identifier","text":"tcon"},"968":{"loc":968,"type":"identifier","text":"string"},"970":{"loc":970,"type":"list","values":[971,972,973,984,988]},"971":{"loc":971,"type":"identifier","text":"deftype"},"972":{"loc":972,"type":"identifier","text":"stmt"},"973":{"loc":973,"type":"list","values":[974,975,976]},"974":{"loc":974,"type":"identifier","text":"sdeftype"},"975":{"loc":975,"type":"identifier","text":"string"},"976":{"loc":976,"type":"list","values":[977,978]},"977":{"loc":977,"type":"identifier","text":"list"},"978":{"loc":978,"type":"list","values":[979,980,981]},"979":{"loc":979,"type":"identifier","text":","},"980":{"loc":980,"type":"identifier","text":"string"},"981":{"loc":981,"type":"list","values":[982,983]},"982":{"loc":982,"type":"identifier","text":"list"},"983":{"loc":983,"type":"identifier","text":"type"},"984":{"loc":984,"type":"list","values":[985,986,987]},"985":{"loc":985,"type":"identifier","text":"sdef"},"986":{"loc":986,"type":"identifier","text":"string"},"987":{"loc":987,"type":"identifier","text":"expr"},"988":{"loc":988,"type":"list","values":[989,990]},"989":{"loc":989,"type":"identifier","text":"sexpr"},"990":{"loc":990,"type":"identifier","text":"expr"},"991":{"type":"comment-node","loc":991,"contents":879},"992":{"type":"comment-node","loc":992,"contents":893},"993":{"type":"comment-node","loc":993,"contents":925},"994":{"type":"comment-node","loc":994,"contents":935},"995":{"type":"comment-node","loc":995,"contents":956},"996":{"type":"comment-node","loc":996,"contents":970},"997":{"type":"raw-code","lang":"javascript","raw":"parseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997},"1006":{"type":"list","values":[1007,1008,1292],"loc":1006},"1007":{"type":"identifier","text":",","loc":1007},"1008":{"type":"list","values":[1010,1011],"loc":1008},"1009":{"type":"blank","loc":1009},"1010":{"type":"identifier","text":"@","loc":1010},"1011":{"type":"list","values":[1012,1013,1016,1019],"loc":1011},"1012":{"type":"identifier","text":"deftype","loc":1012},"1013":{"type":"list","values":[1014,1015],"loc":1013},"1014":{"type":"identifier","text":"option","loc":1014},"1015":{"type":"identifier","text":"a","loc":1015},"1016":{"type":"list","values":[1017,1018],"loc":1016},"1017":{"type":"identifier","text":"some","loc":1017},"1018":{"type":"identifier","text":"a","loc":1018},"1019":{"type":"list","values":[1020],"loc":1019},"1020":{"type":"identifier","text":"none","loc":1020},"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022},"1040":{"type":"blank","loc":1040},"1041":{"type":"blank","loc":1041},"1042":{"type":"blank","loc":1042},"1043":{"type":"blank","loc":1043},"1044":{"type":"blank","loc":1044},"1045":{"type":"blank","loc":1045},"1046":{"type":"blank","loc":1046},"1047":{"type":"raw-code","lang":"javascript","loc":1047,"raw":"[]"},"1048":{"type":"blank","loc":1048},"1049":{"type":"raw-code","lang":"javascript","loc":1049,"raw":"[{\"name\":\"lol\",\"kind\":\"value\",\"loc\":620}]"},"1051":{"type":"raw-code","lang":"javascript","loc":1051,"raw":"[{\"name\":\"+\",\"kind\":\"value\",\"loc\":641}]"},"1052":{"type":"raw-code","lang":"javascript","loc":1052,"raw":"[{\"name\":\"+\",\"kind\":\"value\",\"loc\":686}]"},"1053":{"type":"raw-code","lang":"javascript","loc":1053,"raw":"[{\"name\":\"compile-pat\",\"kind\":\"value\",\"loc\":855},{\"name\":\"+\",\"kind\":\"value\",\"loc\":868}]"},"1054":{"type":"raw-code","lang":"javascript","loc":1054,"raw":"[{\"name\":\"m\",\"kind\":\"value\",\"loc\":663},{\"name\":\"+\",\"kind\":\"value\",\"loc\":665}]"},"1055":{"type":"raw-code","lang":"javascript","loc":1055,"raw":"[{\"name\":\"x\",\"kind\":\"value\",\"loc\":653}]"},"1056":{"type":"raw-code","lang":"javascript","loc":1056,"raw":"[{\"name\":\"x\",\"kind\":\"value\",\"loc\":712}]"},"1057":{"type":"raw-code","lang":"javascript","loc":1057,"raw":"[{\"name\":\"some\",\"kind\":\"value\",\"loc\":730},{\"name\":\"none\",\"kind\":\"value\",\"loc\":733}]"},"1058":{"type":"rich-text","contents":[{"id":"ca311a47-d079-401a-9fb9-92d6be75db3e","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Packaging it up as a Compiler for the structured editor","styles":{}}],"children":[]}],"loc":1058},"1062":{"type":"list","values":[140],"loc":1062},"1063":{"type":"blank","loc":1063},"1064":{"type":"list","values":[140],"loc":1064},"1065":{"type":"blank","loc":1065},"1066":{"type":"list","values":[1068,1069,1070],"loc":1066},"1068":{"type":"identifier","text":",","loc":1068},"1069":{"type":"raw-code","lang":"javascript","raw":"n => valueToString(parsePrim(n) ?? \"not a prim\")","loc":1069},"1070":{"type":"array","values":[1071,1098,1082,1089],"loc":1070},"1071":{"type":"list","values":[1072,1079,1432],"loc":1071},"1072":{"type":"identifier","text":",","loc":1072},"1074":{"type":"blank","loc":1074},"1075":{"type":"identifier","text":"@","loc":1075},"1077":{"type":"raw-code","lang":"javascript","raw":"parsePrim({text: '23', loc: 10})","loc":1077},"1079":{"type":"list","values":[1075,1080],"loc":1079},"1080":{"type":"identifier","text":"true","loc":1080},"1081":{"type":"blank","loc":1081},"1082":{"type":"list","values":[1083,1084,1434],"loc":1082},"1083":{"type":"identifier","text":",","loc":1083},"1084":{"type":"list","values":[1086,1087],"loc":1084},"1085":{"type":"blank","loc":1085},"1086":{"type":"identifier","text":"@","loc":1086},"1087":{"type":"identifier","text":"123","loc":1087},"1088":{"type":"blank","loc":1088},"1089":{"type":"list","values":[1090,1091,1435],"loc":1089},"1090":{"type":"identifier","text":",","loc":1090},"1091":{"type":"list","values":[1093,1094],"loc":1091},"1092":{"type":"blank","loc":1092},"1093":{"type":"identifier","text":"@","loc":1093},"1094":{"type":"identifier","text":"hi","loc":1094},"1095":{"type":"blank","loc":1095},"1098":{"type":"list","values":[1099,1100,1433],"loc":1098},"1099":{"type":"identifier","text":",","loc":1099},"1100":{"type":"list","values":[1102,1103],"loc":1100},"1101":{"type":"blank","loc":1101},"1102":{"type":"identifier","text":"@","loc":1102},"1103":{"type":"identifier","text":"false","loc":1103},"1104":{"type":"blank","loc":1104},"1105":{"type":"list","values":[1107,1108,1109],"loc":1105},"1107":{"type":"identifier","text":",","loc":1107},"1108":{"type":"raw-code","lang":"javascript","raw":"x => valueToString(parseType(x))","loc":1108},"1109":{"type":"array","values":[1110,1117,1126],"loc":1109},"1110":{"type":"list","values":[1111,1112,1116],"loc":1110},"1111":{"type":"identifier","text":",","loc":1111},"1112":{"type":"list","values":[1113,1114],"loc":1112},"1113":{"type":"identifier","text":"@","loc":1113},"1114":{"type":"identifier","text":"list","loc":1114},"1115":{"type":"blank","loc":1115},"1116":{"type":"raw-code","lang":"javascript","raw":"'(tcon \"list\" 1114)'","loc":1116},"1117":{"type":"list","values":[1118,1119,1140],"loc":1117},"1118":{"type":"identifier","text":",","loc":1118},"1119":{"type":"list","values":[1121,1122],"loc":1119},"1120":{"type":"blank","loc":1120},"1121":{"type":"identifier","text":"@","loc":1121},"1122":{"type":"list","values":[1123,1124,1143],"loc":1122},"1123":{"type":"identifier","text":"list","loc":1123},"1124":{"type":"identifier","text":"a","loc":1124},"1125":{"type":"blank","loc":1125},"1126":{"type":"list","values":[1127,1128,1141],"loc":1126},"1127":{"type":"identifier","text":",","loc":1127},"1128":{"type":"list","values":[1130,1131],"loc":1128},"1129":{"type":"blank","loc":1129},"1130":{"type":"identifier","text":"@","loc":1130},"1131":{"type":"list","values":[1135,1136,1138],"loc":1131},"1135":{"type":"identifier","text":"fn","loc":1135},"1136":{"type":"array","values":[1137],"loc":1136},"1137":{"type":"identifier","text":"x","loc":1137},"1138":{"type":"identifier","text":"10","loc":1138},"1139":{"type":"blank","loc":1139},"1140":{"type":"raw-code","lang":"javascript","loc":1140,"raw":"'(tapp (tcon \"list\" 1123) (tcon \"a\" 1124) 1122)'"},"1141":{"type":"raw-code","lang":"javascript","loc":1141,"raw":"'(tapp (tapp (tcon \"->\" 1131) (tcon \"x\" 1137) 1131) (tcon \"10\" 1138) 1131)'"},"1143":{"type":"comment","text":" a comment is ignored","loc":1143},"1144":{"type":"array","values":[1146],"loc":1144},"1163":{"type":"list","values":[1164,118],"loc":1163},"1164":{"type":"identifier","text":"@","loc":1164},"1165":{"type":"list","values":[1166,1167,1171],"loc":1165},"1166":{"type":"identifier","text":",","loc":1166},"1167":{"type":"list","values":[1169,1170],"loc":1167},"1168":{"type":"blank","loc":1168},"1169":{"type":"identifier","text":"@","loc":1169},"1170":{"type":"identifier","text":"true","loc":1170},"1171":{"type":"raw-code","lang":"javascript","loc":1171,"raw":"\"(eprim (pbool true 1170) 1170)\""},"1172":{"type":"raw-code","lang":"javascript","loc":1172,"raw":"'(evar \"nil\" 118)'"},"1173":{"type":"list","values":[1174,1175,1669],"loc":1173},"1174":{"type":"identifier","text":",","loc":1174},"1175":{"type":"list","values":[1177,1178],"loc":1175},"1176":{"type":"blank","loc":1176},"1177":{"type":"identifier","text":"@","loc":1177},"1178":{"type":"array","values":[1179,1181],"loc":1178},"1179":{"type":"identifier","text":"1","loc":1179},"1181":{"type":"identifier","text":"2","loc":1181},"1182":{"type":"blank","loc":1182},"1183":{"type":"blank","loc":1183},"1184":{"type":"raw-code","lang":"javascript","loc":1184,"raw":"'(ematch (evar \"x\" 161) [(, (pprim (pint 1 162) 162) (eprim (pint 2 163) 163)) (, (pstr \"hi\" 164) (eprim (pint 1 166) 166))] 157)'"},"1185":{"type":"blank","loc":1185},"1186":{"type":"blank","loc":1186},"1187":{"type":"blank","loc":1187},"1188":{"type":"raw-code","lang":"javascript","loc":1188,"raw":"\"(eprim (pint 1 89) 89)\""},"1189":{"type":"list","values":[1190,1191,1536],"loc":1189},"1190":{"type":"identifier","text":",","loc":1190},"1191":{"type":"list","values":[1196,1197],"loc":1191},"1192":{"type":"blank","loc":1192},"1195":{"type":"stringText","loc":1195,"text":""},"1196":{"type":"identifier","text":"@","loc":1196},"1197":{"type":"string","first":1198,"templates":[{"expr":1199,"suffix":1200}],"loc":1197},"1198":{"type":"stringText","loc":1198,"text":"hi "},"1199":{"type":"identifier","text":"name","loc":1199},"1200":{"type":"stringText","text":"!","loc":1200},"1201":{"type":"blank","loc":1201},"1202":{"type":"list","values":[1203,1204,1567],"loc":1202},"1203":{"type":"identifier","text":",","loc":1203},"1204":{"type":"list","values":[1206,1207],"loc":1204},"1205":{"type":"blank","loc":1205},"1206":{"type":"identifier","text":"@@","loc":1206},"1207":{"type":"identifier","text":"abc","loc":1207},"1208":{"type":"blank","loc":1208},"1219":{"type":"identifier","text":",","loc":1219},"1220":{"type":"raw-code","lang":"javascript","raw":"x => valueToString(parsePat(x))","loc":1220},"1221":{"type":"array","values":[1222,1229,1236,1246,1253,1274,1281],"loc":1221},"1222":{"type":"list","values":[1223,1224,1228],"loc":1222},"1223":{"type":"identifier","text":",","loc":1223},"1224":{"type":"list","values":[1225,1226],"loc":1224},"1225":{"type":"identifier","text":"@","loc":1225},"1226":{"type":"identifier","text":"hi","loc":1226},"1227":{"type":"blank","loc":1227},"1228":{"type":"raw-code","lang":"javascript","loc":1228,"raw":"'(pvar \"hi\" 1226)'"},"1229":{"type":"list","values":[1230,1231,1235],"loc":1229},"1230":{"type":"identifier","text":",","loc":1230},"1231":{"type":"list","values":[1233,1234],"loc":1231},"1232":{"type":"blank","loc":1232},"1233":{"type":"identifier","text":"@","loc":1233},"1234":{"type":"identifier","text":"_","loc":1234},"1235":{"type":"raw-code","lang":"javascript","loc":1235,"raw":"\"(pany 1234)\""},"1236":{"type":"list","values":[1237,1238,1245],"loc":1236},"1237":{"type":"identifier","text":",","loc":1237},"1238":{"type":"list","values":[1240,1241],"loc":1238},"1239":{"type":"blank","loc":1239},"1240":{"type":"identifier","text":"@","loc":1240},"1241":{"type":"list","values":[1242,1243,1244],"loc":1241},"1242":{"type":"identifier","text":",","loc":1242},"1243":{"type":"identifier","text":"a","loc":1243},"1244":{"type":"identifier","text":"b","loc":1244},"1245":{"type":"raw-code","lang":"javascript","loc":1245,"raw":"'(pcon \",\" [(pvar \"a\" 1243) (pvar \"b\" 1244)] 1241)'"},"1246":{"type":"list","values":[1247,1248,1252],"loc":1246},"1247":{"type":"identifier","text":",","loc":1247},"1248":{"type":"list","values":[1250,1251],"loc":1248},"1249":{"type":"blank","loc":1249},"1250":{"type":"identifier","text":"@","loc":1250},"1251":{"type":"array","values":[],"loc":1251},"1252":{"type":"raw-code","lang":"javascript","loc":1252,"raw":"'(pcon \"nil\" [] 1251)'"},"1253":{"type":"list","values":[1254,1255,1273],"loc":1253},"1254":{"type":"identifier","text":",","loc":1254},"1255":{"type":"list","values":[1257,1258],"loc":1255},"1256":{"type":"blank","loc":1256},"1257":{"type":"identifier","text":"@","loc":1257},"1258":{"type":"array","values":[1263,1268,1272],"loc":1258},"1263":{"type":"identifier","text":"a","loc":1263},"1267":{"type":"spread","contents":1264,"loc":1267},"1268":{"type":"identifier","text":"b","loc":1268},"1269":{"type":"identifier","text":"c","loc":1269},"1272":{"type":"spread","contents":1269,"loc":1272},"1273":{"type":"raw-code","lang":"javascript","loc":1273,"raw":"'(pcon \"cons\" [(pvar \"a\" 1263) (pcon \"cons\" [(pvar \"b\" 1268) (pvar \"c\" 1269)] 1258)] 1258)'"},"1274":{"type":"list","values":[1275,1276,1280],"loc":1274},"1275":{"type":"identifier","text":",","loc":1275},"1276":{"type":"list","values":[1278,1279],"loc":1276},"1277":{"type":"blank","loc":1277},"1278":{"type":"identifier","text":"@","loc":1278},"1279":{"type":"identifier","text":"12","loc":1279},"1280":{"type":"raw-code","lang":"javascript","loc":1280,"raw":"\"(pprim (pint 12 1279) 1279)\""},"1281":{"type":"list","values":[1282,1283,1288],"loc":1281},"1282":{"type":"identifier","text":",","loc":1282},"1283":{"type":"list","values":[1285,1286],"loc":1283},"1284":{"type":"blank","loc":1284},"1285":{"type":"identifier","text":"@","loc":1285},"1286":{"type":"string","first":1287,"templates":[],"loc":1286},"1287":{"type":"stringText","loc":1287,"text":"hi"},"1288":{"type":"raw-code","lang":"javascript","loc":1288,"raw":"'(pstr \"hi\" 1286)'"},"1289":{"type":"raw-code","lang":"javascript","loc":1289,"raw":"\"(sexpr (eprim (pint 1 238) 238) 238)\""},"1290":{"type":"raw-code","lang":"javascript","loc":1290,"raw":"'(sdef \"hi\" (eprim (pint 10 254) 254) 245)'"},"1291":{"type":"blank","loc":1291},"1292":{"type":"raw-code","lang":"javascript","loc":1292,"raw":"'(sdeftype \"option\" [(,, \"some\" [(tcon \"a\" 1018)] 1017) (,, \"none\" [] 1020)])'"},"1293":{"type":"rich-text","contents":[{"id":"3b556102-d698-4016-a8c6-5daa7e99e24a","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Primitives","styles":{}}],"children":[]},{"id":"c8d13d61-7d3b-4273-90c9-cc3acd955efb","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"just ints and booleans at the moment","styles":{}}],"children":[]}],"loc":1293},"1295":{"type":"rich-text","contents":[{"id":"907b09e0-9690-4fbc-9771-7a9a519ed5e5","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Types","styles":{}}],"children":[]}],"loc":1295},"1297":{"type":"raw-code","lang":"javascript","loc":1297,"raw":"{\"0\":1,\"1\":2,\"type\":\",\"}"},"1298":{"type":"identifier","text":"10","loc":1298},"1299":{"type":"blank","loc":1299},"1300":{"type":"blank","loc":1300},"1304":{"type":"raw-code","lang":"javascript","loc":1304,"raw":"\"(, 5 2)\""},"1305":{"type":"raw-code","lang":"javascript","loc":1305,"raw":"\"(some 10)\""},"1306":{"type":"raw-code","lang":"javascript","loc":1306,"raw":"'(lol 1 true \"hi\")'"},"1307":{"type":"raw-code","lang":"javascript","loc":1307,"raw":"\"(com, 1 2)\""},"1308":{"type":"raw-code","lang":"javascript","loc":1308,"raw":"\"10\""},"1309":{"type":"raw-code","lang":"javascript","loc":1309,"raw":"\"0\""},"1322":{"type":"blank","loc":1322},"1333":{"type":"list","values":[1334,1335,1363],"loc":1333},"1334":{"type":"identifier","text":",","loc":1334},"1335":{"type":"array","values":[1352],"loc":1335},"1336":{"type":"blank","loc":1336},"1337":{"type":"blank","loc":1337},"1349":{"type":"blank","loc":1349},"1352":{"loc":1352,"type":"list","values":[1353,1354,1357,1360,1361,1362]},"1353":{"loc":1353,"type":"identifier","text":"match"},"1354":{"loc":1354,"type":"list","values":[1355,1356]},"1355":{"loc":1355,"type":"identifier","text":"some"},"1356":{"loc":1356,"type":"identifier","text":"10"},"1357":{"loc":1357,"type":"list","values":[1358,1359]},"1358":{"loc":1358,"type":"identifier","text":"some"},"1359":{"loc":1359,"type":"identifier","text":"v"},"1360":{"loc":1360,"type":"identifier","text":"v"},"1361":{"loc":1361,"type":"identifier","text":"_"},"1362":{"loc":1362,"type":"identifier","text":"5"},"1363":{"type":"raw-code","lang":"javascript","loc":1363,"raw":"\"10\""},"1364":{"type":"list","values":[1366,1367,1368],"loc":1364},"1366":{"type":"identifier","text":",","loc":1366},"1367":{"type":"raw-code","lang":"javascript","raw":"unescapeSlashes","loc":1367},"1368":{"type":"array","values":[1369,1375,1381,1387,1394],"loc":1368},"1369":{"type":"list","values":[1370,1371,1373],"loc":1369},"1370":{"type":"identifier","text":",","loc":1370},"1371":{"type":"string","first":1372,"templates":[],"loc":1371},"1372":{"type":"stringText","loc":1372,"text":"\\n"},"1373":{"type":"string","first":1374,"templates":[],"loc":1373},"1374":{"type":"stringText","loc":1374,"text":"\\n"},"1375":{"type":"list","values":[1376,1377,1378],"loc":1375},"1376":{"type":"identifier","text":",","loc":1376},"1377":{"type":"string","first":1379,"templates":[],"loc":1377},"1378":{"type":"string","first":1380,"templates":[],"loc":1378},"1379":{"type":"stringText","loc":1379,"text":"\\\\n"},"1380":{"type":"stringText","loc":1380,"text":"\\n"},"1381":{"type":"list","values":[1382,1383,1384],"loc":1381},"1382":{"type":"identifier","text":",","loc":1382},"1383":{"type":"string","first":1385,"templates":[],"loc":1383},"1384":{"type":"string","first":1386,"templates":[],"loc":1384},"1385":{"type":"stringText","loc":1385,"text":"\\\\\\\\n"},"1386":{"type":"stringText","loc":1386,"text":"\\\\n"},"1387":{"type":"list","values":[1388,1389,1390],"loc":1387},"1388":{"type":"identifier","text":",","loc":1388},"1389":{"type":"string","first":1391,"templates":[],"loc":1389},"1390":{"type":"string","first":1393,"templates":[],"loc":1390},"1391":{"type":"stringText","loc":1391,"text":"\\\\\\\\"},"1392":{"type":"stringText","loc":1392,"text":""},"1393":{"type":"stringText","loc":1393,"text":"\\\\"},"1394":{"type":"list","values":[1395,1396,1397],"loc":1394},"1395":{"type":"identifier","text":",","loc":1395},"1396":{"type":"string","first":1398,"templates":[],"loc":1396},"1397":{"type":"string","first":1399,"templates":[],"loc":1397},"1398":{"type":"stringText","loc":1398,"text":"\\\\\\n"},"1399":{"type":"stringText","loc":1399,"text":"\\\\\\n"},"1400":{"type":"list","values":[1402,1403,1404],"loc":1400},"1402":{"type":"identifier","text":",","loc":1402},"1403":{"type":"raw-code","lang":"javascript","raw":"sanitize","loc":1403},"1404":{"type":"array","values":[1405,1411,1417],"loc":1404},"1405":{"type":"list","values":[1406,1407,1409],"loc":1405},"1406":{"type":"identifier","text":",","loc":1406},"1407":{"type":"string","first":1408,"templates":[],"loc":1407},"1408":{"type":"stringText","loc":1408,"text":"hello-world"},"1409":{"type":"string","first":1410,"templates":[],"loc":1409},"1410":{"type":"stringText","loc":1410,"text":"hello_world"},"1411":{"type":"list","values":[1412,1413,1414],"loc":1411},"1412":{"type":"identifier","text":",","loc":1412},"1413":{"type":"string","first":1415,"templates":[],"loc":1413},"1414":{"type":"string","first":1416,"templates":[],"loc":1414},"1415":{"type":"stringText","loc":1415,"text":"a/b/c"},"1416":{"type":"stringText","loc":1416,"text":"a$slb$slc"},"1417":{"type":"list","values":[1418,1419,1420],"loc":1417},"1418":{"type":"identifier","text":",","loc":1418},"1419":{"type":"string","first":1421,"templates":[],"loc":1419},"1420":{"type":"string","first":1422,"templates":[],"loc":1420},"1421":{"type":"stringText","loc":1421,"text":"abc$"},"1422":{"type":"stringText","loc":1422,"text":"abc$$"},"1423":{"type":"list","values":[1425,1426,1427],"loc":1423},"1425":{"type":"identifier","text":",","loc":1425},"1426":{"type":"raw-code","lang":"javascript","raw":"makePairs","loc":1426},"1427":{"type":"array","values":[1428],"loc":1427},"1428":{"type":"list","values":[1429,1430,1431],"loc":1428},"1429":{"type":"identifier","text":",","loc":1429},"1430":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3, 4]","loc":1430},"1431":{"type":"raw-code","lang":"javascript","raw":"[[1, 2], [3, 4]]","loc":1431},"1432":{"type":"raw-code","lang":"javascript","loc":1432,"raw":"\"(eprim (pbool true 1080) 1080)\""},"1433":{"type":"raw-code","lang":"javascript","loc":1433,"raw":"\"(eprim (pbool false 1103) 1103)\""},"1434":{"type":"raw-code","lang":"javascript","loc":1434,"raw":"\"(eprim (pint 123 1087) 1087)\""},"1435":{"type":"raw-code","lang":"javascript","loc":1435,"raw":"'\"not a prim\"'"},"1436":{"loc":1436,"type":"list","values":[1439,1440,1441,1442,1446,1447,1458,1459,1546,1542,1463,1464,1471,1472,1479,1480,1490,1491]},"1439":{"loc":1439,"type":"identifier","text":"deftype"},"1440":{"loc":1440,"type":"identifier","text":"expr"},"1441":{"loc":1441,"type":"rich-text","contents":[{"id":"75ea0e27-8491-4efb-b875-9d2233bc7ed0","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"the trailing ","styles":{}},{"type":"text","text":"int","styles":{"code":true}},{"type":"text","text":" on each constructor is a unique id","styles":{}}],"children":[]}]},"1442":{"loc":1442,"type":"list","values":[1443,1444,1445]},"1443":{"loc":1443,"type":"identifier","text":"eprim"},"1444":{"loc":1444,"type":"identifier","text":"prim"},"1445":{"loc":1445,"type":"identifier","text":"int"},"1446":{"loc":1446,"type":"rich-text","contents":[{"id":"89460e23-49ae-4caf-bff2-fc9d477df677","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"estr: prefix,","styles":{"code":true}},{"type":"text","text":" ","styles":{}},{"type":"text","text":"template-pairs","styles":{"code":true}},{"type":"text","text":". All strings are template strings in our language :)","styles":{}}],"children":[]},{"id":"028918e5-425e-4d4a-b35f-992292f48576","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"So ","styles":{}},{"type":"text","text":"\"Hello ${world}!\"","styles":{"code":true}},{"type":"text","text":" would parse into\n","styles":{}},{"type":"text","text":"(estr \"Hello\" [(,, (evar \"world\") \"!\" 1234)])","styles":{"code":true}}],"children":[]},{"id":"fb11b2cc-0be0-4dee-8f90-107d8ca0301d","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"template-pairs","styles":{"code":true}},{"type":"text","text":" is a list of ","styles":{}},{"type":"text","text":"expression","styles":{"code":true}},{"type":"text","text":" and ","styles":{}},{"type":"text","text":"suffix","styles":{"code":true}},{"type":"text","text":" (with a unique ID for the string tacked on)","styles":{}}],"children":[]}]},"1447":{"loc":1447,"type":"list","values":[1448,1449,1450,1457]},"1448":{"loc":1448,"type":"identifier","text":"estr"},"1449":{"loc":1449,"type":"identifier","text":"string"},"1450":{"loc":1450,"type":"list","values":[1451,1452]},"1451":{"loc":1451,"type":"identifier","text":"list"},"1452":{"loc":1452,"type":"list","values":[1453,1454,1455,1456]},"1453":{"loc":1453,"type":"identifier","text":",,"},"1454":{"loc":1454,"type":"identifier","text":"expr"},"1455":{"loc":1455,"type":"identifier","text":"string"},"1456":{"loc":1456,"type":"identifier","text":"int"},"1457":{"loc":1457,"type":"identifier","text":"int"},"1458":{"loc":1458,"type":"rich-text","contents":[{"id":"17ad6efe-42d4-4d27-9c51-3c5d78e9c338","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"evar:","styles":{"code":true}},{"type":"text","text":" a variable reference! might be local or global","styles":{}}],"children":[]}]},"1459":{"loc":1459,"type":"list","values":[1460,1461,1462]},"1460":{"loc":1460,"type":"identifier","text":"evar"},"1461":{"loc":1461,"type":"identifier","text":"string"},"1462":{"loc":1462,"type":"identifier","text":"int"},"1463":{"loc":1463,"type":"rich-text","contents":[{"id":"a22d06e1-f3b8-4ea5-9495-8008c09cc659","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"elambda: args, body","styles":{"code":true}},{"type":"text","text":" , parsed from the form ","styles":{}},{"type":"text","text":"(fn [arg1 arg2] body)","styles":{"code":true}},{"type":"text","text":".","styles":{}}],"children":[]}]},"1464":{"loc":1464,"type":"list","values":[1465,1466,1469,1470]},"1465":{"loc":1465,"type":"identifier","text":"elambda"},"1466":{"loc":1466,"type":"list","values":[1467,1468]},"1467":{"loc":1467,"type":"identifier","text":"list"},"1468":{"loc":1468,"type":"identifier","text":"pat"},"1469":{"loc":1469,"type":"identifier","text":"expr"},"1470":{"loc":1470,"type":"identifier","text":"int"},"1471":{"loc":1471,"type":"rich-text","contents":[{"id":"95bf6267-a00d-4526-9030-a36a7626bc44","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"eapp: target, args","styles":{"code":true}}],"children":[]}]},"1472":{"loc":1472,"type":"list","values":[1473,1474,1475,1478]},"1473":{"loc":1473,"type":"identifier","text":"eapp"},"1474":{"loc":1474,"type":"identifier","text":"expr"},"1475":{"loc":1475,"type":"list","values":[1476,1477]},"1476":{"loc":1476,"type":"identifier","text":"list"},"1477":{"loc":1477,"type":"identifier","text":"expr"},"1478":{"loc":1478,"type":"identifier","text":"int"},"1479":{"loc":1479,"type":"rich-text","contents":[{"id":"03be29ee-aeb9-4157-948a-b659a7695f1e","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"elet: bindings, body","styles":{"code":true}}],"children":[]}]},"1480":{"loc":1480,"type":"list","values":[1481,1482,1488,1489]},"1481":{"loc":1481,"type":"identifier","text":"elet"},"1482":{"loc":1482,"type":"list","values":[1483,1484]},"1483":{"loc":1483,"type":"identifier","text":"list"},"1484":{"loc":1484,"type":"list","values":[1485,1486,1487]},"1485":{"loc":1485,"type":"identifier","text":","},"1486":{"loc":1486,"type":"identifier","text":"pat"},"1487":{"loc":1487,"type":"identifier","text":"expr"},"1488":{"loc":1488,"type":"identifier","text":"expr"},"1489":{"loc":1489,"type":"identifier","text":"int"},"1490":{"loc":1490,"type":"rich-text","contents":[{"id":"49a25799-d29e-4727-bdd7-a7f1aa12c8f3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"ematch: target, cases","styles":{"code":true}}],"children":[]}]},"1491":{"loc":1491,"type":"list","values":[1492,1493,1494]},"1492":{"loc":1492,"type":"identifier","text":"ematch"},"1493":{"loc":1493,"type":"identifier","text":"expr"},"1494":{"loc":1494,"type":"list","values":[1495,1496]},"1495":{"loc":1495,"type":"identifier","text":"list"},"1496":{"loc":1496,"type":"list","values":[1497,1498,1499]},"1497":{"loc":1497,"type":"identifier","text":","},"1498":{"loc":1498,"type":"identifier","text":"pat"},"1499":{"loc":1499,"type":"identifier","text":"expr"},"1502":{"type":"raw-code","lang":"javascript","loc":1502,"raw":"'(elet [(, (pcon \",\" [(pvar \"a\" 182) (pvar \"b\" 184)] 180) (evar \"c\" 185))] (evar \"d\" 186) 175)'"},"1503":{"type":"raw-code","lang":"javascript","loc":1503,"raw":"'(elet [(, (pcon \"cons\" [(pvar \"a\" 203) (pvar \"b\" 204)] 202) (evar \"c\" 208))] (evar \"d\" 209) 196)'"},"1504":{"type":"blank","loc":1504},"1505":{"type":"identifier","text":"b","loc":1505},"1506":{"type":"raw-code","lang":"javascript","loc":1506,"raw":"'(elambda [(pvar \"a\" 136) (pvar \"b\" 1505)] (eprim (pint 1 133) 133) 129)'"},"1523":{"type":"raw-code","lang":"javascript","loc":1523,"raw":"'(sdef \"lol\" (elambda [(pvar \"a\" 268) (pvar \"b\" 269)] (eapp (evar \"+\" 271) [(evar \"a\" 272) (evar \"b\" 273)] -1) 261) 261)'"},"1534":{"type":"rich-text","contents":[{"id":"54590d21-c399-4d06-8520-40c53cb03f83","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's remind ourselves what the AST looks like that we're parsing into:","styles":{}}],"children":[]}],"loc":1534},"1536":{"type":"raw-code","lang":"javascript","loc":1536,"raw":"'(estr \"hi \" [(,, (evar \"name\" 1199) \"!\" 1200)] 1197)'"},"1541":{"type":"blank","loc":1541},"1542":{"loc":1542,"type":"list","values":[1543,1544,1545]},"1543":{"loc":1543,"type":"identifier","text":"equot"},"1544":{"loc":1544,"type":"identifier","text":"quot"},"1545":{"loc":1545,"type":"identifier","text":"int"},"1546":{"type":"rich-text","contents":[{"id":"61920579-0e52-48f6-a04d-3a1001c53b81","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"equot:","styles":{"code":true}},{"type":"text","text":" this form allows embedding of the CST or AST into the runtime, which makes writing tests for our parsers, compilers, and type checkers much simpler.","styles":{}}],"children":[]}],"loc":1546},"1547":{"loc":1547,"type":"list","values":[1550,1551,1552,1555,1558,1561,1564]},"1550":{"loc":1550,"type":"identifier","text":"deftype"},"1551":{"loc":1551,"type":"identifier","text":"quot"},"1552":{"loc":1552,"type":"list","values":[1553,1554]},"1553":{"loc":1553,"type":"identifier","text":"quot/expr"},"1554":{"loc":1554,"type":"identifier","text":"expr"},"1555":{"loc":1555,"type":"list","values":[1556,1557]},"1556":{"loc":1556,"type":"identifier","text":"quot/stmt"},"1557":{"loc":1557,"type":"identifier","text":"stmt"},"1558":{"loc":1558,"type":"list","values":[1559,1560]},"1559":{"loc":1559,"type":"identifier","text":"quot/type"},"1560":{"loc":1560,"type":"identifier","text":"type"},"1561":{"loc":1561,"type":"list","values":[1562,1563]},"1562":{"loc":1562,"type":"identifier","text":"quot/pat"},"1563":{"loc":1563,"type":"identifier","text":"pat"},"1564":{"loc":1564,"type":"list","values":[1565,1566]},"1565":{"loc":1565,"type":"identifier","text":"quot/quot"},"1566":{"loc":1566,"type":"identifier","text":"cst"},"1567":{"type":"raw-code","lang":"javascript","loc":1567,"raw":"'(equot (quot/quot (cst/identifier \"abc\" 1207)) 1204)'"},"1568":{"type":"list","values":[1569,1570,1676],"loc":1568},"1569":{"type":"identifier","text":",","loc":1569},"1570":{"type":"list","values":[1572,1573],"loc":1570},"1571":{"type":"blank","loc":1571},"1572":{"type":"identifier","text":"@","loc":1572},"1573":{"type":"list","values":[1574,1575],"loc":1573},"1574":{"type":"identifier","text":"@t","loc":1574},"1575":{"type":"identifier","text":"list","loc":1575},"1576":{"type":"blank","loc":1576},"1577":{"type":"list","values":[1579,1580,1581],"loc":1577},"1579":{"type":"identifier","text":",","loc":1579},"1580":{"type":"raw-code","lang":"javascript","raw":"({values: [pat, val]}) => evalPat(parsePat(pat), evaluate(parse(val), testEnv))","loc":1580},"1581":{"type":"array","values":[1583,1592,1601,1617],"loc":1581},"1582":{"type":"blank","loc":1582},"1583":{"type":"list","values":[1589,1584,1591],"loc":1583},"1584":{"type":"array","values":[1587,1588],"loc":1584},"1586":{"type":"blank","loc":1586},"1587":{"type":"identifier","text":"a","loc":1587},"1588":{"type":"identifier","text":"10","loc":1588},"1589":{"type":"identifier","text":",","loc":1589},"1590":{"type":"blank","loc":1590},"1591":{"type":"raw-code","lang":"javascript","loc":1591,"raw":"{\"a\":10}"},"1592":{"type":"list","values":[1593,1594,1595],"loc":1592},"1593":{"type":"identifier","text":",","loc":1593},"1594":{"type":"array","values":[1596,1600],"loc":1594},"1595":{"type":"blank","loc":1595},"1596":{"type":"list","values":[1597,1598,1599],"loc":1596},"1597":{"type":"identifier","text":",","loc":1597},"1598":{"type":"identifier","text":"a","loc":1598},"1599":{"type":"identifier","text":"b","loc":1599},"1600":{"type":"identifier","text":"10","loc":1600},"1601":{"type":"list","values":[1602,1603,1616],"loc":1601},"1602":{"type":"identifier","text":",","loc":1602},"1603":{"type":"array","values":[1605,1612],"loc":1603},"1604":{"type":"blank","loc":1604},"1605":{"type":"list","values":[1606,1607,1608],"loc":1605},"1606":{"type":"identifier","text":",","loc":1606},"1607":{"type":"identifier","text":"a","loc":1607},"1608":{"type":"identifier","text":"b","loc":1608},"1611":{"type":"blank","loc":1611},"1612":{"type":"list","values":[1613,1614,1615],"loc":1612},"1613":{"type":"identifier","text":",","loc":1613},"1614":{"type":"identifier","text":"10","loc":1614},"1615":{"type":"identifier","text":"20","loc":1615},"1616":{"type":"raw-code","lang":"javascript","loc":1616,"raw":"{\"a\":10,\"b\":20}"},"1617":{"type":"list","values":[1618,1619,1673],"loc":1617},"1618":{"type":"identifier","text":",","loc":1618},"1619":{"type":"array","values":[1624,1639],"loc":1619},"1620":{"type":"blank","loc":1620},"1624":{"type":"array","values":[1625,1634,1638],"loc":1624},"1625":{"type":"identifier","text":"1","loc":1625},"1629":{"type":"spread","contents":1626,"loc":1629},"1633":{"type":"spread","contents":1630,"loc":1633},"1634":{"type":"identifier","text":"_","loc":1634},"1635":{"type":"identifier","text":"rest","loc":1635},"1638":{"type":"spread","contents":1635,"loc":1638},"1639":{"type":"array","values":[1640,1641,1642,1643],"loc":1639},"1640":{"type":"identifier","text":"1","loc":1640},"1641":{"type":"identifier","text":"2","loc":1641},"1642":{"type":"identifier","text":"3","loc":1642},"1643":{"type":"identifier","text":"4","loc":1643},"1644":{"type":"raw-code","lang":"javascript","raw":"testEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644},"1646":{"type":"list","values":[1647,1648,1672],"loc":1646},"1647":{"type":"identifier","text":",","loc":1647},"1648":{"type":"array","values":[1650,1665],"loc":1648},"1649":{"type":"blank","loc":1649},"1650":{"type":"list","values":[1651,1652,1657,1663],"loc":1650},"1651":{"type":"identifier","text":"deftype","loc":1651},"1652":{"type":"list","values":[1655,1656],"loc":1652},"1655":{"type":"identifier","text":"list","loc":1655},"1656":{"type":"identifier","text":"a","loc":1656},"1657":{"type":"list","values":[1658,1659,1660],"loc":1657},"1658":{"type":"identifier","text":"cons","loc":1658},"1659":{"type":"identifier","text":"a","loc":1659},"1660":{"type":"list","values":[1661,1662],"loc":1660},"1661":{"type":"identifier","text":"list","loc":1661},"1662":{"type":"identifier","text":"a","loc":1662},"1663":{"type":"list","values":[1664],"loc":1663},"1664":{"type":"identifier","text":"nil","loc":1664},"1665":{"type":"array","values":[1668,1671],"loc":1665},"1668":{"type":"identifier","text":"1","loc":1668},"1669":{"type":"raw-code","lang":"javascript","loc":1669,"raw":"'(eapp (evar \"cons\" -1) [(eprim (pint 1 1179) 1179) (eapp (evar \"cons\" 1178) [(eprim (pint 2 1181) 1181) (evar \"nil\" 1178)] 1178)] -1)'"},"1670":{"type":"raw-code","lang":"javascript","loc":1670,"raw":"'(eapp (evar \"cons\" -1) [(evar \"a\" 790) (evar \"b\" 791)] -1)'"},"1671":{"type":"identifier","text":"2","loc":1671},"1672":{"type":"raw-code","lang":"javascript","loc":1672,"raw":"\"[1 2]\""},"1673":{"type":"raw-code","lang":"javascript","raw":"{\"rest\": list([3, 4])}","loc":1673},"1674":{"type":"rich-text","contents":[{"id":"1b03b932-ddf1-42e9-8aef-074775ba913b","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"To evaluate our code in this bootstrap environment, we're treating the AST as a very basic \"bytecode\" that we're evaluating in a \"virtual machine\". Evaluating a program, in this paradigm, simply consists of walking each node of the tree and \"reducing\" it to a runtime value.","styles":{}}],"children":[]}],"loc":1674},"1676":{"type":"raw-code","lang":"javascript","loc":1676,"raw":"{\"0\":\"list\",\"1\":1575,\"type\":\"tcon\"}"},"-1":{"type":"list","values":[0],"loc":-1}},"root":-1,"meta":{},"history":[{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8145,"ts":1714967694.214,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so th\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8146,"ts":1714967694.342,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so th\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8147,"ts":1714967694.478,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8148,"ts":1714967694.519,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8149,"ts":1714967694.734,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that ea\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8150,"ts":1714967695.002,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that ea\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8151,"ts":1714967695.263,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that ev\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8152,"ts":1714967695.343,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that ev\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that eval\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8153,"ts":1714967695.524,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that eval\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evalu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8154,"ts":1714967695.612,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evalu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evalua\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8155,"ts":1714967695.662,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evalua\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8156,"ts":1714967695.834,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluato\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8157,"ts":1714967695.982,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluato\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8158,"ts":1714967696.576,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluatio\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8159,"ts":1714967696.72,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluatio\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8160,"ts":1714967696.827,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8161,"ts":1714967697.024,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation h\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8162,"ts":1714967697.08,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation h\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation ha\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8163,"ts":1714967697.193,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation ha\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation hap\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8164,"ts":1714967697.315,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation hap\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8165,"ts":1714967697.446,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8166,"ts":1714967697.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8167,"ts":1714967697.713,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8168,"ts":1714967697.842,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8169,"ts":1714967698.136,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8170,"ts":1714967698.508,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8171,"ts":1714967698.586,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in th\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8172,"ts":1714967698.702,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in th\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8173,"ts":1714967698.785,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8174,"ts":1714967699.004,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n/\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8175,"ts":1714967699.457,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n/\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n//\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8176,"ts":1714967699.617,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n//\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8177,"ts":1714967699.714,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// c\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8178,"ts":1714967699.836,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// c\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// co\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8179,"ts":1714967699.916,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// co\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// cor\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8180,"ts":1714967699.959,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// cor\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// corr\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8181,"ts":1714967700.078,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// corr\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correc\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8182,"ts":1714967700.229,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correc\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8183,"ts":1714967700.444,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8184,"ts":1714967700.54,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8185,"ts":1714967700.694,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dep\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8186,"ts":1714967700.766,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dep\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8187,"ts":1714967700.915,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8188,"ts":1714967701.015,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depende\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8189,"ts":1714967701.15,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct depende\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8190,"ts":1714967701.218,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8191,"ts":1714967701.404,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8192,"ts":1714967701.633,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency o\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8193,"ts":1714967701.743,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency o\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency or\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8194,"ts":1714967701.849,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency or\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency ord\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8195,"ts":1714967702.015,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency ord\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8196,"ts":1714967702.204,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8197,"ts":1714967702.66,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, a\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8198,"ts":1714967702.942,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, a\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8199,"ts":1714967703.031,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8200,"ts":1714967703.115,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and f\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8201,"ts":1714967703.392,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and f\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and fo\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8202,"ts":1714967703.47,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and fo\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8203,"ts":1714967703.567,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8204,"ts":1714967703.627,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8205,"ts":1714967703.833,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for det\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8206,"ts":1714967704.037,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for det\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for deter\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8207,"ts":1714967704.208,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for deter\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for dete\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8208,"ts":1714967704.526,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for dete\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detec\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8209,"ts":1714967704.624,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detec\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detect\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8210,"ts":1714967704.783,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detect\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detectin\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8211,"ts":1714967704.884,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detectin\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8212,"ts":1714967704.924,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8213,"ts":1714967705.048,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting c\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8214,"ts":1714967707.287,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting c\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting cir\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8215,"ts":1714967707.424,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting cir\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8216,"ts":1714967708.659,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circl\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8217,"ts":1714967708.912,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circl\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8218,"ts":1714967709.313,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circ\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8219,"ts":1714967709.536,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circula\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8220,"ts":1714967709.659,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circula\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8221,"ts":1714967709.792,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8222,"ts":1714967709.928,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8223,"ts":1714967710.243,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular de\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dep\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8224,"ts":1714967710.319,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dep\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8225,"ts":1714967710.498,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depe\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8226,"ts":1714967710.585,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depende\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8227,"ts":1714967710.71,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular depende\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8228,"ts":1714967710.765,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependen\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependenc\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8229,"ts":1714967710.96,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependenc\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencie\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8230,"ts":1714967711.106,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencie\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8231,"ts":1714967711.226,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8232,"ts":1714967714.525,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8233,"ts":1714967716.22,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (w\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8234,"ts":1714967716.396,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (w\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (whi\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8235,"ts":1714967716.484,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (whi\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (whic\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8236,"ts":1714967716.541,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (whic\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8237,"ts":1714967716.632,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8238,"ts":1714967716.769,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which ne\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8239,"ts":1714967716.879,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which ne\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which nee\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8240,"ts":1714967717.02,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which nee\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8241,"ts":1714967717.185,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8242,"ts":1714967717.293,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8243,"ts":1714967717.361,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8244,"ts":1714967717.836,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to b\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8245,"ts":1714967717.958,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to b\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8246,"ts":1714967718.084,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8247,"ts":1714967718.687,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n/\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8248,"ts":1714967718.836,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n/\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n//\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8249,"ts":1714967718.996,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n//\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8250,"ts":1714967719.108,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8251,"ts":1714967719.248,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// e\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// ev\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8252,"ts":1714967719.394,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// ev\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// eval\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8253,"ts":1714967719.532,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// eval\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evalu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8254,"ts":1714967719.607,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evalu\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evalua\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8255,"ts":1714967719.644,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evalua\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8256,"ts":1714967719.724,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluat\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluate\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8257,"ts":1714967719.92,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluate\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8258,"ts":1714967720.091,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8259,"ts":1714967720.167,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated \nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated al\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8260,"ts":1714967721.158,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated al\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8261,"ts":1714967721.433,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8262,"ts":1714967721.57,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all t\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all to\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8263,"ts":1714967721.76,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all to\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all toge\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8264,"ts":1714967721.96,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all toge\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all toget\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8265,"ts":1714967722.024,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all toget\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all togeth\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8266,"ts":1714967722.069,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all togeth\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8267,"ts":1714967722.244,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together)\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8268,"ts":1714967722.553,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together)\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together).\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8269,"ts":1714967723.174,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated all together).\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8270,"ts":1714967728.085,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as .\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8271,"ts":1714967728.22,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as .\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8272,"ts":1714967728.362,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a .\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8273,"ts":1714967728.434,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a .\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a gr.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8274,"ts":1714967728.618,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a gr.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a gro.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8275,"ts":1714967728.691,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a gro.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8276,"ts":1714967728.77,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group.\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8277,"ts":1714967729.001,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"names = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8278,"ts":1714967735.481,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8279,"ts":1714967736.079,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"//\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8280,"ts":1714967736.208,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"//\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8281,"ts":1714967736.391,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// N\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8282,"ts":1714967736.857,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// N\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Nam\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8283,"ts":1714967737.037,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Nam\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8284,"ts":1714967737.124,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8285,"ts":1714967737.249,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8286,"ts":1714967737.295,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8287,"ts":1714967737.524,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8288,"ts":1714967737.662,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8289,"ts":1714967737.738,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8290,"ts":1714967737.911,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8291,"ts":1714967737.995,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the c\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8292,"ts":1714967738.163,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the c\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the com\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8293,"ts":1714967738.251,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the com\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the compl\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8294,"ts":1714967738.467,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the compl\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complem\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8295,"ts":1714967738.632,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complem\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the compleme\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8296,"ts":1714967738.793,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the compleme\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8297,"ts":1714967738.879,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8298,"ts":1714967739.096,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8299,"ts":1714967739.344,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8300,"ts":1714967739.451,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8301,"ts":1714967740.046,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `e\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8302,"ts":1714967740.224,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `e\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `ex\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8303,"ts":1714967740.43,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `ex\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `ext\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8304,"ts":1714967740.577,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `ext\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `exter\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8305,"ts":1714967740.693,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `exter\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `extern\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8306,"ts":1714967740.863,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `extern\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externa\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8307,"ts":1714967740.974,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externa\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8308,"ts":1714967741.08,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8309,"ts":1714967741.377,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`;\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8310,"ts":1714967742.159,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`;\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8311,"ts":1714967742.62,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8312,"ts":1714967743.001,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8313,"ts":1714967743.107,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8314,"ts":1714967743.185,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8315,"ts":1714967743.278,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8316,"ts":1714967743.45,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it prod\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8317,"ts":1714967743.518,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it prod\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8318,"ts":1714967743.661,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produce\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8319,"ts":1714967743.794,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produce\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8320,"ts":1714967743.882,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8321,"ts":1714967744.091,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8322,"ts":1714967744.216,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8323,"ts":1714967744.31,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a lis\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8324,"ts":1714967744.444,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a lis\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8325,"ts":1714967744.558,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8326,"ts":1714967744.61,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list o\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8327,"ts":1714967744.677,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list o\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8328,"ts":1714967744.857,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of al\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8329,"ts":1714967746.21,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of al\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8330,"ts":1714967746.425,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8331,"ts":1714967746.584,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8332,"ts":1714967749.732,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bou\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8333,"ts":1714967749.808,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bou\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8334,"ts":1714967750.016,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8335,"ts":1714967750.095,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8336,"ts":1714967750.26,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound na\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8337,"ts":1714967750.368,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound na\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8338,"ts":1714967750.486,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8339,"ts":1714967750.591,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8340,"ts":1714967751.22,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8341,"ts":1714967752.712,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bound name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bou\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8342,"ts":1714967753.655,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bou\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bo\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8343,"ts":1714967753.858,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all bo\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8344,"ts":1714967754.048,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8345,"ts":1714967754.283,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all v\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8346,"ts":1714967756.783,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all v\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all val\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8347,"ts":1714967756.946,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all val\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all value\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8348,"ts":1714967757.051,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all value\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8349,"ts":1714967757.198,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8350,"ts":1714967757.576,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *p\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8351,"ts":1714967757.919,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *p\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8352,"ts":1714967758.019,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8353,"ts":1714967758.119,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *prov\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8354,"ts":1714967758.199,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *prov\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provi\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8355,"ts":1714967758.313,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provi\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provide\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8356,"ts":1714967758.67,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provide\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8357,"ts":1714967758.813,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided*\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8358,"ts":1714967759.045,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided*\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8359,"ts":1714967759.12,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8360,"ts":1714967759.296,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8361,"ts":1714967759.463,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8362,"ts":1714967759.637,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a g\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8363,"ts":1714967759.894,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a g\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a giv\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8364,"ts":1714967760.028,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a giv\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a give\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8365,"ts":1714967760.086,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a give\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8366,"ts":1714967760.208,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8367,"ts":1714967760.362,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given st\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8368,"ts":1714967760.53,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given st\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given state\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8369,"ts":1714967760.724,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given state\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statem\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8370,"ts":1714967760.829,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statem\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statemen\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8371,"ts":1714967760.997,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statemen\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8372,"ts":1714967761.027,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8373,"ts":1714967761.311,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// Names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8374,"ts":1714967763.204,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8375,"ts":1714967763.628,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8376,"ts":1714967764.227,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8377,"ts":1714967767.317,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8378,"ts":1714967767.511,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8379,"ts":1714967767.657,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// L\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8380,"ts":1714967769.032,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// L\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8381,"ts":1714967770.332,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// I\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8382,"ts":1714967770.592,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// I\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8383,"ts":1714967770.831,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8384,"ts":1714967771.003,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8385,"ts":1714967771.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// In\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// I\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8386,"ts":1714967772.11,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// I\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8387,"ts":1714967772.237,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// O\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8388,"ts":1714967772.408,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// O\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// On\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8389,"ts":1714967772.669,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// On\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8390,"ts":1714967772.792,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8391,"ts":1714967773.077,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once h\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8392,"ts":1714967773.329,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once h\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8393,"ts":1714967773.601,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8394,"ts":1714967773.707,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we h\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8395,"ts":1714967773.812,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we h\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we ha\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8396,"ts":1714967773.964,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we ha\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8397,"ts":1714967774.095,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8398,"ts":1714967774.175,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8399,"ts":1714967774.259,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have typ\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8400,"ts":1714967774.454,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have typ\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8401,"ts":1714967774.558,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8402,"ts":1714967774.682,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type c\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8403,"ts":1714967775.093,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type c\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type ch\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8404,"ts":1714967775.169,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type ch\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8405,"ts":1714967775.314,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chck\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8406,"ts":1714967775.426,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chck\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8407,"ts":1714967775.865,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type che\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8408,"ts":1714967776.002,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type che\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chec\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8409,"ts":1714967776.086,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type chec\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type check\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8410,"ts":1714967776.704,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type check\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8411,"ts":1714967776.916,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8412,"ts":1714967777.281,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner,\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8413,"ts":1714967777.578,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner,\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8414,"ts":1714967777.817,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkiner\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkine\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8415,"ts":1714967777.924,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkine\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8416,"ts":1714967778.057,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checkin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8417,"ts":1714967778.203,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8418,"ts":1714967778.347,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8419,"ts":1714967778.604,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8420,"ts":1714967778.66,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'l\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8421,"ts":1714967778.876,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'l\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8422,"ts":1714967779.009,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8423,"ts":1714967779.236,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll al\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8424,"ts":1714967779.31,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll al\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8425,"ts":1714967779.443,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8426,"ts":1714967779.574,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also wa\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8427,"ts":1714967779.924,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also wa\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also wan\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8428,"ts":1714967779.993,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also wan\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8429,"ts":1714967780.078,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8430,"ts":1714967780.342,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8431,"ts":1714967780.545,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to re\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8432,"ts":1714967780.945,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to re\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to rep\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8433,"ts":1714967780.995,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to rep\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to repo\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8434,"ts":1714967781.098,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to repo\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8435,"ts":1714967781.318,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8436,"ts":1714967781.604,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8437,"ts":1714967783.498,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report typ\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8438,"ts":1714967783.642,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report typ\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8439,"ts":1714967783.691,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8440,"ts":1714967783.794,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8441,"ts":1714967783.946,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type na\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8442,"ts":1714967784.065,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type na\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8443,"ts":1714967784.193,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type name\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8444,"ts":1714967784.325,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8445,"ts":1714967786.108,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names p\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8446,"ts":1714967786.218,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names p\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8447,"ts":1714967786.313,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8448,"ts":1714967786.407,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names proc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8449,"ts":1714967786.631,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names proc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names procu\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8450,"ts":1714967786.83,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names procu\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names proc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8451,"ts":1714967787.147,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names proc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8452,"ts":1714967787.293,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names pro\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names prod\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8453,"ts":1714967787.394,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names prod\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8454,"ts":1714967787.532,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produc\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produce\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8455,"ts":1714967787.628,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produce\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8456,"ts":1714967787.877,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8457,"ts":1714967787.979,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced b\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8458,"ts":1714967788.075,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8459,"ts":1714967788.109,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8460,"ts":1714967788.349,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8461,"ts":1714967788.427,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a st\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8462,"ts":1714967788.708,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a st\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a stat\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8463,"ts":1714967788.913,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a stat\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a state\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8464,"ts":1714967788.966,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a state\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a stateme\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8465,"ts":1714967789.142,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a stateme\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8466,"ts":1714967789.334,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8467,"ts":1714967789.709,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8468,"ts":1714967789.812,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8469,"ts":1714967789.947,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (wh\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8470,"ts":1714967790.047,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (wh\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8471,"ts":1714967790.419,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8472,"ts":1714967790.502,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8473,"ts":1714967790.602,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8474,"ts":1714967792.207,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8475,"ts":1714967792.352,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (whi\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8476,"ts":1714967792.445,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (whi\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (whic\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8477,"ts":1714967792.493,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (whic\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8478,"ts":1714967792.581,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8479,"ts":1714967792.742,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8480,"ts":1714967792.875,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8481,"ts":1714967792.978,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8482,"ts":1714967793.296,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is w\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is wha\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8483,"ts":1714967793.396,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is wha\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8484,"ts":1714967793.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8485,"ts":1714967793.592,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8486,"ts":1714967793.853,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what t\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8487,"ts":1714967793.981,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8488,"ts":1714967794.224,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8489,"ts":1714967794.477,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n/\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n//\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8490,"ts":1714967794.633,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n//\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8491,"ts":1714967794.751,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8492,"ts":1714967794.98,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `k\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8493,"ts":1714967795.602,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `k\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8494,"ts":1714967795.778,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kin\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8495,"ts":1714967795.846,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind`\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8496,"ts":1714967796.066,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind`\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8497,"ts":1714967796.692,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8498,"ts":1714967797.167,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` a\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` at\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8499,"ts":1714967797.32,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` at\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8500,"ts":1714967797.503,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attr\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attri\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8501,"ts":1714967797.694,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attri\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attrib\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8502,"ts":1714967797.793,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attrib\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribu\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8503,"ts":1714967797.893,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribu\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8504,"ts":1714967798.05,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8505,"ts":1714967798.098,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8506,"ts":1714967798.151,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute i\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8507,"ts":1714967798.259,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8508,"ts":1714967798.375,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is \nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is f\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8509,"ts":1714967798.973,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is f\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8510,"ts":1714967799.016,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for)\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8511,"ts":1714967799.263,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for)\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8512,"ts":1714967799.545,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which is what the\n// `kind` attribute is for).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which wi).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8513,"ts":1714967804.97,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which wi).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which wil).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8514,"ts":1714967805.208,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which wil).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8515,"ts":1714967805.334,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8516,"ts":1714967805.437,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will h).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8517,"ts":1714967805.531,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will h).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will ha).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8518,"ts":1714967805.631,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will ha).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8519,"ts":1714967805.731,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8520,"ts":1714967805.931,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8521,"ts":1714967806.304,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8522,"ts":1714967806.491,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n/).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8523,"ts":1714967806.95,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n/).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n//).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8524,"ts":1714967807.094,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n//).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8525,"ts":1714967807.227,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8526,"ts":1714967807.445,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `k).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8527,"ts":1714967807.741,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `k).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kin).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8528,"ts":1714967807.926,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kin).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8529,"ts":1714967807.986,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8530,"ts":1714967808.265,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind =).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8531,"ts":1714967808.365,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind =).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind = ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8532,"ts":1714967808.494,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind = ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind =).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8533,"ts":1714967808.796,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind =).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8534,"ts":1714967808.95,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8535,"ts":1714967809.111,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind:).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8536,"ts":1714967809.347,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind:).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8537,"ts":1714967809.427,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \").\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8538,"ts":1714967809.564,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \").\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"t).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8539,"ts":1714967809.961,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"t).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"typ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8540,"ts":1714967810.098,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"typ).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8541,"ts":1714967810.199,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\").\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8542,"ts":1714967810.398,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\").\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8543,"ts":1714967810.802,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"pat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8544,"ts":1714967818.914,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"/\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8545,"ts":1714967819.512,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"/\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"//\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8546,"ts":1714967819.648,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"//\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8547,"ts":1714967819.776,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// P\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8548,"ts":1714967819.892,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// P\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Pro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8549,"ts":1714967820.043,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Pro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Prod\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8550,"ts":1714967820.212,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Prod\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produ\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8551,"ts":1714967820.336,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produ\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8552,"ts":1714967820.442,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8553,"ts":1714967820.552,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8554,"ts":1714967820.793,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a li\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8555,"ts":1714967821.029,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a li\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a lis\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8556,"ts":1714967821.065,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a lis\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8557,"ts":1714967821.149,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8558,"ts":1714967821.217,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list o\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8559,"ts":1714967821.28,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list o\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8560,"ts":1714967821.479,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of v\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8561,"ts":1714967826.898,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of v\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of vr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8562,"ts":1714967827.247,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of vr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of v\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8563,"ts":1714967827.6,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of v\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of va\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8564,"ts":1714967827.685,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of va\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of var\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8565,"ts":1714967827.833,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of var\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of vari\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8566,"ts":1714967827.935,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of vari\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of varia\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8567,"ts":1714967828.061,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of varia\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variab\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8568,"ts":1714967828.244,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variab\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variabl\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8569,"ts":1714967828.365,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variabl\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8570,"ts":1714967828.45,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8571,"ts":1714967828.527,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable n\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8572,"ts":1714967828.6,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable n\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable na\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8573,"ts":1714967828.675,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable na\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable name\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8574,"ts":1714967828.824,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable name\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8575,"ts":1714967828.925,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8576,"ts":1714967828.966,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8577,"ts":1714967829.393,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8578,"ts":1714967829.449,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8579,"ts":1714967829.51,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8580,"ts":1714967829.626,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from a\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8581,"ts":1714967829.812,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from a\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from a \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8582,"ts":1714967829.992,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names from a \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8583,"ts":1714967832.391,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fro\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8584,"ts":1714967832.694,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names fr\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names f\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8585,"ts":1714967832.866,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names f\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8586,"ts":1714967833.286,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of variable names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8587,"ts":1714967834.778,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of n\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8588,"ts":1714967834.871,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of n\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of na\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8589,"ts":1714967834.958,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of na\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of name\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8590,"ts":1714967835.063,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of name\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8591,"ts":1714967835.195,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8592,"ts":1714967835.224,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names t\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8593,"ts":1714967835.613,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names t\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names tha\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8594,"ts":1714967835.712,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names tha\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8595,"ts":1714967835.801,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8596,"ts":1714967835.874,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that a\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8597,"ts":1714967837.837,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that a\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8598,"ts":1714967837.996,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8599,"ts":1714967838.052,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are b\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8600,"ts":1714967838.258,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are b\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bou\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8601,"ts":1714967838.358,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bou\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are boun\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8602,"ts":1714967838.586,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are boun\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8603,"ts":1714967838.811,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound w\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8604,"ts":1714967839.2,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound w\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound wh\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8605,"ts":1714967839.296,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound wh\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8606,"ts":1714967839.496,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8607,"ts":1714967839.536,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when t\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8608,"ts":1714967839.62,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when t\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when th\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8609,"ts":1714967839.679,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when th\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8610,"ts":1714967839.844,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the p\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8611,"ts":1714967840.033,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the p\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pa\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8612,"ts":1714967840.162,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pa\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pat\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8613,"ts":1714967840.298,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pat\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the patt\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8614,"ts":1714967840.426,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the patt\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the patter\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8615,"ts":1714967840.643,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the patter\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8616,"ts":1714967840.677,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8617,"ts":1714967840.828,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern p\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8618,"ts":1714967840.963,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern p\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8619,"ts":1714967841.229,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern ma\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8620,"ts":1714967841.417,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern ma\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern mat\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8621,"ts":1714967841.516,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern mat\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matc\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8622,"ts":1714967841.737,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matc\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern match\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8623,"ts":1714967841.827,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern match\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8624,"ts":1714967841.946,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8625,"ts":1714967843.325,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches \npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches s\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8626,"ts":1714967843.428,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches s\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches su\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8627,"ts":1714967843.504,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches su\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches suc\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8628,"ts":1714967843.594,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches suc\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succ\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8629,"ts":1714967843.697,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succ\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succe\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8630,"ts":1714967843.778,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succe\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succee\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8631,"ts":1714967843.932,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succee\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succe\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8632,"ts":1714967844.281,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succe\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succes\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8633,"ts":1714967844.401,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches succes\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches success\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8634,"ts":1714967844.533,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches success\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successf\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8635,"ts":1714967844.67,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successf\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfu\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8636,"ts":1714967844.779,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfu\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successful\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8637,"ts":1714967844.978,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successful\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfull\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8638,"ts":1714967845.146,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfull\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8639,"ts":1714967845.227,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8640,"ts":1714967845.831,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns-top","idx":598},{"idx":597,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns-top","idx":598},{"idx":597,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":true}},"nsPrev":{"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":false}},"id":8641,"ts":1714967848.752,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns-top","idx":36},{"idx":35,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns-top","idx":36},{"idx":35,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":true}},"nsPrev":{"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":false}},"id":8642,"ts":1714967852.485,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns-top","idx":216},{"idx":215,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns-top","idx":216},{"idx":215,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"216":{"type":"normal","top":215,"children":[1535,1437,1548,34,69,24,802,79],"id":216,"collapsed":false}},"nsPrev":{"216":{"type":"normal","top":215,"children":[1535,1437,1548,34,69,24,802,79],"id":216,"collapsed":true}},"id":8643,"ts":1714967856.502,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns-top","idx":212},{"idx":211,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns-top","idx":212},{"idx":211,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":true}},"nsPrev":{"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":false}},"id":8644,"ts":1714967858.252,"libraryRoot":""}],"clipboard":[],"hover":[],"regs":{},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns-top","idx":212},{"idx":211,"type":"start"}]}],"cards":[{"path":[],"top":0}],"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,214,212,36,598,1059,575],"type":"normal"},"1":{"id":1,"top":0,"children":[],"type":"normal"},"3":{"type":"normal","top":2,"children":[],"id":3},"9":{"type":"normal","top":8,"children":[],"id":9,"plugin":{"id":"evaluator","options":"bootstrap.js"},"collapsed":false},"22":{"type":"normal","top":21,"children":[370],"id":22},"24":{"type":"normal","top":23,"children":[],"id":24},"26":{"type":"normal","top":25,"children":[28,30],"id":26,"collapsed":true},"28":{"type":"normal","top":27,"children":[],"id":28},"30":{"type":"normal","top":29,"children":[],"id":30},"34":{"type":"normal","top":33,"children":[],"id":34},"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":true},"43":{"type":"normal","top":42,"children":[],"id":43},"58":{"type":"normal","top":57,"children":[],"id":58},"69":{"type":"normal","top":68,"children":[],"id":69},"71":{"type":"normal","top":70,"children":[],"id":71},"77":{"type":"normal","top":76,"children":[],"id":77},"79":{"type":"normal","top":78,"children":[],"id":79,"plugin":{"id":"fixture","options":null}},"99":{"type":"normal","top":98,"children":[110],"id":99,"collapsed":true},"110":{"type":"normal","top":109,"children":[],"id":110},"112":{"type":"normal","top":111,"children":[],"id":112},"150":{"type":"normal","top":149,"children":[1424],"id":150},"189":{"type":"normal","top":188,"children":[],"id":189},"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":true},"214":{"type":"normal","top":213,"children":[26,99,58,71,150,112,1023],"id":214,"collapsed":true},"216":{"type":"normal","top":215,"children":[1535,1437,1548,34,69,24,802,79],"id":216,"collapsed":false},"218":{"type":"normal","top":217,"id":218,"children":[189,77,776],"collapsed":false},"220":{"type":"normal","top":219,"children":[222,226,230],"id":220,"collapsed":false},"222":{"type":"normal","top":221,"children":[],"id":222},"226":{"type":"normal","top":225,"children":[],"id":226},"230":{"type":"normal","top":229,"children":[],"id":230,"plugin":{"id":"fixture","options":null}},"287":{"type":"normal","top":286,"children":[1578],"id":287},"336":{"type":"normal","top":335,"children":[456],"id":336},"370":{"type":"normal","top":369,"children":[],"id":370,"plugin":{"id":"fixture","options":null}},"421":{"type":"normal","top":420,"id":421,"children":[]},"423":{"type":"normal","top":422,"children":[],"id":423},"456":{"type":"normal","top":455,"children":[],"id":456,"plugin":{"id":"fixture","options":null}},"571":{"type":"normal","top":570,"children":[],"id":571},"573":{"type":"normal","top":572,"children":[],"id":573},"575":{"type":"normal","top":576,"children":[],"id":575},"594":{"type":"normal","top":593,"children":[],"id":594},"596":{"type":"normal","top":595,"children":[],"id":596},"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":true},"600":{"type":"normal","top":599,"children":[602],"id":600},"602":{"type":"normal","top":601,"children":[],"id":602,"plugin":{"id":"fixture","options":null}},"612":{"type":"normal","top":611,"children":[],"id":612},"614":{"type":"normal","top":613,"children":[],"id":614},"690":{"type":"normal","top":689,"children":[694],"id":690},"694":{"type":"normal","top":693,"children":[],"id":694,"plugin":{"id":"fixture","options":null}},"739":{"type":"normal","top":738,"children":[741],"id":739},"741":{"type":"normal","top":740,"children":[],"id":741},"755":{"type":"normal","top":754,"children":[1401,809,811,807],"id":755,"collapsed":false},"776":{"type":"normal","top":775,"children":[],"id":776,"plugin":{"id":"fixture","options":null}},"802":{"type":"normal","id":802,"top":803,"children":[]},"807":{"type":"normal","top":806,"children":[],"id":807},"809":{"type":"normal","top":808,"children":[],"id":809},"811":{"type":"normal","top":810,"children":[],"id":811},"873":{"type":"normal","top":872,"children":[1365],"id":873},"878":{"type":"normal","id":878,"top":879,"children":[],"display":{"id":"none","options":null}},"892":{"type":"normal","id":892,"top":893,"children":[],"display":{"id":"none","options":null},"collapsed":false},"924":{"type":"normal","id":924,"top":925,"children":[],"display":{"id":"none","options":null}},"934":{"type":"normal","id":934,"top":935,"children":[],"display":{"id":"none","options":null}},"955":{"type":"normal","id":955,"top":956,"children":[],"display":{"id":"none","options":null}},"969":{"type":"normal","id":969,"top":970,"children":[],"display":{"id":"none","options":null}},"998":{"type":"normal","top":997,"children":[],"id":998},"1023":{"type":"normal","top":1022,"children":[],"id":1023},"1059":{"type":"normal","top":1058,"children":[9,571,594,596,739,755,573],"id":1059,"collapsed":true},"1067":{"type":"normal","top":1066,"children":[],"id":1067,"plugin":{"id":"fixture","options":null}},"1078":{"type":"normal","top":1077,"children":[],"id":1078},"1106":{"type":"normal","top":1105,"children":[],"id":1106,"plugin":{"id":"fixture","options":null}},"1294":{"type":"normal","top":1293,"id":1294,"children":[43,1078,1067],"collapsed":false},"1296":{"type":"normal","top":1295,"children":[998,1106],"id":1296,"collapsed":false},"1365":{"type":"normal","top":1364,"children":[],"id":1365,"plugin":{"id":"fixture","options":null}},"1401":{"type":"normal","top":1400,"id":1401,"children":[],"plugin":{"id":"fixture","options":null}},"1424":{"type":"normal","top":1423,"children":[],"id":1424,"plugin":{"id":"fixture","options":null}},"1437":{"type":"normal","top":1436,"children":[],"id":1437},"1535":{"type":"normal","top":1534,"id":1535,"children":[]},"1548":{"type":"normal","top":1547,"children":[],"id":1548},"1578":{"type":"normal","top":1577,"children":[],"id":1578,"plugin":{"id":"fixture","options":null}},"1645":{"type":"normal","top":1644,"children":[],"id":1645},"1675":{"type":"normal","top":1674,"id":1675,"children":[]}},"highlight":[],"evaluator":":js:"}