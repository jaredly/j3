{"map":{"0":{"type":"rich-text","contents":[{"id":"8fd26af0-7082-4132-96f0-eb9bd9a651aa","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"Bootstrap (js) parser + evaluator","styles":{}}],"children":[]}],"loc":0},"2":{"type":"rich-text","contents":[{"id":"68285dbb-f6ad-428e-a83c-89f93b2af3cf","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because we're using a structured editor for our language, the job of parsing is quite a bit simpler; we just need to turn the CST into the AST, instead of messing around with tokenizing, counting parentheses, etc. In lisp parlance, we've skipped the \"tokenizer\" and \"reader\" steps.","styles":{}}],"children":[]}],"loc":2},"8":{"type":"raw-code","lang":"javascript","raw":"({type: 'fns', prelude,\n  compile, compile_stmt,\n  parse_stmt: parseStmt, parse_expr: parse,\n  names,\n  externals_stmt: externals,\n  externals_expr: e => externals_expr(e, []),\n  fromNode: x => x,\n  toNode: x => x})","loc":8},"17":{"type":"blank","loc":17},"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted compiler.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21},"23":{"type":"raw-code","lang":"javascript","raw":"const c = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23},"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}\n// unwrap a list into a javascript array\nconst unwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]\n","loc":25},"33":{"type":"raw-code","lang":"javascript","raw":"const parse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33},"35":{"type":"rich-text","contents":[{"id":"d75f4bc9-5f31-4967-b242-4c02865ab461","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Tree-Walking Evaluator","styles":{}}],"children":[]}],"loc":35},"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconst parsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42},"57":{"type":"raw-code","lang":"javascript","raw":"const pair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57},"68":{"type":"raw-code","lang":"javascript","raw":"const forms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68},"76":{"type":"raw-code","lang":"javascript","raw":"const parsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76},"78":{"type":"list","values":[80,81,82],"loc":78},"80":{"type":"identifier","text":",","loc":80},"81":{"type":"raw-code","lang":"javascript","raw":"v => valueToString(parse(v))","loc":81},"82":{"type":"array","values":[83,116,1202,1173,1165,1189,127,152,170,191,784],"loc":82},"83":{"type":"list","values":[84,88,1188],"loc":83},"84":{"type":"identifier","text":",","loc":84},"86":{"type":"blank","loc":86},"87":{"type":"identifier","text":"@","loc":87},"88":{"type":"list","values":[87,89],"loc":88},"89":{"type":"identifier","text":"1","loc":89},"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconst valueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111},"116":{"type":"list","values":[117,1163,1172],"loc":116},"117":{"type":"identifier","text":",","loc":117},"118":{"type":"array","values":[],"loc":118},"119":{"type":"blank","loc":119},"127":{"type":"list","values":[128,129,1506],"loc":127},"128":{"type":"identifier","text":",","loc":128},"129":{"type":"list","values":[131,132,133],"loc":129},"130":{"type":"blank","loc":130},"131":{"type":"identifier","text":"fn","loc":131},"132":{"type":"array","values":[136,1505],"loc":132},"133":{"type":"identifier","text":"1","loc":133},"136":{"type":"identifier","text":"a","loc":136},"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconst makePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149},"152":{"type":"list","values":[153,154,1184],"loc":152},"153":{"type":"identifier","text":",","loc":153},"154":{"type":"list","values":[156,157],"loc":154},"155":{"type":"blank","loc":155},"156":{"type":"identifier","text":"@","loc":156},"157":{"type":"list","values":[160,161,162,163,164,166],"loc":157},"159":{"type":"blank","loc":159},"160":{"type":"identifier","text":"match","loc":160},"161":{"type":"identifier","text":"x","loc":161},"162":{"type":"identifier","text":"1","loc":162},"163":{"type":"identifier","text":"2","loc":163},"164":{"type":"string","first":165,"templates":[],"loc":164},"165":{"type":"stringText","loc":165,"text":"hi"},"166":{"type":"identifier","text":"1","loc":166},"170":{"type":"list","values":[171,172,1502],"loc":170},"171":{"type":"identifier","text":",","loc":171},"172":{"type":"list","values":[174,175],"loc":172},"173":{"type":"blank","loc":173},"174":{"type":"identifier","text":"@","loc":174},"175":{"type":"list","values":[178,179,186],"loc":175},"177":{"type":"blank","loc":177},"178":{"type":"identifier","text":"let","loc":178},"179":{"type":"array","values":[180,185],"loc":179},"180":{"type":"list","values":[181,182,184],"loc":180},"181":{"type":"identifier","text":",","loc":181},"182":{"type":"identifier","text":"a","loc":182},"184":{"type":"identifier","text":"b","loc":184},"185":{"type":"identifier","text":"c","loc":185},"186":{"type":"identifier","text":"d","loc":186},"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconst p = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188},"191":{"type":"list","values":[192,193,1503],"loc":191},"192":{"type":"identifier","text":",","loc":192},"193":{"type":"list","values":[195,196],"loc":193},"194":{"type":"blank","loc":194},"195":{"type":"identifier","text":"@","loc":195},"196":{"type":"list","values":[200,201,209],"loc":196},"198":{"type":"blank","loc":198},"200":{"type":"identifier","text":"let","loc":200},"201":{"type":"array","values":[202,208],"loc":201},"202":{"type":"array","values":[203,207],"loc":202},"203":{"type":"identifier","text":"a","loc":203},"204":{"type":"identifier","text":"b","loc":204},"207":{"type":"spread","contents":204,"loc":207},"208":{"type":"identifier","text":"c","loc":208},"209":{"type":"identifier","text":"d","loc":209},"211":{"type":"rich-text","contents":[{"id":"b188e96a-7452-4d88-8430-9cf830c2407c","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Parser","styles":{}}],"children":[]}],"loc":211},"213":{"type":"rich-text","contents":[{"id":"8e76a41f-02ae-4fa5-beb2-1c769056e297","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Prelude","styles":{}}],"children":[]},{"id":"eee0519b-267f-4dba-b79e-d5c8d1cac4ac","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some basic handy functions","styles":{}}],"children":[]}],"loc":213},"215":{"type":"rich-text","contents":[{"id":"ad2112fc-475c-4792-a999-68dc69e2495b","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Expressions","styles":{}}],"children":[]}],"loc":215},"217":{"type":"rich-text","contents":[{"id":"93144679-d97b-45e4-af01-c151bc706b2e","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Patterns","styles":{}}],"children":[]}],"loc":217},"219":{"type":"rich-text","contents":[{"id":"9a25177e-d6f3-4440-9188-01447ef87df0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Statements","styles":{}}],"children":[]}],"loc":219},"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221},"225":{"type":"raw-code","lang":"javascript","raw":"const stmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225},"229":{"type":"list","values":[231,232,233],"loc":229},"231":{"type":"identifier","text":",","loc":231},"232":{"type":"raw-code","lang":"javascript","raw":"v => valueToString(parseStmt(v))","loc":232},"233":{"type":"array","values":[234,240,1006,256],"loc":233},"234":{"type":"list","values":[235,236,1289],"loc":234},"235":{"type":"identifier","text":",","loc":235},"236":{"type":"list","values":[237,238],"loc":236},"237":{"type":"identifier","text":"@","loc":237},"238":{"type":"identifier","text":"1","loc":238},"239":{"type":"blank","loc":239},"240":{"type":"list","values":[241,242,1290],"loc":240},"241":{"type":"identifier","text":",","loc":241},"242":{"type":"list","values":[244,245],"loc":242},"243":{"type":"blank","loc":243},"244":{"type":"identifier","text":"@","loc":244},"245":{"type":"list","values":[252,253,254],"loc":245},"252":{"type":"identifier","text":"def","loc":252},"253":{"type":"identifier","text":"hi","loc":253},"254":{"type":"identifier","text":"10","loc":254},"256":{"type":"list","values":[257,258,1523],"loc":256},"257":{"type":"identifier","text":",","loc":257},"258":{"type":"list","values":[260,261],"loc":258},"259":{"type":"blank","loc":259},"260":{"type":"identifier","text":"@","loc":260},"261":{"type":"list","values":[264,265,266,270],"loc":261},"263":{"type":"blank","loc":263},"264":{"type":"identifier","text":"defn","loc":264},"265":{"type":"identifier","text":"lol","loc":265},"266":{"type":"array","values":[268,269],"loc":266},"268":{"type":"identifier","text":"a","loc":268},"269":{"type":"identifier","text":"b","loc":269},"270":{"type":"list","values":[271,272,273],"loc":270},"271":{"type":"identifier","text":"+","loc":271},"272":{"type":"identifier","text":"a","loc":272},"273":{"type":"identifier","text":"b","loc":273},"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconst evalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286},"335":{"type":"raw-code","lang":"javascript","raw":"const evalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335},"369":{"type":"list","values":[371,372,373],"loc":369},"371":{"type":"identifier","text":",","loc":371},"372":{"type":"raw-code","lang":"javascript","raw":"v => evaluate(parse(v), {'$co': a => b => pair(a,b)})","loc":372},"373":{"type":"array","values":[374,388,407,1568,539,558,582],"loc":373},"374":{"type":"list","values":[375,376,387],"loc":374},"375":{"type":"identifier","text":",","loc":375},"376":{"type":"list","values":[377,378],"loc":376},"377":{"type":"identifier","text":"@","loc":377},"378":{"type":"list","values":[381,386],"loc":378},"381":{"type":"list","values":[382,383,385],"loc":381},"382":{"type":"identifier","text":"fn","loc":382},"383":{"type":"array","values":[384],"loc":383},"384":{"type":"identifier","text":"x","loc":384},"385":{"type":"identifier","text":"1","loc":385},"386":{"type":"identifier","text":"0","loc":386},"387":{"type":"identifier","text":"1","loc":387},"388":{"type":"list","values":[389,395,391],"loc":388},"389":{"type":"identifier","text":",","loc":389},"390":{"type":"list","values":[392,393,394],"loc":390},"391":{"type":"identifier","text":"1","loc":391},"392":{"type":"identifier","text":",","loc":392},"393":{"type":"identifier","text":"1","loc":393},"394":{"type":"identifier","text":"2","loc":394},"395":{"type":"list","values":[396,397],"loc":395},"396":{"type":"identifier","text":"@","loc":396},"397":{"type":"list","values":[398,400,406],"loc":397},"398":{"type":"identifier","text":"let","loc":398},"399":{"type":"blank","loc":399},"400":{"type":"array","values":[402,390],"loc":400},"402":{"type":"list","values":[403,404,405],"loc":402},"403":{"type":"identifier","text":",","loc":403},"404":{"type":"identifier","text":"x","loc":404},"405":{"type":"identifier","text":"_","loc":405},"406":{"type":"identifier","text":"x","loc":406},"407":{"type":"list","values":[408,409,1298],"loc":407},"408":{"type":"identifier","text":",","loc":408},"409":{"type":"list","values":[412,413],"loc":409},"410":{"type":"blank","loc":410},"412":{"type":"identifier","text":"@","loc":412},"413":{"type":"list","values":[414,415,416,417,418,419],"loc":413},"414":{"type":"identifier","text":"match","loc":414},"415":{"type":"identifier","text":"3","loc":415},"416":{"type":"identifier","text":"1","loc":416},"417":{"type":"identifier","text":"2","loc":417},"418":{"type":"identifier","text":"3","loc":418},"419":{"type":"identifier","text":"10","loc":419},"420":{"type":"raw-code","lang":"javascript","raw":"const evaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420},"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconst constrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422},"455":{"type":"list","values":[457,458,459],"loc":455},"457":{"type":"identifier","text":",","loc":457},"458":{"type":"raw-code","lang":"javascript","raw":"evalStmts","loc":458},"459":{"type":"array","values":[460,468,478,495,1333,520,756,1646],"loc":459},"460":{"type":"list","values":[461,462,1309],"loc":460},"461":{"type":"identifier","text":",","loc":461},"462":{"type":"array","values":[466],"loc":462},"463":{"type":"blank","loc":463},"466":{"type":"identifier","text":"0","loc":466},"468":{"type":"list","values":[469,470,1308],"loc":468},"469":{"type":"identifier","text":",","loc":469},"470":{"type":"array","values":[472,476],"loc":470},"471":{"type":"blank","loc":471},"472":{"type":"list","values":[473,474,475],"loc":472},"473":{"type":"identifier","text":"def","loc":473},"474":{"type":"identifier","text":"n","loc":474},"475":{"type":"identifier","text":"10","loc":475},"476":{"type":"identifier","text":"n","loc":476},"478":{"type":"list","values":[479,480,1304],"loc":478},"479":{"type":"identifier","text":",","loc":479},"480":{"type":"array","values":[482,491],"loc":480},"481":{"type":"blank","loc":481},"482":{"type":"list","values":[483,484,485,487],"loc":482},"483":{"type":"identifier","text":"defn","loc":483},"484":{"type":"identifier","text":"hi","loc":484},"485":{"type":"array","values":[486],"loc":485},"486":{"type":"identifier","text":"x","loc":486},"487":{"type":"list","values":[488,489,490],"loc":487},"488":{"type":"identifier","text":",","loc":488},"489":{"type":"identifier","text":"x","loc":489},"490":{"type":"identifier","text":"2","loc":490},"491":{"type":"list","values":[492,493],"loc":491},"492":{"type":"identifier","text":"hi","loc":492},"493":{"type":"identifier","text":"5","loc":493},"495":{"type":"list","values":[496,497,1305],"loc":495},"496":{"type":"identifier","text":",","loc":496},"497":{"type":"array","values":[516],"loc":497},"498":{"type":"blank","loc":498},"499":{"type":"blank","loc":499},"506":{"type":"blank","loc":506},"516":{"type":"list","values":[517,518],"loc":516},"517":{"type":"identifier","text":"some","loc":517},"518":{"type":"identifier","text":"10","loc":518},"520":{"type":"list","values":[521,522,1306],"loc":520},"521":{"type":"identifier","text":",","loc":521},"522":{"type":"array","values":[524,532],"loc":522},"523":{"type":"blank","loc":523},"524":{"type":"list","values":[525,526,527],"loc":524},"525":{"type":"identifier","text":"deftype","loc":525},"526":{"type":"identifier","text":"lots","loc":526},"527":{"type":"list","values":[528,529,530,531],"loc":527},"528":{"type":"identifier","text":"lol","loc":528},"529":{"type":"identifier","text":"a","loc":529},"530":{"type":"identifier","text":"b","loc":530},"531":{"type":"identifier","text":"c","loc":531},"532":{"type":"list","values":[533,534,535,536],"loc":532},"533":{"type":"identifier","text":"lol","loc":533},"534":{"type":"identifier","text":"1","loc":534},"535":{"type":"identifier","text":"true","loc":535},"536":{"type":"string","first":537,"templates":[],"loc":536},"537":{"type":"stringText","loc":537,"text":"hi"},"539":{"type":"list","values":[540,541,542],"loc":539},"540":{"type":"identifier","text":",","loc":540},"541":{"type":"list","values":[544,545],"loc":541},"542":{"type":"string","first":550,"templates":[],"loc":542},"543":{"type":"stringText","loc":543,"text":""},"544":{"type":"identifier","text":"@","loc":544},"545":{"type":"string","first":546,"templates":[{"expr":548,"suffix":549}],"loc":545},"546":{"type":"stringText","loc":546,"text":"hi "},"548":{"type":"identifier","text":"1","loc":548},"549":{"type":"stringText","text":".","loc":549},"550":{"type":"stringText","loc":550,"text":"hi 1."},"553":{"type":"stringText","loc":553,"text":""},"558":{"type":"list","values":[559,563,561],"loc":558},"559":{"type":"identifier","text":",","loc":559},"560":{"type":"string","first":562,"templates":[],"loc":560},"561":{"type":"string","first":565,"templates":[],"loc":561},"562":{"type":"stringText","loc":562,"text":"hi"},"563":{"type":"list","values":[564,560],"loc":563},"564":{"type":"identifier","text":"@","loc":564},"565":{"type":"stringText","loc":565,"text":"hi"},"570":{"type":"raw-code","lang":"javascript","raw":"const makePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570},"572":{"type":"raw-code","lang":"javascript","raw":"prelude = makePrelude({evaluate,evaluateStmt,unwrapList,constrFn,sanitize,sanMap,evalPat,kwds,unescapeSlashes}) ","loc":572},"576":{"type":"blank","loc":576},"582":{"type":"list","values":[583,584,1297],"loc":582},"583":{"type":"identifier","text":",","loc":583},"584":{"type":"list","values":[587,588],"loc":584},"585":{"type":"blank","loc":585},"587":{"type":"identifier","text":"@","loc":587},"588":{"type":"list","values":[589,590,591],"loc":588},"589":{"type":"identifier","text":",","loc":589},"590":{"type":"identifier","text":"1","loc":590},"591":{"type":"identifier","text":"2","loc":591},"593":{"type":"raw-code","lang":"javascript","raw":"const compile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593},"595":{"type":"raw-code","lang":"javascript","raw":"const compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595},"597":{"type":"rich-text","contents":[{"id":"e8800480-68f3-4e7e-99c1-03c3b168698b","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Analysis","styles":{}}],"children":[]}],"loc":597},"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconst externals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599},"601":{"type":"list","values":[603,615,616],"loc":601},"603":{"type":"identifier","text":",","loc":603},"606":{"type":"identifier","text":",","loc":606},"611":{"type":"raw-code","lang":"javascript","raw":"const externals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611},"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconst pat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613},"615":{"type":"raw-code","lang":"javascript","raw":"v =>(externals(parseStmt(v)))","loc":615},"616":{"type":"array","values":[617,631,646,656,673,814],"loc":616},"617":{"type":"list","values":[606,619,1049],"loc":617},"618":{"type":"identifier","text":"@","loc":618},"619":{"type":"list","values":[618,620],"loc":619},"620":{"type":"identifier","text":"lol","loc":620},"621":{"type":"blank","loc":621},"630":{"type":"stringText","loc":630,"text":"[[\\\"lol\\\", (value), 620]]"},"631":{"type":"list","values":[632,633,1051],"loc":631},"632":{"type":"identifier","text":",","loc":632},"633":{"type":"list","values":[635,636],"loc":633},"634":{"type":"blank","loc":634},"635":{"type":"identifier","text":"@","loc":635},"636":{"type":"list","values":[637,638,640],"loc":636},"637":{"type":"identifier","text":"fn","loc":637},"638":{"type":"array","values":[644],"loc":638},"639":{"type":"identifier","text":",","loc":639},"640":{"type":"list","values":[641,642],"loc":640},"641":{"type":"identifier","text":"+","loc":641},"642":{"type":"identifier","text":"x","loc":642},"644":{"type":"list","values":[639,645],"loc":644},"645":{"type":"identifier","text":"x","loc":645},"646":{"type":"list","values":[647,648,1055],"loc":646},"647":{"type":"identifier","text":",","loc":647},"648":{"type":"list","values":[650,651],"loc":648},"649":{"type":"blank","loc":649},"650":{"type":"identifier","text":"@","loc":650},"651":{"type":"string","first":652,"templates":[{"expr":653,"suffix":654}],"loc":651},"652":{"type":"stringText","loc":652,"text":"hi "},"653":{"type":"identifier","text":"x","loc":653},"654":{"type":"stringText","text":"","loc":654},"656":{"type":"list","values":[657,658,1054],"loc":656},"657":{"type":"identifier","text":",","loc":657},"658":{"type":"list","values":[660,661],"loc":658},"659":{"type":"blank","loc":659},"660":{"type":"identifier","text":"@","loc":660},"661":{"type":"list","values":[662,663,664,670],"loc":661},"662":{"type":"identifier","text":"match","loc":662},"663":{"type":"identifier","text":"m","loc":663},"664":{"type":"list","values":[666,668,669],"loc":664},"665":{"type":"identifier","text":"+","loc":665},"666":{"type":"identifier","text":",","loc":666},"668":{"type":"identifier","text":"a","loc":668},"669":{"type":"identifier","text":"b","loc":669},"670":{"type":"list","values":[665,671],"loc":670},"671":{"type":"identifier","text":"a","loc":671},"673":{"type":"list","values":[674,675,1052],"loc":673},"674":{"type":"identifier","text":",","loc":674},"675":{"type":"list","values":[677,678],"loc":675},"676":{"type":"blank","loc":676},"677":{"type":"identifier","text":"@","loc":677},"678":{"type":"list","values":[681,682,685],"loc":678},"680":{"type":"blank","loc":680},"681":{"type":"identifier","text":"let","loc":681},"682":{"type":"array","values":[683,684],"loc":682},"683":{"type":"identifier","text":"x","loc":683},"684":{"type":"identifier","text":"2","loc":684},"685":{"type":"list","values":[686,687],"loc":685},"686":{"type":"identifier","text":"+","loc":686},"687":{"type":"identifier","text":"x","loc":687},"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconst names = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689},"693":{"type":"list","values":[696,697,699],"loc":693},"696":{"type":"identifier","text":",","loc":696},"697":{"type":"raw-code","lang":"javascript","raw":"v => names(parseStmt(v))","loc":697},"699":{"type":"array","values":[700,707,717],"loc":699},"700":{"type":"list","values":[701,702,1047],"loc":700},"701":{"type":"identifier","text":",","loc":701},"702":{"type":"list","values":[703,704],"loc":702},"703":{"type":"identifier","text":"@","loc":703},"704":{"type":"identifier","text":"hi","loc":704},"705":{"type":"blank","loc":705},"707":{"type":"list","values":[708,709,1056],"loc":707},"708":{"type":"identifier","text":",","loc":708},"709":{"type":"list","values":[711,712],"loc":709},"710":{"type":"blank","loc":710},"711":{"type":"identifier","text":"@","loc":711},"712":{"type":"list","values":[713,714,715],"loc":712},"713":{"type":"identifier","text":"def","loc":713},"714":{"type":"identifier","text":"x","loc":714},"715":{"type":"identifier","text":"10","loc":715},"717":{"type":"list","values":[718,719,1057],"loc":717},"718":{"type":"identifier","text":",","loc":718},"719":{"type":"list","values":[721,722],"loc":719},"720":{"type":"blank","loc":720},"721":{"type":"identifier","text":"@","loc":721},"722":{"type":"list","values":[723,724,727,732],"loc":722},"723":{"type":"identifier","text":"deftype","loc":723},"724":{"type":"list","values":[725,726],"loc":724},"725":{"type":"identifier","text":"option","loc":725},"726":{"type":"identifier","text":"x","loc":726},"727":{"type":"list","values":[730,731],"loc":727},"729":{"type":"blank","loc":729},"730":{"type":"identifier","text":"some","loc":730},"731":{"type":"identifier","text":"x","loc":731},"732":{"type":"list","values":[733],"loc":732},"733":{"type":"identifier","text":"none","loc":733},"738":{"type":"raw-code","lang":"javascript","raw":"const testCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738},"740":{"type":"list","values":[742,743],"loc":740},"742":{"type":"raw-code","lang":"javascript","raw":"testCompileStmt","loc":742},"743":{"type":"list","values":[744,747,748,750],"loc":743},"744":{"type":"identifier","text":"deftype","loc":744},"747":{"type":"identifier","text":"card","loc":747},"748":{"type":"list","values":[749],"loc":748},"749":{"type":"identifier","text":"red","loc":749},"750":{"type":"list","values":[751],"loc":750},"751":{"type":"identifier","text":"black","loc":751},"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconst sanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754},"756":{"type":"list","values":[757,758,1307],"loc":756},"757":{"type":"identifier","text":",","loc":757},"758":{"type":"array","values":[760,770],"loc":758},"759":{"type":"blank","loc":759},"760":{"type":"list","values":[761,762,765],"loc":760},"761":{"type":"identifier","text":"deftype","loc":761},"762":{"type":"identifier","text":"a","loc":762},"765":{"type":"list","values":[767,768,769],"loc":765},"767":{"type":"identifier","text":"com,","loc":767},"768":{"type":"identifier","text":"1","loc":768},"769":{"type":"identifier","text":"2","loc":769},"770":{"type":"list","values":[771,772,773],"loc":770},"771":{"type":"identifier","text":"com,","loc":771},"772":{"type":"identifier","text":"1","loc":772},"773":{"type":"identifier","text":"2","loc":773},"775":{"type":"list","values":[1219,1220,1221],"loc":775},"784":{"type":"list","values":[785,786,1670],"loc":784},"785":{"type":"identifier","text":",","loc":785},"786":{"type":"list","values":[788,789],"loc":786},"787":{"type":"blank","loc":787},"788":{"type":"identifier","text":"@","loc":788},"789":{"type":"array","values":[790,794],"loc":789},"790":{"type":"identifier","text":"a","loc":790},"791":{"type":"identifier","text":"b","loc":791},"794":{"type":"spread","contents":791,"loc":794},"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803},"806":{"type":"raw-code","lang":"javascript","raw":"sanitize('for')","loc":806},"808":{"type":"raw-code","lang":"javascript","raw":"sanMap = {\n    // '$$$$' gets interpreted by replaceAll as '$$', for reasons\n    $: '$$$$',\n    '-': '_',\n    '+': '$pl',\n    '*': '$ti',\n    '=': '$eq',\n    '>': '$gt',\n    '<': '$lt',\n    \"'\": '$qu',\n    '\"': '$dq',\n    ',': '$co',\n    '/': '$sl',\n    ';': '$semi',\n    '@': '$at',\n    '!': '$ex',\n    '|': '$bar',\n    '()': '$unit',\n    '?': '$qe',\n  };\n","loc":808},"810":{"type":"raw-code","lang":"javascript","raw":"kwds = (() => {\n  const kwds =\n    'case new var const let if else return super break while for default';\n  const rx = [];\n  return kwds.split(' ')\n})();\n","loc":810},"814":{"type":"list","values":[815,816,1053],"loc":814},"815":{"type":"identifier","text":",","loc":815},"816":{"type":"list","values":[818,837],"loc":816},"817":{"type":"blank","loc":817},"818":{"type":"identifier","text":"@","loc":818},"819":{"type":"blank","loc":819},"821":{"type":"blank","loc":821},"837":{"loc":837,"type":"list","values":[838,839,840,845]},"838":{"loc":838,"type":"identifier","text":"defn"},"839":{"loc":839,"type":"identifier","text":"pat-loop"},"840":{"loc":840,"type":"array","values":[841,842,843,844]},"841":{"loc":841,"type":"identifier","text":"target"},"842":{"loc":842,"type":"identifier","text":"args"},"843":{"loc":843,"type":"identifier","text":"i"},"844":{"loc":844,"type":"identifier","text":"inner"},"845":{"loc":845,"type":"list","values":[846,847,848,849,850,854]},"846":{"loc":846,"type":"identifier","text":"match"},"847":{"loc":847,"type":"identifier","text":"args"},"848":{"loc":848,"type":"array","values":[]},"849":{"loc":849,"type":"identifier","text":"inner"},"850":{"loc":850,"type":"array","values":[851,852]},"851":{"loc":851,"type":"identifier","text":"arg"},"852":{"loc":852,"type":"spread","contents":853},"853":{"loc":853,"type":"identifier","text":"rest"},"854":{"loc":854,"type":"list","values":[855,856,857,863]},"855":{"loc":855,"type":"identifier","text":"compile-pat"},"856":{"loc":856,"type":"identifier","text":"arg"},"857":{"loc":857,"type":"string","first":858,"templates":[{"expr":859,"suffix":860},{"expr":861,"suffix":862}]},"858":{"loc":858,"type":"stringText","text":""},"859":{"loc":859,"type":"identifier","text":"target"},"860":{"loc":860,"type":"stringText","text":"["},"861":{"loc":861,"type":"identifier","text":"i"},"862":{"loc":862,"type":"stringText","text":"]"},"863":{"loc":863,"type":"list","values":[864,865,866,867,871]},"864":{"loc":864,"type":"identifier","text":"pat-loop"},"865":{"loc":865,"type":"identifier","text":"target"},"866":{"loc":866,"type":"identifier","text":"rest"},"867":{"loc":867,"type":"list","values":[868,869,870]},"868":{"loc":868,"type":"identifier","text":"+"},"869":{"loc":869,"type":"identifier","text":"i"},"870":{"loc":870,"type":"identifier","text":"1"},"871":{"loc":871,"type":"identifier","text":"inner"},"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconst unescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872},"879":{"loc":879,"type":"list","values":[880,881,884,886]},"880":{"loc":880,"type":"identifier","text":"deftype"},"881":{"loc":881,"type":"list","values":[882,883]},"882":{"loc":882,"type":"identifier","text":"list"},"883":{"loc":883,"type":"identifier","text":"a"},"884":{"loc":884,"type":"list","values":[885]},"885":{"loc":885,"type":"identifier","text":"nil"},"886":{"loc":886,"type":"list","values":[887,888,889]},"887":{"loc":887,"type":"identifier","text":"cons"},"888":{"loc":888,"type":"identifier","text":"a"},"889":{"loc":889,"type":"list","values":[890,891]},"890":{"loc":890,"type":"identifier","text":"list"},"891":{"loc":891,"type":"identifier","text":"a"},"893":{"loc":893,"type":"list","values":[894,895,896,899,902,906,910,915]},"894":{"loc":894,"type":"identifier","text":"deftype"},"895":{"loc":895,"type":"identifier","text":"expr"},"896":{"loc":896,"type":"list","values":[897,898]},"897":{"loc":897,"type":"identifier","text":"eprim"},"898":{"loc":898,"type":"identifier","text":"prim"},"899":{"loc":899,"type":"list","values":[900,901]},"900":{"loc":900,"type":"identifier","text":"evar"},"901":{"loc":901,"type":"identifier","text":"string"},"902":{"loc":902,"type":"list","values":[903,904,905]},"903":{"loc":903,"type":"identifier","text":"elambda"},"904":{"loc":904,"type":"identifier","text":"string"},"905":{"loc":905,"type":"identifier","text":"expr"},"906":{"loc":906,"type":"list","values":[907,908,909]},"907":{"loc":907,"type":"identifier","text":"eapp"},"908":{"loc":908,"type":"identifier","text":"expr"},"909":{"loc":909,"type":"identifier","text":"expr"},"910":{"loc":910,"type":"list","values":[911,912,913,914]},"911":{"loc":911,"type":"identifier","text":"elet"},"912":{"loc":912,"type":"identifier","text":"string"},"913":{"loc":913,"type":"identifier","text":"expr"},"914":{"loc":914,"type":"identifier","text":"expr"},"915":{"loc":915,"type":"list","values":[916,917,918]},"916":{"loc":916,"type":"identifier","text":"ematch"},"917":{"loc":917,"type":"identifier","text":"expr"},"918":{"loc":918,"type":"list","values":[919,920]},"919":{"loc":919,"type":"identifier","text":"list"},"920":{"loc":920,"type":"list","values":[921,922,923]},"921":{"loc":921,"type":"identifier","text":","},"922":{"loc":922,"type":"identifier","text":"pat"},"923":{"loc":923,"type":"identifier","text":"expr"},"925":{"loc":925,"type":"list","values":[926,927,928,931]},"926":{"loc":926,"type":"identifier","text":"deftype"},"927":{"loc":927,"type":"identifier","text":"prim"},"928":{"loc":928,"type":"list","values":[929,930]},"929":{"loc":929,"type":"identifier","text":"pint"},"930":{"loc":930,"type":"identifier","text":"int"},"931":{"loc":931,"type":"list","values":[932,933]},"932":{"loc":932,"type":"identifier","text":"pbool"},"933":{"loc":933,"type":"identifier","text":"bool"},"935":{"loc":935,"type":"list","values":[936,937,938,940,943,946,949]},"936":{"loc":936,"type":"identifier","text":"deftype"},"937":{"loc":937,"type":"identifier","text":"pat"},"938":{"loc":938,"type":"list","values":[939]},"939":{"loc":939,"type":"identifier","text":"pany"},"940":{"loc":940,"type":"list","values":[941,942]},"941":{"loc":941,"type":"identifier","text":"pvar"},"942":{"loc":942,"type":"identifier","text":"string"},"943":{"loc":943,"type":"list","values":[944,945]},"944":{"loc":944,"type":"identifier","text":"pprim"},"945":{"loc":945,"type":"identifier","text":"prim"},"946":{"loc":946,"type":"list","values":[947,948]},"947":{"loc":947,"type":"identifier","text":"pstr"},"948":{"loc":948,"type":"identifier","text":"string"},"949":{"loc":949,"type":"list","values":[950,951,952]},"950":{"loc":950,"type":"identifier","text":"pcon"},"951":{"loc":951,"type":"identifier","text":"string"},"952":{"loc":952,"type":"list","values":[953,954]},"953":{"loc":953,"type":"identifier","text":"list"},"954":{"loc":954,"type":"identifier","text":"string"},"956":{"loc":956,"type":"list","values":[957,958,959,962,966]},"957":{"loc":957,"type":"identifier","text":"deftype"},"958":{"loc":958,"type":"identifier","text":"type"},"959":{"loc":959,"type":"list","values":[960,961]},"960":{"loc":960,"type":"identifier","text":"tvar"},"961":{"loc":961,"type":"identifier","text":"int"},"962":{"loc":962,"type":"list","values":[963,964,965]},"963":{"loc":963,"type":"identifier","text":"tapp"},"964":{"loc":964,"type":"identifier","text":"type"},"965":{"loc":965,"type":"identifier","text":"type"},"966":{"loc":966,"type":"list","values":[967,968]},"967":{"loc":967,"type":"identifier","text":"tcon"},"968":{"loc":968,"type":"identifier","text":"string"},"970":{"loc":970,"type":"list","values":[971,972,973,984,988]},"971":{"loc":971,"type":"identifier","text":"deftype"},"972":{"loc":972,"type":"identifier","text":"stmt"},"973":{"loc":973,"type":"list","values":[974,975,976]},"974":{"loc":974,"type":"identifier","text":"sdeftype"},"975":{"loc":975,"type":"identifier","text":"string"},"976":{"loc":976,"type":"list","values":[977,978]},"977":{"loc":977,"type":"identifier","text":"list"},"978":{"loc":978,"type":"list","values":[979,980,981]},"979":{"loc":979,"type":"identifier","text":","},"980":{"loc":980,"type":"identifier","text":"string"},"981":{"loc":981,"type":"list","values":[982,983]},"982":{"loc":982,"type":"identifier","text":"list"},"983":{"loc":983,"type":"identifier","text":"type"},"984":{"loc":984,"type":"list","values":[985,986,987]},"985":{"loc":985,"type":"identifier","text":"sdef"},"986":{"loc":986,"type":"identifier","text":"string"},"987":{"loc":987,"type":"identifier","text":"expr"},"988":{"loc":988,"type":"list","values":[989,990]},"989":{"loc":989,"type":"identifier","text":"sexpr"},"990":{"loc":990,"type":"identifier","text":"expr"},"991":{"type":"comment-node","loc":991,"contents":879},"992":{"type":"comment-node","loc":992,"contents":893},"993":{"type":"comment-node","loc":993,"contents":925},"994":{"type":"comment-node","loc":994,"contents":935},"995":{"type":"comment-node","loc":995,"contents":956},"996":{"type":"comment-node","loc":996,"contents":970},"997":{"type":"raw-code","lang":"javascript","raw":"const parseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997},"1006":{"type":"list","values":[1007,1008,1292],"loc":1006},"1007":{"type":"identifier","text":",","loc":1007},"1008":{"type":"list","values":[1010,1011],"loc":1008},"1009":{"type":"blank","loc":1009},"1010":{"type":"identifier","text":"@","loc":1010},"1011":{"type":"list","values":[1012,1013,1016,1019],"loc":1011},"1012":{"type":"identifier","text":"deftype","loc":1012},"1013":{"type":"list","values":[1014,1015],"loc":1013},"1014":{"type":"identifier","text":"option","loc":1014},"1015":{"type":"identifier","text":"a","loc":1015},"1016":{"type":"list","values":[1017,1018],"loc":1016},"1017":{"type":"identifier","text":"some","loc":1017},"1018":{"type":"identifier","text":"a","loc":1018},"1019":{"type":"list","values":[1020],"loc":1019},"1020":{"type":"identifier","text":"none","loc":1020},"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => ['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node))","loc":1022},"1040":{"type":"blank","loc":1040},"1041":{"type":"blank","loc":1041},"1042":{"type":"blank","loc":1042},"1043":{"type":"blank","loc":1043},"1044":{"type":"blank","loc":1044},"1045":{"type":"blank","loc":1045},"1046":{"type":"blank","loc":1046},"1047":{"type":"raw-code","lang":"javascript","loc":1047,"raw":"[]"},"1048":{"type":"blank","loc":1048},"1049":{"type":"raw-code","lang":"javascript","loc":1049,"raw":"[{\"name\":\"lol\",\"kind\":\"value\",\"loc\":620}]"},"1051":{"type":"raw-code","lang":"javascript","loc":1051,"raw":"[{\"name\":\"+\",\"kind\":\"value\",\"loc\":641}]"},"1052":{"type":"raw-code","lang":"javascript","loc":1052,"raw":"[{\"name\":\"+\",\"kind\":\"value\",\"loc\":686}]"},"1053":{"type":"raw-code","lang":"javascript","loc":1053,"raw":"[{\"name\":\"compile-pat\",\"kind\":\"value\",\"loc\":855},{\"name\":\"+\",\"kind\":\"value\",\"loc\":868}]"},"1054":{"type":"raw-code","lang":"javascript","loc":1054,"raw":"[{\"name\":\"m\",\"kind\":\"value\",\"loc\":663},{\"name\":\"+\",\"kind\":\"value\",\"loc\":665}]"},"1055":{"type":"raw-code","lang":"javascript","loc":1055,"raw":"[{\"name\":\"x\",\"kind\":\"value\",\"loc\":653}]"},"1056":{"type":"raw-code","lang":"javascript","loc":1056,"raw":"[{\"name\":\"x\",\"kind\":\"value\",\"loc\":712}]"},"1057":{"type":"raw-code","lang":"javascript","loc":1057,"raw":"[{\"name\":\"some\",\"kind\":\"value\",\"loc\":730},{\"name\":\"none\",\"kind\":\"value\",\"loc\":733}]"},"1058":{"type":"rich-text","contents":[{"id":"ca311a47-d079-401a-9fb9-92d6be75db3e","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":2},"content":[{"type":"text","text":"Packaging it up as a Compiler for the structured editor","styles":{}}],"children":[]}],"loc":1058},"1062":{"type":"list","values":[140],"loc":1062},"1063":{"type":"blank","loc":1063},"1064":{"type":"list","values":[140],"loc":1064},"1065":{"type":"blank","loc":1065},"1066":{"type":"list","values":[1068,1069,1070],"loc":1066},"1068":{"type":"identifier","text":",","loc":1068},"1069":{"type":"raw-code","lang":"javascript","raw":"n => valueToString(parsePrim(n) ?? \"not a prim\")","loc":1069},"1070":{"type":"array","values":[1071,1098,1082,1089],"loc":1070},"1071":{"type":"list","values":[1072,1079,1432],"loc":1071},"1072":{"type":"identifier","text":",","loc":1072},"1074":{"type":"blank","loc":1074},"1075":{"type":"identifier","text":"@","loc":1075},"1077":{"type":"raw-code","lang":"javascript","raw":"parsePrim({text: '23', loc: 10})","loc":1077},"1079":{"type":"list","values":[1075,1080],"loc":1079},"1080":{"type":"identifier","text":"true","loc":1080},"1081":{"type":"blank","loc":1081},"1082":{"type":"list","values":[1083,1084,1434],"loc":1082},"1083":{"type":"identifier","text":",","loc":1083},"1084":{"type":"list","values":[1086,1087],"loc":1084},"1085":{"type":"blank","loc":1085},"1086":{"type":"identifier","text":"@","loc":1086},"1087":{"type":"identifier","text":"123","loc":1087},"1088":{"type":"blank","loc":1088},"1089":{"type":"list","values":[1090,1091,1435],"loc":1089},"1090":{"type":"identifier","text":",","loc":1090},"1091":{"type":"list","values":[1093,1094],"loc":1091},"1092":{"type":"blank","loc":1092},"1093":{"type":"identifier","text":"@","loc":1093},"1094":{"type":"identifier","text":"hi","loc":1094},"1095":{"type":"blank","loc":1095},"1098":{"type":"list","values":[1099,1100,1433],"loc":1098},"1099":{"type":"identifier","text":",","loc":1099},"1100":{"type":"list","values":[1102,1103],"loc":1100},"1101":{"type":"blank","loc":1101},"1102":{"type":"identifier","text":"@","loc":1102},"1103":{"type":"identifier","text":"false","loc":1103},"1104":{"type":"blank","loc":1104},"1105":{"type":"list","values":[1107,1108,1109],"loc":1105},"1107":{"type":"identifier","text":",","loc":1107},"1108":{"type":"raw-code","lang":"javascript","raw":"x => valueToString(parseType(x))","loc":1108},"1109":{"type":"array","values":[1110,1117,1126],"loc":1109},"1110":{"type":"list","values":[1111,1112,1116],"loc":1110},"1111":{"type":"identifier","text":",","loc":1111},"1112":{"type":"list","values":[1113,1114],"loc":1112},"1113":{"type":"identifier","text":"@","loc":1113},"1114":{"type":"identifier","text":"list","loc":1114},"1115":{"type":"blank","loc":1115},"1116":{"type":"raw-code","lang":"javascript","raw":"'(tcon \"list\" 1114)'","loc":1116},"1117":{"type":"list","values":[1118,1119,1140],"loc":1117},"1118":{"type":"identifier","text":",","loc":1118},"1119":{"type":"list","values":[1121,1122],"loc":1119},"1120":{"type":"blank","loc":1120},"1121":{"type":"identifier","text":"@","loc":1121},"1122":{"type":"list","values":[1123,1124,1143],"loc":1122},"1123":{"type":"identifier","text":"list","loc":1123},"1124":{"type":"identifier","text":"a","loc":1124},"1125":{"type":"blank","loc":1125},"1126":{"type":"list","values":[1127,1128,1141],"loc":1126},"1127":{"type":"identifier","text":",","loc":1127},"1128":{"type":"list","values":[1130,1131],"loc":1128},"1129":{"type":"blank","loc":1129},"1130":{"type":"identifier","text":"@","loc":1130},"1131":{"type":"list","values":[1135,1136,1138],"loc":1131},"1135":{"type":"identifier","text":"fn","loc":1135},"1136":{"type":"array","values":[1137],"loc":1136},"1137":{"type":"identifier","text":"x","loc":1137},"1138":{"type":"identifier","text":"10","loc":1138},"1139":{"type":"blank","loc":1139},"1140":{"type":"raw-code","lang":"javascript","loc":1140,"raw":"'(tapp (tcon \"list\" 1123) (tcon \"a\" 1124) 1122)'"},"1141":{"type":"raw-code","lang":"javascript","loc":1141,"raw":"'(tapp (tapp (tcon \"->\" 1131) (tcon \"x\" 1137) 1131) (tcon \"10\" 1138) 1131)'"},"1143":{"type":"comment","text":" a comment is ignored","loc":1143},"1144":{"type":"array","values":[1146],"loc":1144},"1163":{"type":"list","values":[1164,118],"loc":1163},"1164":{"type":"identifier","text":"@","loc":1164},"1165":{"type":"list","values":[1166,1167,1171],"loc":1165},"1166":{"type":"identifier","text":",","loc":1166},"1167":{"type":"list","values":[1169,1170],"loc":1167},"1168":{"type":"blank","loc":1168},"1169":{"type":"identifier","text":"@","loc":1169},"1170":{"type":"identifier","text":"true","loc":1170},"1171":{"type":"raw-code","lang":"javascript","loc":1171,"raw":"\"(eprim (pbool true 1170) 1170)\""},"1172":{"type":"raw-code","lang":"javascript","loc":1172,"raw":"'(evar \"nil\" 118)'"},"1173":{"type":"list","values":[1174,1175,1669],"loc":1173},"1174":{"type":"identifier","text":",","loc":1174},"1175":{"type":"list","values":[1177,1178],"loc":1175},"1176":{"type":"blank","loc":1176},"1177":{"type":"identifier","text":"@","loc":1177},"1178":{"type":"array","values":[1179,1181],"loc":1178},"1179":{"type":"identifier","text":"1","loc":1179},"1181":{"type":"identifier","text":"2","loc":1181},"1182":{"type":"blank","loc":1182},"1183":{"type":"blank","loc":1183},"1184":{"type":"raw-code","lang":"javascript","loc":1184,"raw":"'(ematch (evar \"x\" 161) [(, (pprim (pint 1 162) 162) (eprim (pint 2 163) 163)) (, (pstr \"hi\" 164) (eprim (pint 1 166) 166))] 157)'"},"1185":{"type":"blank","loc":1185},"1186":{"type":"blank","loc":1186},"1187":{"type":"blank","loc":1187},"1188":{"type":"raw-code","lang":"javascript","loc":1188,"raw":"\"(eprim (pint 1 89) 89)\""},"1189":{"type":"list","values":[1190,1191,1536],"loc":1189},"1190":{"type":"identifier","text":",","loc":1190},"1191":{"type":"list","values":[1196,1197],"loc":1191},"1192":{"type":"blank","loc":1192},"1195":{"type":"stringText","loc":1195,"text":""},"1196":{"type":"identifier","text":"@","loc":1196},"1197":{"type":"string","first":1198,"templates":[{"expr":1199,"suffix":1200}],"loc":1197},"1198":{"type":"stringText","loc":1198,"text":"hi "},"1199":{"type":"identifier","text":"name","loc":1199},"1200":{"type":"stringText","text":"!","loc":1200},"1201":{"type":"blank","loc":1201},"1202":{"type":"list","values":[1203,1204,1567],"loc":1202},"1203":{"type":"identifier","text":",","loc":1203},"1204":{"type":"list","values":[1206,1207],"loc":1204},"1205":{"type":"blank","loc":1205},"1206":{"type":"identifier","text":"@@","loc":1206},"1207":{"type":"identifier","text":"abc","loc":1207},"1208":{"type":"blank","loc":1208},"1219":{"type":"identifier","text":",","loc":1219},"1220":{"type":"raw-code","lang":"javascript","raw":"x => valueToString(parsePat(x))","loc":1220},"1221":{"type":"array","values":[1222,1229,1236,1246,1253,1274,1281],"loc":1221},"1222":{"type":"list","values":[1223,1224,1228],"loc":1222},"1223":{"type":"identifier","text":",","loc":1223},"1224":{"type":"list","values":[1225,1226],"loc":1224},"1225":{"type":"identifier","text":"@","loc":1225},"1226":{"type":"identifier","text":"hi","loc":1226},"1227":{"type":"blank","loc":1227},"1228":{"type":"raw-code","lang":"javascript","loc":1228,"raw":"'(pvar \"hi\" 1226)'"},"1229":{"type":"list","values":[1230,1231,1235],"loc":1229},"1230":{"type":"identifier","text":",","loc":1230},"1231":{"type":"list","values":[1233,1234],"loc":1231},"1232":{"type":"blank","loc":1232},"1233":{"type":"identifier","text":"@","loc":1233},"1234":{"type":"identifier","text":"_","loc":1234},"1235":{"type":"raw-code","lang":"javascript","loc":1235,"raw":"\"(pany 1234)\""},"1236":{"type":"list","values":[1237,1238,1245],"loc":1236},"1237":{"type":"identifier","text":",","loc":1237},"1238":{"type":"list","values":[1240,1241],"loc":1238},"1239":{"type":"blank","loc":1239},"1240":{"type":"identifier","text":"@","loc":1240},"1241":{"type":"list","values":[1242,1243,1244],"loc":1241},"1242":{"type":"identifier","text":",","loc":1242},"1243":{"type":"identifier","text":"a","loc":1243},"1244":{"type":"identifier","text":"b","loc":1244},"1245":{"type":"raw-code","lang":"javascript","loc":1245,"raw":"'(pcon \",\" [(pvar \"a\" 1243) (pvar \"b\" 1244)] 1241)'"},"1246":{"type":"list","values":[1247,1248,1252],"loc":1246},"1247":{"type":"identifier","text":",","loc":1247},"1248":{"type":"list","values":[1250,1251],"loc":1248},"1249":{"type":"blank","loc":1249},"1250":{"type":"identifier","text":"@","loc":1250},"1251":{"type":"array","values":[],"loc":1251},"1252":{"type":"raw-code","lang":"javascript","loc":1252,"raw":"'(pcon \"nil\" [] 1251)'"},"1253":{"type":"list","values":[1254,1255,1273],"loc":1253},"1254":{"type":"identifier","text":",","loc":1254},"1255":{"type":"list","values":[1257,1258],"loc":1255},"1256":{"type":"blank","loc":1256},"1257":{"type":"identifier","text":"@","loc":1257},"1258":{"type":"array","values":[1263,1268,1272],"loc":1258},"1263":{"type":"identifier","text":"a","loc":1263},"1267":{"type":"spread","contents":1264,"loc":1267},"1268":{"type":"identifier","text":"b","loc":1268},"1269":{"type":"identifier","text":"c","loc":1269},"1272":{"type":"spread","contents":1269,"loc":1272},"1273":{"type":"raw-code","lang":"javascript","loc":1273,"raw":"'(pcon \"cons\" [(pvar \"a\" 1263) (pcon \"cons\" [(pvar \"b\" 1268) (pvar \"c\" 1269)] 1258)] 1258)'"},"1274":{"type":"list","values":[1275,1276,1280],"loc":1274},"1275":{"type":"identifier","text":",","loc":1275},"1276":{"type":"list","values":[1278,1279],"loc":1276},"1277":{"type":"blank","loc":1277},"1278":{"type":"identifier","text":"@","loc":1278},"1279":{"type":"identifier","text":"12","loc":1279},"1280":{"type":"raw-code","lang":"javascript","loc":1280,"raw":"\"(pprim (pint 12 1279) 1279)\""},"1281":{"type":"list","values":[1282,1283,1288],"loc":1281},"1282":{"type":"identifier","text":",","loc":1282},"1283":{"type":"list","values":[1285,1286],"loc":1283},"1284":{"type":"blank","loc":1284},"1285":{"type":"identifier","text":"@","loc":1285},"1286":{"type":"string","first":1287,"templates":[],"loc":1286},"1287":{"type":"stringText","loc":1287,"text":"hi"},"1288":{"type":"raw-code","lang":"javascript","loc":1288,"raw":"'(pstr \"hi\" 1286)'"},"1289":{"type":"raw-code","lang":"javascript","loc":1289,"raw":"\"(sexpr (eprim (pint 1 238) 238) 238)\""},"1290":{"type":"raw-code","lang":"javascript","loc":1290,"raw":"'(sdef \"hi\" (eprim (pint 10 254) 254) 245)'"},"1291":{"type":"blank","loc":1291},"1292":{"type":"raw-code","lang":"javascript","loc":1292,"raw":"'(sdeftype \"option\" [(,, \"some\" [(tcon \"a\" 1018)] 1017) (,, \"none\" [] 1020)])'"},"1293":{"type":"rich-text","contents":[{"id":"3b556102-d698-4016-a8c6-5daa7e99e24a","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Primitives","styles":{}}],"children":[]},{"id":"c8d13d61-7d3b-4273-90c9-cc3acd955efb","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"just ints and booleans at the moment","styles":{}}],"children":[]}],"loc":1293},"1295":{"type":"rich-text","contents":[{"id":"907b09e0-9690-4fbc-9771-7a9a519ed5e5","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":3},"content":[{"type":"text","text":"Types","styles":{}}],"children":[]}],"loc":1295},"1297":{"type":"raw-code","lang":"javascript","loc":1297,"raw":"{\"0\":1,\"1\":2,\"type\":\",\"}"},"1298":{"type":"identifier","text":"10","loc":1298},"1299":{"type":"blank","loc":1299},"1300":{"type":"blank","loc":1300},"1304":{"type":"raw-code","lang":"javascript","loc":1304,"raw":"\"(, 5 2)\""},"1305":{"type":"raw-code","lang":"javascript","loc":1305,"raw":"\"(some 10)\""},"1306":{"type":"raw-code","lang":"javascript","loc":1306,"raw":"'(lol 1 true \"hi\")'"},"1307":{"type":"raw-code","lang":"javascript","loc":1307,"raw":"\"(com, 1 2)\""},"1308":{"type":"raw-code","lang":"javascript","loc":1308,"raw":"\"10\""},"1309":{"type":"raw-code","lang":"javascript","loc":1309,"raw":"\"0\""},"1322":{"type":"blank","loc":1322},"1333":{"type":"list","values":[1334,1335,1363],"loc":1333},"1334":{"type":"identifier","text":",","loc":1334},"1335":{"type":"array","values":[1352],"loc":1335},"1336":{"type":"blank","loc":1336},"1337":{"type":"blank","loc":1337},"1349":{"type":"blank","loc":1349},"1352":{"loc":1352,"type":"list","values":[1353,1354,1357,1360,1361,1362]},"1353":{"loc":1353,"type":"identifier","text":"match"},"1354":{"loc":1354,"type":"list","values":[1355,1356]},"1355":{"loc":1355,"type":"identifier","text":"some"},"1356":{"loc":1356,"type":"identifier","text":"10"},"1357":{"loc":1357,"type":"list","values":[1358,1359]},"1358":{"loc":1358,"type":"identifier","text":"some"},"1359":{"loc":1359,"type":"identifier","text":"v"},"1360":{"loc":1360,"type":"identifier","text":"v"},"1361":{"loc":1361,"type":"identifier","text":"_"},"1362":{"loc":1362,"type":"identifier","text":"5"},"1363":{"type":"raw-code","lang":"javascript","loc":1363,"raw":"\"10\""},"1364":{"type":"list","values":[1366,1367,1368],"loc":1364},"1366":{"type":"identifier","text":",","loc":1366},"1367":{"type":"raw-code","lang":"javascript","raw":"unescapeSlashes","loc":1367},"1368":{"type":"array","values":[1369,1375,1381,1387,1394],"loc":1368},"1369":{"type":"list","values":[1370,1371,1373],"loc":1369},"1370":{"type":"identifier","text":",","loc":1370},"1371":{"type":"string","first":1372,"templates":[],"loc":1371},"1372":{"type":"stringText","loc":1372,"text":"\\n"},"1373":{"type":"string","first":1374,"templates":[],"loc":1373},"1374":{"type":"stringText","loc":1374,"text":"\\n"},"1375":{"type":"list","values":[1376,1377,1378],"loc":1375},"1376":{"type":"identifier","text":",","loc":1376},"1377":{"type":"string","first":1379,"templates":[],"loc":1377},"1378":{"type":"string","first":1380,"templates":[],"loc":1378},"1379":{"type":"stringText","loc":1379,"text":"\\\\n"},"1380":{"type":"stringText","loc":1380,"text":"\\n"},"1381":{"type":"list","values":[1382,1383,1384],"loc":1381},"1382":{"type":"identifier","text":",","loc":1382},"1383":{"type":"string","first":1385,"templates":[],"loc":1383},"1384":{"type":"string","first":1386,"templates":[],"loc":1384},"1385":{"type":"stringText","loc":1385,"text":"\\\\\\\\n"},"1386":{"type":"stringText","loc":1386,"text":"\\\\n"},"1387":{"type":"list","values":[1388,1389,1390],"loc":1387},"1388":{"type":"identifier","text":",","loc":1388},"1389":{"type":"string","first":1391,"templates":[],"loc":1389},"1390":{"type":"string","first":1393,"templates":[],"loc":1390},"1391":{"type":"stringText","loc":1391,"text":"\\\\\\\\"},"1392":{"type":"stringText","loc":1392,"text":""},"1393":{"type":"stringText","loc":1393,"text":"\\\\"},"1394":{"type":"list","values":[1395,1396,1397],"loc":1394},"1395":{"type":"identifier","text":",","loc":1395},"1396":{"type":"string","first":1398,"templates":[],"loc":1396},"1397":{"type":"string","first":1399,"templates":[],"loc":1397},"1398":{"type":"stringText","loc":1398,"text":"\\\\\\n"},"1399":{"type":"stringText","loc":1399,"text":"\\\\\\n"},"1400":{"type":"list","values":[1402,1403,1404],"loc":1400},"1402":{"type":"identifier","text":",","loc":1402},"1403":{"type":"raw-code","lang":"javascript","raw":"sanitize","loc":1403},"1404":{"type":"array","values":[1405,1411,1417],"loc":1404},"1405":{"type":"list","values":[1406,1407,1409],"loc":1405},"1406":{"type":"identifier","text":",","loc":1406},"1407":{"type":"string","first":1408,"templates":[],"loc":1407},"1408":{"type":"stringText","loc":1408,"text":"hello-world"},"1409":{"type":"string","first":1410,"templates":[],"loc":1409},"1410":{"type":"stringText","loc":1410,"text":"hello_world"},"1411":{"type":"list","values":[1412,1413,1414],"loc":1411},"1412":{"type":"identifier","text":",","loc":1412},"1413":{"type":"string","first":1415,"templates":[],"loc":1413},"1414":{"type":"string","first":1416,"templates":[],"loc":1414},"1415":{"type":"stringText","loc":1415,"text":"a/b/c"},"1416":{"type":"stringText","loc":1416,"text":"a$slb$slc"},"1417":{"type":"list","values":[1418,1419,1420],"loc":1417},"1418":{"type":"identifier","text":",","loc":1418},"1419":{"type":"string","first":1421,"templates":[],"loc":1419},"1420":{"type":"string","first":1422,"templates":[],"loc":1420},"1421":{"type":"stringText","loc":1421,"text":"abc$"},"1422":{"type":"stringText","loc":1422,"text":"abc$$"},"1423":{"type":"list","values":[1425,1426,1427],"loc":1423},"1425":{"type":"identifier","text":",","loc":1425},"1426":{"type":"raw-code","lang":"javascript","raw":"makePairs","loc":1426},"1427":{"type":"array","values":[1428],"loc":1427},"1428":{"type":"list","values":[1429,1430,1431],"loc":1428},"1429":{"type":"identifier","text":",","loc":1429},"1430":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3, 4]","loc":1430},"1431":{"type":"raw-code","lang":"javascript","raw":"[[1, 2], [3, 4]]","loc":1431},"1432":{"type":"raw-code","lang":"javascript","loc":1432,"raw":"\"(eprim (pbool true 1080) 1080)\""},"1433":{"type":"raw-code","lang":"javascript","loc":1433,"raw":"\"(eprim (pbool false 1103) 1103)\""},"1434":{"type":"raw-code","lang":"javascript","loc":1434,"raw":"\"(eprim (pint 123 1087) 1087)\""},"1435":{"type":"raw-code","lang":"javascript","loc":1435,"raw":"'\"not a prim\"'"},"1436":{"loc":1436,"type":"list","values":[1439,1440,1441,1442,1446,1447,1458,1459,1546,1542,1463,1464,1471,1472,1479,1480,1490,1491]},"1439":{"loc":1439,"type":"identifier","text":"deftype"},"1440":{"loc":1440,"type":"identifier","text":"expr"},"1441":{"loc":1441,"type":"rich-text","contents":[{"id":"75ea0e27-8491-4efb-b875-9d2233bc7ed0","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"the trailing ","styles":{}},{"type":"text","text":"int","styles":{"code":true}},{"type":"text","text":" on each constructor is a unique id","styles":{}}],"children":[]}]},"1442":{"loc":1442,"type":"list","values":[1443,1444,1445]},"1443":{"loc":1443,"type":"identifier","text":"eprim"},"1444":{"loc":1444,"type":"identifier","text":"prim"},"1445":{"loc":1445,"type":"identifier","text":"int"},"1446":{"loc":1446,"type":"rich-text","contents":[{"id":"89460e23-49ae-4caf-bff2-fc9d477df677","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"estr: prefix,","styles":{"code":true}},{"type":"text","text":" ","styles":{}},{"type":"text","text":"template-pairs","styles":{"code":true}},{"type":"text","text":". All strings are template strings in our language :)","styles":{}}],"children":[]},{"id":"028918e5-425e-4d4a-b35f-992292f48576","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"So ","styles":{}},{"type":"text","text":"\"Hello ${world}!\"","styles":{"code":true}},{"type":"text","text":" would parse into\n","styles":{}},{"type":"text","text":"(estr \"Hello\" [(,, (evar \"world\") \"!\" 1234)])","styles":{"code":true}}],"children":[]},{"id":"fb11b2cc-0be0-4dee-8f90-107d8ca0301d","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"template-pairs","styles":{"code":true}},{"type":"text","text":" is a list of ","styles":{}},{"type":"text","text":"expression","styles":{"code":true}},{"type":"text","text":" and ","styles":{}},{"type":"text","text":"suffix","styles":{"code":true}},{"type":"text","text":" (with a unique ID for the string tacked on)","styles":{}}],"children":[]}]},"1447":{"loc":1447,"type":"list","values":[1448,1449,1450,1457]},"1448":{"loc":1448,"type":"identifier","text":"estr"},"1449":{"loc":1449,"type":"identifier","text":"string"},"1450":{"loc":1450,"type":"list","values":[1451,1452]},"1451":{"loc":1451,"type":"identifier","text":"list"},"1452":{"loc":1452,"type":"list","values":[1453,1454,1455,1456]},"1453":{"loc":1453,"type":"identifier","text":",,"},"1454":{"loc":1454,"type":"identifier","text":"expr"},"1455":{"loc":1455,"type":"identifier","text":"string"},"1456":{"loc":1456,"type":"identifier","text":"int"},"1457":{"loc":1457,"type":"identifier","text":"int"},"1458":{"loc":1458,"type":"rich-text","contents":[{"id":"17ad6efe-42d4-4d27-9c51-3c5d78e9c338","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"evar:","styles":{"code":true}},{"type":"text","text":" a variable reference! might be local or global","styles":{}}],"children":[]}]},"1459":{"loc":1459,"type":"list","values":[1460,1461,1462]},"1460":{"loc":1460,"type":"identifier","text":"evar"},"1461":{"loc":1461,"type":"identifier","text":"string"},"1462":{"loc":1462,"type":"identifier","text":"int"},"1463":{"loc":1463,"type":"rich-text","contents":[{"id":"a22d06e1-f3b8-4ea5-9495-8008c09cc659","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"elambda: args, body","styles":{"code":true}},{"type":"text","text":" , parsed from the form ","styles":{}},{"type":"text","text":"(fn [arg1 arg2] body)","styles":{"code":true}},{"type":"text","text":".","styles":{}}],"children":[]}]},"1464":{"loc":1464,"type":"list","values":[1465,1466,1469,1470]},"1465":{"loc":1465,"type":"identifier","text":"elambda"},"1466":{"loc":1466,"type":"list","values":[1467,1468]},"1467":{"loc":1467,"type":"identifier","text":"list"},"1468":{"loc":1468,"type":"identifier","text":"pat"},"1469":{"loc":1469,"type":"identifier","text":"expr"},"1470":{"loc":1470,"type":"identifier","text":"int"},"1471":{"loc":1471,"type":"rich-text","contents":[{"id":"95bf6267-a00d-4526-9030-a36a7626bc44","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"eapp: target, args","styles":{"code":true}}],"children":[]}]},"1472":{"loc":1472,"type":"list","values":[1473,1474,1475,1478]},"1473":{"loc":1473,"type":"identifier","text":"eapp"},"1474":{"loc":1474,"type":"identifier","text":"expr"},"1475":{"loc":1475,"type":"list","values":[1476,1477]},"1476":{"loc":1476,"type":"identifier","text":"list"},"1477":{"loc":1477,"type":"identifier","text":"expr"},"1478":{"loc":1478,"type":"identifier","text":"int"},"1479":{"loc":1479,"type":"rich-text","contents":[{"id":"03be29ee-aeb9-4157-948a-b659a7695f1e","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"elet: bindings, body","styles":{"code":true}}],"children":[]}]},"1480":{"loc":1480,"type":"list","values":[1481,1482,1488,1489]},"1481":{"loc":1481,"type":"identifier","text":"elet"},"1482":{"loc":1482,"type":"list","values":[1483,1484]},"1483":{"loc":1483,"type":"identifier","text":"list"},"1484":{"loc":1484,"type":"list","values":[1485,1486,1487]},"1485":{"loc":1485,"type":"identifier","text":","},"1486":{"loc":1486,"type":"identifier","text":"pat"},"1487":{"loc":1487,"type":"identifier","text":"expr"},"1488":{"loc":1488,"type":"identifier","text":"expr"},"1489":{"loc":1489,"type":"identifier","text":"int"},"1490":{"loc":1490,"type":"rich-text","contents":[{"id":"49a25799-d29e-4727-bdd7-a7f1aa12c8f3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"ematch: target, cases","styles":{"code":true}}],"children":[]}]},"1491":{"loc":1491,"type":"list","values":[1492,1493,1494]},"1492":{"loc":1492,"type":"identifier","text":"ematch"},"1493":{"loc":1493,"type":"identifier","text":"expr"},"1494":{"loc":1494,"type":"list","values":[1495,1496]},"1495":{"loc":1495,"type":"identifier","text":"list"},"1496":{"loc":1496,"type":"list","values":[1497,1498,1499]},"1497":{"loc":1497,"type":"identifier","text":","},"1498":{"loc":1498,"type":"identifier","text":"pat"},"1499":{"loc":1499,"type":"identifier","text":"expr"},"1502":{"type":"raw-code","lang":"javascript","loc":1502,"raw":"'(elet [(, (pcon \",\" [(pvar \"a\" 182) (pvar \"b\" 184)] 180) (evar \"c\" 185))] (evar \"d\" 186) 175)'"},"1503":{"type":"raw-code","lang":"javascript","loc":1503,"raw":"'(elet [(, (pcon \"cons\" [(pvar \"a\" 203) (pvar \"b\" 204)] 202) (evar \"c\" 208))] (evar \"d\" 209) 196)'"},"1504":{"type":"blank","loc":1504},"1505":{"type":"identifier","text":"b","loc":1505},"1506":{"type":"raw-code","lang":"javascript","loc":1506,"raw":"'(elambda [(pvar \"a\" 136) (pvar \"b\" 1505)] (eprim (pint 1 133) 133) 129)'"},"1523":{"type":"raw-code","lang":"javascript","loc":1523,"raw":"'(sdef \"lol\" (elambda [(pvar \"a\" 268) (pvar \"b\" 269)] (eapp (evar \"+\" 271) [(evar \"a\" 272) (evar \"b\" 273)] -1) 261) 261)'"},"1534":{"type":"rich-text","contents":[{"id":"54590d21-c399-4d06-8520-40c53cb03f83","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's remind ourselves what the AST looks like that we're parsing into:","styles":{}}],"children":[]}],"loc":1534},"1536":{"type":"raw-code","lang":"javascript","loc":1536,"raw":"'(estr \"hi \" [(,, (evar \"name\" 1199) \"!\" 1200)] 1197)'"},"1541":{"type":"blank","loc":1541},"1542":{"loc":1542,"type":"list","values":[1543,1544,1545]},"1543":{"loc":1543,"type":"identifier","text":"equot"},"1544":{"loc":1544,"type":"identifier","text":"quot"},"1545":{"loc":1545,"type":"identifier","text":"int"},"1546":{"type":"rich-text","contents":[{"id":"61920579-0e52-48f6-a04d-3a1001c53b81","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"equot:","styles":{"code":true}},{"type":"text","text":" this form allows embedding of the CST or AST into the runtime, which makes writing tests for our parsers, compilers, and type checkers much simpler.","styles":{}}],"children":[]}],"loc":1546},"1547":{"loc":1547,"type":"list","values":[1550,1551,1552,1555,1558,1561,1564]},"1550":{"loc":1550,"type":"identifier","text":"deftype"},"1551":{"loc":1551,"type":"identifier","text":"quot"},"1552":{"loc":1552,"type":"list","values":[1553,1554]},"1553":{"loc":1553,"type":"identifier","text":"quot/expr"},"1554":{"loc":1554,"type":"identifier","text":"expr"},"1555":{"loc":1555,"type":"list","values":[1556,1557]},"1556":{"loc":1556,"type":"identifier","text":"quot/stmt"},"1557":{"loc":1557,"type":"identifier","text":"stmt"},"1558":{"loc":1558,"type":"list","values":[1559,1560]},"1559":{"loc":1559,"type":"identifier","text":"quot/type"},"1560":{"loc":1560,"type":"identifier","text":"type"},"1561":{"loc":1561,"type":"list","values":[1562,1563]},"1562":{"loc":1562,"type":"identifier","text":"quot/pat"},"1563":{"loc":1563,"type":"identifier","text":"pat"},"1564":{"loc":1564,"type":"list","values":[1565,1566]},"1565":{"loc":1565,"type":"identifier","text":"quot/quot"},"1566":{"loc":1566,"type":"identifier","text":"cst"},"1567":{"type":"raw-code","lang":"javascript","loc":1567,"raw":"'(equot (quot/quot (cst/identifier \"abc\" 1207)) 1204)'"},"1568":{"type":"list","values":[1569,1570,1676],"loc":1568},"1569":{"type":"identifier","text":",","loc":1569},"1570":{"type":"list","values":[1572,1573],"loc":1570},"1571":{"type":"blank","loc":1571},"1572":{"type":"identifier","text":"@","loc":1572},"1573":{"type":"list","values":[1574,1575],"loc":1573},"1574":{"type":"identifier","text":"@t","loc":1574},"1575":{"type":"identifier","text":"list","loc":1575},"1576":{"type":"blank","loc":1576},"1577":{"type":"list","values":[1579,1580,1581],"loc":1577},"1579":{"type":"identifier","text":",","loc":1579},"1580":{"type":"raw-code","lang":"javascript","raw":"({values: [pat, val]}) => evalPat(parsePat(pat), evaluate(parse(val), testEnv))","loc":1580},"1581":{"type":"array","values":[1583,1592,1601,1617],"loc":1581},"1582":{"type":"blank","loc":1582},"1583":{"type":"list","values":[1589,1584,1591],"loc":1583},"1584":{"type":"array","values":[1587,1588],"loc":1584},"1586":{"type":"blank","loc":1586},"1587":{"type":"identifier","text":"a","loc":1587},"1588":{"type":"identifier","text":"10","loc":1588},"1589":{"type":"identifier","text":",","loc":1589},"1590":{"type":"blank","loc":1590},"1591":{"type":"raw-code","lang":"javascript","loc":1591,"raw":"{\"a\":10}"},"1592":{"type":"list","values":[1593,1594,1595],"loc":1592},"1593":{"type":"identifier","text":",","loc":1593},"1594":{"type":"array","values":[1596,1600],"loc":1594},"1595":{"type":"blank","loc":1595},"1596":{"type":"list","values":[1597,1598,1599],"loc":1596},"1597":{"type":"identifier","text":",","loc":1597},"1598":{"type":"identifier","text":"a","loc":1598},"1599":{"type":"identifier","text":"b","loc":1599},"1600":{"type":"identifier","text":"10","loc":1600},"1601":{"type":"list","values":[1602,1603,1616],"loc":1601},"1602":{"type":"identifier","text":",","loc":1602},"1603":{"type":"array","values":[1605,1612],"loc":1603},"1604":{"type":"blank","loc":1604},"1605":{"type":"list","values":[1606,1607,1608],"loc":1605},"1606":{"type":"identifier","text":",","loc":1606},"1607":{"type":"identifier","text":"a","loc":1607},"1608":{"type":"identifier","text":"b","loc":1608},"1611":{"type":"blank","loc":1611},"1612":{"type":"list","values":[1613,1614,1615],"loc":1612},"1613":{"type":"identifier","text":",","loc":1613},"1614":{"type":"identifier","text":"10","loc":1614},"1615":{"type":"identifier","text":"20","loc":1615},"1616":{"type":"raw-code","lang":"javascript","loc":1616,"raw":"{\"a\":10,\"b\":20}"},"1617":{"type":"list","values":[1618,1619,1673],"loc":1617},"1618":{"type":"identifier","text":",","loc":1618},"1619":{"type":"array","values":[1624,1639],"loc":1619},"1620":{"type":"blank","loc":1620},"1624":{"type":"array","values":[1625,1634,1638],"loc":1624},"1625":{"type":"identifier","text":"1","loc":1625},"1629":{"type":"spread","contents":1626,"loc":1629},"1633":{"type":"spread","contents":1630,"loc":1633},"1634":{"type":"identifier","text":"_","loc":1634},"1635":{"type":"identifier","text":"rest","loc":1635},"1638":{"type":"spread","contents":1635,"loc":1638},"1639":{"type":"array","values":[1640,1641,1642,1643],"loc":1639},"1640":{"type":"identifier","text":"1","loc":1640},"1641":{"type":"identifier","text":"2","loc":1641},"1642":{"type":"identifier","text":"3","loc":1642},"1643":{"type":"identifier","text":"4","loc":1643},"1644":{"type":"raw-code","lang":"javascript","raw":"const testEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644},"1646":{"type":"list","values":[1647,1648,1672],"loc":1646},"1647":{"type":"identifier","text":",","loc":1647},"1648":{"type":"array","values":[1650,1665],"loc":1648},"1649":{"type":"blank","loc":1649},"1650":{"type":"list","values":[1651,1652,1657,1663],"loc":1650},"1651":{"type":"identifier","text":"deftype","loc":1651},"1652":{"type":"list","values":[1655,1656],"loc":1652},"1655":{"type":"identifier","text":"list","loc":1655},"1656":{"type":"identifier","text":"a","loc":1656},"1657":{"type":"list","values":[1658,1659,1660],"loc":1657},"1658":{"type":"identifier","text":"cons","loc":1658},"1659":{"type":"identifier","text":"a","loc":1659},"1660":{"type":"list","values":[1661,1662],"loc":1660},"1661":{"type":"identifier","text":"list","loc":1661},"1662":{"type":"identifier","text":"a","loc":1662},"1663":{"type":"list","values":[1664],"loc":1663},"1664":{"type":"identifier","text":"nil","loc":1664},"1665":{"type":"array","values":[1668,1671],"loc":1665},"1668":{"type":"identifier","text":"1","loc":1668},"1669":{"type":"raw-code","lang":"javascript","loc":1669,"raw":"'(eapp (evar \"cons\" -1) [(eprim (pint 1 1179) 1179) (eapp (evar \"cons\" 1178) [(eprim (pint 2 1181) 1181) (evar \"nil\" 1178)] 1178)] -1)'"},"1670":{"type":"raw-code","lang":"javascript","loc":1670,"raw":"'(eapp (evar \"cons\" -1) [(evar \"a\" 790) (evar \"b\" 791)] -1)'"},"1671":{"type":"identifier","text":"2","loc":1671},"1672":{"type":"raw-code","lang":"javascript","loc":1672,"raw":"\"[1 2]\""},"1673":{"type":"raw-code","lang":"javascript","raw":"{\"rest\": list([3, 4])}","loc":1673},"1674":{"type":"rich-text","contents":[{"id":"1b03b932-ddf1-42e9-8aef-074775ba913b","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"To evaluate our code in this bootstrap environment, we're treating the AST as a very basic \"bytecode\" that we're evaluating in a \"virtual machine\". Evaluating a program, in this paradigm, simply consists of walking each node of the tree and \"reducing\" it to a runtime value.","styles":{}}],"children":[]}],"loc":1674},"1676":{"type":"raw-code","lang":"javascript","loc":1676,"raw":"{\"0\":\"list\",\"1\":1575,\"type\":\"tcon\"}"},"1677":{"type":"list","values":[1679,1680,1681],"loc":1677},"1679":{"type":"identifier","text":",","loc":1679},"1680":{"type":"raw-code","lang":"javascript","raw":"list","loc":1680},"1681":{"type":"array","values":[1682,1694],"loc":1681},"1682":{"type":"list","values":[1683,1684,1693],"loc":1682},"1683":{"type":"identifier","text":",","loc":1683},"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3]","loc":1684},"1692":{"type":"blank","loc":1692},"1693":{"type":"raw-code","lang":"javascript","loc":1693,"raw":"{\"0\":1,\"1\":{\"0\":2,\"1\":{\"0\":3,\"1\":{\"type\":\"nil\"},\"type\":\"cons\"},\"type\":\"cons\"},\"type\":\"cons\"}"},"1694":{"type":"list","values":[1695,1696,1698],"loc":1694},"1695":{"type":"identifier","text":",","loc":1695},"1696":{"type":"raw-code","lang":"javascript","raw":"[]","loc":1696},"1697":{"type":"blank","loc":1697},"1698":{"type":"raw-code","lang":"javascript","loc":1698,"raw":"{\"type\":\"nil\"}"},"1699":{"type":"identifier","text":",","loc":1699},"1701":{"type":"list","values":[1699,1702,1703],"loc":1701},"1702":{"type":"raw-code","lang":"javascript","raw":"unwrapList","loc":1702},"1703":{"type":"array","values":[1705,1710],"loc":1703},"1705":{"type":"list","values":[1706,1707,1709],"loc":1705},"1706":{"type":"identifier","text":",","loc":1706},"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3])","loc":1707},"1708":{"type":"blank","loc":1708},"1709":{"type":"raw-code","lang":"javascript","loc":1709,"raw":"[1,2,3]"},"1710":{"type":"list","values":[1711,1712,1714],"loc":1710},"1711":{"type":"identifier","text":",","loc":1711},"1712":{"type":"raw-code","lang":"javascript","raw":"list([])","loc":1712},"1713":{"type":"blank","loc":1713},"1714":{"type":"raw-code","lang":"javascript","loc":1714,"raw":"[]"},"-1":{"type":"list","values":[0],"loc":-1}},"root":-1,"meta":{},"history":[{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\ncon","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\ncons","loc":25}},"nsMap":{},"nsPrev":{},"id":8732,"ts":1715005204.991,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\ncons","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst","loc":25}},"nsMap":{},"nsPrev":{},"id":8733,"ts":1715005205.051,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst ","loc":25}},"nsMap":{},"nsPrev":{},"id":8734,"ts":1715005205.106,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})","loc":25}},"nsMap":{},"nsPrev":{},"id":8735,"ts":1715005205.377,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\n\n","loc":25}},"nsMap":{},"nsPrev":{},"id":8736,"ts":1715005206.084,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\n\n","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nc","loc":25}},"nsMap":{},"nsPrev":{},"id":8737,"ts":1715005206.259,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nc","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\ncon","loc":25}},"nsMap":{},"nsPrev":{},"id":8738,"ts":1715005206.346,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\ncon","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\ncons","loc":25}},"nsMap":{},"nsPrev":{},"id":8739,"ts":1715005206.389,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\ncons","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst","loc":25}},"nsMap":{},"nsPrev":{},"id":8740,"ts":1715005206.462,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst ","loc":25}},"nsMap":{},"nsPrev":{},"id":8741,"ts":1715005206.514,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst n","loc":25}},"nsMap":{},"nsPrev":{},"id":8742,"ts":1715005206.574,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst n","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil","loc":25}},"nsMap":{},"nsPrev":{},"id":8743,"ts":1715005206.673,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil ","loc":25}},"nsMap":{},"nsPrev":{},"id":8744,"ts":1715005206.731,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil =","loc":25}},"nsMap":{},"nsPrev":{},"id":8745,"ts":1715005206.929,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil =","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = ","loc":25}},"nsMap":{},"nsPrev":{},"id":8746,"ts":1715005206.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {","loc":25}},"nsMap":{},"nsPrev":{},"id":8747,"ts":1715005207.21,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {t","loc":25}},"nsMap":{},"nsPrev":{},"id":8748,"ts":1715005207.385,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {t","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {typ","loc":25}},"nsMap":{},"nsPrev":{},"id":8749,"ts":1715005207.526,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {typ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type","loc":25}},"nsMap":{},"nsPrev":{},"id":8750,"ts":1715005207.562,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type:","loc":25}},"nsMap":{},"nsPrev":{},"id":8751,"ts":1715005207.757,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type:","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: ","loc":25}},"nsMap":{},"nsPrev":{},"id":8752,"ts":1715005207.828,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: ","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: '","loc":25}},"nsMap":{},"nsPrev":{},"id":8753,"ts":1715005207.893,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: '","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'ni","loc":25}},"nsMap":{},"nsPrev":{},"id":8754,"ts":1715005208.153,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'ni","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil","loc":25}},"nsMap":{},"nsPrev":{},"id":8755,"ts":1715005208.201,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'","loc":25}},"nsMap":{},"nsPrev":{},"id":8756,"ts":1715005208.447,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}","loc":25}},"nsMap":{},"nsPrev":{},"id":8757,"ts":1715005208.667,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":30,"idx":26},{"type":"ns-top","idx":30},{"idx":29,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":30,"idx":26},{"type":"ns-top","idx":30},{"idx":29,"type":"end"}]}],"prev":{"29":{"type":"raw-code","lang":"javascript","raw":"nil = {type: 'nil'}","loc":29}},"meta":{},"metaPrev":{},"map":{"29":{"type":"blank","loc":29}},"nsMap":{"30":{"type":"normal","top":29,"children":[],"id":30}},"nsPrev":{"30":{"type":"normal","top":29,"children":[],"id":30}},"id":8758,"ts":1715005210.148,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":28,"idx":26},{"type":"ns-top","idx":28},{"idx":27,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":30,"idx":26},{"type":"ns-top","idx":30},{"idx":29,"type":"start"}]}],"prev":{"29":{"type":"blank","loc":29}},"meta":{},"metaPrev":{},"map":{"29":null},"nsMap":{"26":{"type":"normal","top":25,"children":[28],"id":26,"collapsed":false},"30":null},"nsPrev":{"26":{"type":"normal","top":25,"children":[28,30],"id":26,"collapsed":false},"30":{"type":"normal","top":29,"children":[],"id":30}},"id":8759,"ts":1715005210.5,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":28,"idx":26},{"type":"ns-top","idx":28},{"idx":27,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":28,"idx":26},{"type":"ns-top","idx":28},{"idx":27,"type":"end"}]}],"prev":{"27":{"type":"raw-code","lang":"javascript","raw":"","loc":27}},"meta":{},"metaPrev":{},"map":{"27":{"type":"blank","loc":27}},"nsMap":{"28":{"type":"normal","top":27,"children":[],"id":28}},"nsPrev":{"28":{"type":"normal","top":27,"children":[],"id":28}},"id":8760,"ts":1715005210.986,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":28,"idx":26},{"type":"ns-top","idx":28},{"idx":27,"type":"start"}]}],"prev":{"27":{"type":"blank","loc":27}},"meta":{},"metaPrev":{},"map":{"27":null},"nsMap":{"26":{"type":"normal","top":25,"children":[],"id":26,"collapsed":false},"28":null},"nsPrev":{"26":{"type":"normal","top":25,"children":[28],"id":26,"collapsed":false},"28":{"type":"normal","top":27,"children":[],"id":28}},"id":8761,"ts":1715005211.345,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"99":{"type":"normal","top":98,"children":[110],"id":99,"collapsed":false}},"nsPrev":{"99":{"type":"normal","top":98,"children":[110],"id":99,"collapsed":true}},"id":8762,"ts":1715005251.567,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"end"}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\ncounwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"nsMap":{},"nsPrev":{},"id":8763,"ts":1715005255.807,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\ncounwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"nsMap":{},"nsPrev":{},"id":8764,"ts":1715005255.864,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconsunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"nsMap":{},"nsPrev":{},"id":8765,"ts":1715005255.929,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconsunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconstunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"nsMap":{},"nsPrev":{},"id":8766,"ts":1715005256.011,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconstunwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconst unwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"nsMap":{},"nsPrev":{},"id":8767,"ts":1715005256.073,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"type":"rich-text","idx":98,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"end"}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"// unwrap a list into a javascript array\nconst unwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"raw-code","lang":"javascript","raw":"","loc":98}},"nsMap":{},"nsPrev":{},"id":8768,"ts":1715005267.678,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"idx":25,"type":"end"}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}\n\n","loc":25}},"nsMap":{},"nsPrev":{},"id":8769,"ts":1715005269.27,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"type":"rich-text","idx":25,"sel":null}]}],"prev":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}\n\n","loc":25}},"meta":{},"metaPrev":{},"map":{"25":{"type":"raw-code","lang":"javascript","raw":"// turn a javascript array into a linked list with `cons` and `nil`.\nconst list = (values) => {\n  let v = nil\n  for (let i = values.length - 1; i >= 0; i--) {\n    v = cons(values[i], v)\n  }\n  return v\n}\nconst cons = (a, b) => ({type: 'cons', 0: a, 1: b})\nconst nil = {type: 'nil'}\n// unwrap a list into a javascript array\nconst unwrapList = value => value.type === 'nil' ? [] : [value[0], ...unwrapList(value[1])]\n","loc":25}},"nsMap":{},"nsPrev":{},"id":8770,"ts":1715005269.438,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","idx":26},{"type":"ns-top","idx":110},{"type":"start","idx":109}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns","child":110,"idx":99},{"type":"ns-top","idx":110},{"idx":109,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"26":{"type":"normal","top":25,"children":[110],"id":26,"collapsed":false},"99":{"type":"normal","top":98,"children":[],"id":99,"collapsed":false}},"nsPrev":{"26":{"type":"normal","top":25,"children":[],"id":26,"collapsed":false},"99":{"type":"normal","top":98,"children":[110],"id":99,"collapsed":false}},"id":8771,"ts":1715005274.277,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"end"}]}],"prev":{"98":{"type":"raw-code","lang":"javascript","raw":"","loc":98}},"meta":{},"metaPrev":{},"map":{"98":{"type":"blank","loc":98}},"nsMap":{"99":{"type":"normal","top":98,"children":[],"id":99,"collapsed":false}},"nsPrev":{"99":{"type":"normal","top":98,"children":[],"id":99,"collapsed":false}},"id":8772,"ts":1715005275.541,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns-top","idx":26},{"idx":25,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":99,"idx":214},{"type":"ns-top","idx":99},{"idx":98,"type":"start"}]}],"prev":{"98":{"type":"blank","loc":98}},"meta":{},"metaPrev":{},"map":{"98":null},"nsMap":{"99":null,"214":{"type":"normal","top":213,"children":[26,58,71,150,112,1023],"id":214,"collapsed":false}},"nsPrev":{"99":{"type":"normal","top":98,"children":[],"id":99,"collapsed":false},"214":{"type":"normal","top":213,"children":[26,99,58,71,150,112,1023],"id":214,"collapsed":false}},"id":8773,"ts":1715005275.927,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":110,"idx":26},{"type":"ns-top","idx":110},{"idx":109,"type":"end"}]}],"prev":{"1677":null},"meta":{},"metaPrev":{},"map":{"1677":{"type":"blank","loc":1677}},"nsMap":{"26":{"type":"normal","top":25,"children":[110,1678],"id":26,"collapsed":false},"1678":{"type":"normal","top":1677,"children":[],"id":1678}},"nsPrev":{"26":{"type":"normal","top":25,"children":[110],"id":26,"collapsed":false},"1678":null},"id":8774,"ts":1715005283.993,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"start"}]}],"prev":{"1677":{"type":"blank","loc":1677}},"meta":{},"metaPrev":{},"map":{"1677":{"type":"list","values":[],"loc":1677}},"nsMap":{},"nsPrev":{},"id":8775,"ts":1715005284.951,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":0},{"idx":1679,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"inside"}]}],"prev":{"1677":{"type":"list","values":[],"loc":1677},"1679":null},"meta":{},"metaPrev":{},"map":{"1677":{"type":"list","values":[1679],"loc":1677},"1679":{"type":"identifier","text":",","loc":1679}},"nsMap":{},"nsPrev":{},"id":8776,"ts":1715005285.178,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"idx":1680,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":0},{"idx":1679,"type":"subtext","at":1}]}],"prev":{"1677":{"type":"list","values":[1679],"loc":1677},"1680":null},"meta":{},"metaPrev":{},"map":{"1677":{"type":"list","values":[1679,1680],"loc":1677},"1680":{"type":"blank","loc":1680}},"nsMap":{},"nsPrev":{},"id":8777,"ts":1715005285.251,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"idx":1680,"type":"start"}]}],"prev":{"1680":{"type":"blank","loc":1680}},"meta":{},"metaPrev":{},"map":{"1680":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1680}},"nsMap":{},"nsPrev":{},"id":8778,"ts":1715005288.232,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prev":{"1680":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1680}},"meta":{},"metaPrev":{},"map":{"1680":{"type":"raw-code","lang":"javascript","raw":"li// some code","loc":1680}},"nsMap":{},"nsPrev":{},"id":8779,"ts":1715005288.691,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prev":{"1680":{"type":"raw-code","lang":"javascript","raw":"li// some code","loc":1680}},"meta":{},"metaPrev":{},"map":{"1680":{"type":"raw-code","lang":"javascript","raw":"list// some code","loc":1680}},"nsMap":{},"nsPrev":{},"id":8780,"ts":1715005288.859,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prev":{"1680":{"type":"raw-code","lang":"javascript","raw":"list// some code","loc":1680}},"meta":{},"metaPrev":{},"map":{"1680":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1680}},"nsMap":{},"nsPrev":{},"id":8781,"ts":1715005289.645,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"type":"rich-text","idx":1680,"sel":null}]}],"prev":{"1680":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1680}},"meta":{},"metaPrev":{},"map":{"1680":{"type":"raw-code","lang":"javascript","raw":"list","loc":1680}},"nsMap":{},"nsPrev":{},"id":8782,"ts":1715005289.741,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":1},{"idx":1680,"type":"end"}]}],"prev":{"1677":{"type":"list","values":[1679,1680],"loc":1677},"1681":null},"meta":{},"metaPrev":{},"map":{"1677":{"type":"list","values":[1679,1680,1681],"loc":1677},"1681":{"type":"blank","loc":1681}},"nsMap":{},"nsPrev":{},"id":8783,"ts":1715005291.453,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"start"}]}],"prev":{"1681":{"type":"blank","loc":1681}},"meta":{},"metaPrev":{},"map":{"1681":{"type":"array","values":[],"loc":1681}},"nsMap":{},"nsPrev":{},"id":8784,"ts":1715005291.581,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"inside"}]}],"prev":{"1681":{"type":"array","values":[],"loc":1681},"1682":null},"meta":{},"metaPrev":{},"map":{"1681":{"type":"array","values":[1682],"loc":1681},"1682":{"type":"list","values":[],"loc":1682}},"nsMap":{},"nsPrev":{},"id":8785,"ts":1715005291.817,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":0},{"idx":1683,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"inside"}]}],"prev":{"1682":{"type":"list","values":[],"loc":1682},"1683":null},"meta":{},"metaPrev":{},"map":{"1682":{"type":"list","values":[1683],"loc":1682},"1683":{"type":"identifier","text":",","loc":1683}},"nsMap":{},"nsPrev":{},"id":8786,"ts":1715005292.084,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":0},{"idx":1683,"type":"subtext","at":1}]}],"prev":{"1682":{"type":"list","values":[1683],"loc":1682},"1684":null},"meta":{},"metaPrev":{},"map":{"1682":{"type":"list","values":[1683,1684],"loc":1682},"1684":{"type":"blank","loc":1684}},"nsMap":{},"nsPrev":{},"id":8787,"ts":1715005292.206,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"start"}]}],"prev":{"1684":{"type":"blank","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"array","values":[],"loc":1684}},"nsMap":{},"nsPrev":{},"id":8788,"ts":1715005294.176,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":0},{"idx":1685,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"inside"}]}],"prev":{"1684":{"type":"array","values":[],"loc":1684},"1685":null},"meta":{},"metaPrev":{},"map":{"1684":{"type":"array","values":[1685],"loc":1684},"1685":{"type":"identifier","text":"1","loc":1685}},"nsMap":{},"nsPrev":{},"id":8789,"ts":1715005294.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":1},{"idx":1686,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":0},{"idx":1685,"type":"subtext","at":1}]}],"prev":{"1684":{"type":"array","values":[1685],"loc":1684},"1686":null},"meta":{},"metaPrev":{},"map":{"1684":{"type":"array","values":[1685,1686],"loc":1684},"1686":{"type":"blank","loc":1686}},"nsMap":{},"nsPrev":{},"id":8790,"ts":1715005294.658,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":1},{"idx":1686,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":1},{"idx":1686,"type":"start"}]}],"prev":{"1686":{"type":"blank","loc":1686}},"meta":{},"metaPrev":{},"map":{"1686":{"type":"identifier","text":"2","loc":1686}},"nsMap":{},"nsPrev":{},"id":8791,"ts":1715005294.837,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":2},{"idx":1687,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":1},{"idx":1686,"type":"subtext","at":1}]}],"prev":{"1684":{"type":"array","values":[1685,1686],"loc":1684},"1687":null},"meta":{},"metaPrev":{},"map":{"1684":{"type":"array","values":[1685,1686,1687],"loc":1684},"1687":{"type":"blank","loc":1687}},"nsMap":{},"nsPrev":{},"id":8792,"ts":1715005294.957,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":2},{"idx":1687,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"child","at":2},{"idx":1687,"type":"start"}]}],"prev":{"1687":{"type":"blank","loc":1687}},"meta":{},"metaPrev":{},"map":{"1687":{"type":"identifier","text":"3","loc":1687}},"nsMap":{},"nsPrev":{},"id":8793,"ts":1715005295.097,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"1678":{"type":"normal","top":1677,"children":[],"id":1678,"plugin":{"id":"fixture","options":null}}},"nsPrev":{"1678":{"type":"normal","top":1677,"children":[],"id":1678}},"id":8794,"ts":1715005297.65,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":2},{"idx":1692,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":0},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"end"}]}],"prev":{"1682":{"type":"list","values":[1683,1684],"loc":1682},"1692":null},"meta":{},"metaPrev":{},"map":{"1682":{"type":"list","values":[1683,1684,1692],"loc":1682},"1692":{"type":"blank","loc":1692}},"nsMap":{},"nsPrev":{},"id":8795,"ts":1715005301.557,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"end"}]}],"prev":{"1682":{"type":"list","values":[1683,1684,1692],"loc":1682},"1684":{"type":"array","values":[1685,1686,1687],"loc":1684},"1685":{"type":"identifier","text":"1","loc":1685},"1686":{"type":"identifier","text":"2","loc":1686},"1687":{"type":"identifier","text":"3","loc":1687}},"meta":{},"metaPrev":{},"map":{"1682":{"type":"list","values":[1683,1684,1692],"loc":1682},"1684":{"type":"blank","loc":1684},"1685":null,"1686":null,"1687":null},"nsMap":{},"nsPrev":{},"id":8796,"ts":1715005305.513,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"idx":1684,"type":"start"}]}],"prev":{"1684":{"type":"blank","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1684}},"nsMap":{},"nsPrev":{},"id":8797,"ts":1715005306.86,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"","loc":1684}},"nsMap":{},"nsPrev":{},"id":8798,"ts":1715005308.548,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[","loc":1684}},"nsMap":{},"nsPrev":{},"id":8799,"ts":1715005308.81,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1","loc":1684}},"nsMap":{},"nsPrev":{},"id":8800,"ts":1715005309.007,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1,","loc":1684}},"nsMap":{},"nsPrev":{},"id":8801,"ts":1715005309.265,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1,","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, ","loc":1684}},"nsMap":{},"nsPrev":{},"id":8802,"ts":1715005309.591,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, ","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2","loc":1684}},"nsMap":{},"nsPrev":{},"id":8803,"ts":1715005309.767,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2,","loc":1684}},"nsMap":{},"nsPrev":{},"id":8804,"ts":1715005309.977,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2,","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, ","loc":1684}},"nsMap":{},"nsPrev":{},"id":8805,"ts":1715005310.125,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, ","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3","loc":1684}},"nsMap":{},"nsPrev":{},"id":8806,"ts":1715005310.259,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":1},{"type":"rich-text","idx":1684,"sel":null}]}],"prev":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3","loc":1684}},"meta":{},"metaPrev":{},"map":{"1684":{"type":"raw-code","lang":"javascript","raw":"[1, 2, 3]","loc":1684}},"nsMap":{},"nsPrev":{},"id":8807,"ts":1715005310.342,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":2},{"idx":1693,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":2},{"idx":1692,"type":"subtext","at":0}]}],"prev":{"1682":{"type":"list","values":[1683,1684,1692],"loc":1682},"1693":null},"meta":{},"metaPrev":{},"map":{"1682":{"type":"list","values":[1683,1684,1693],"loc":1682},"1693":{"type":"raw-code","lang":"javascript","loc":1693,"raw":"{\"0\":1,\"1\":{\"0\":2,\"1\":{\"0\":3,\"1\":{\"type\":\"nil\"},\"type\":\"cons\"},\"type\":\"cons\"},\"type\":\"cons\"}"}},"nsMap":{},"nsPrev":{},"id":8808,"ts":1715005314.802,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":1},{"idx":1694,"type":"child","at":1},{"idx":1696,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":0,"idx":1681},{"idx":1682,"type":"child","at":2},{"idx":1693,"type":"end"}]}],"prev":{"1681":{"type":"array","values":[1682],"loc":1681},"1694":null,"1695":null,"1696":null,"1697":null},"meta":{},"metaPrev":{},"map":{"1681":{"type":"array","values":[1682,1694],"loc":1681},"1694":{"type":"list","values":[1695,1696,1697],"loc":1694},"1695":{"type":"identifier","text":",","loc":1695},"1696":{"type":"blank","loc":1696},"1697":{"type":"blank","loc":1697}},"nsMap":{},"nsPrev":{},"id":8809,"ts":1715005316.697,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":1},{"idx":1694,"type":"child","at":1},{"type":"rich-text","idx":1696,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":1},{"idx":1694,"type":"child","at":1},{"idx":1696,"type":"start"}]}],"prev":{"1696":{"type":"blank","loc":1696}},"meta":{},"metaPrev":{},"map":{"1696":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1696}},"nsMap":{},"nsPrev":{},"id":8810,"ts":1715005318.943,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":1,"idx":1681},{"idx":1694,"type":"child","at":1},{"type":"rich-text","idx":1696,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"idx":1681,"type":"child","at":1},{"idx":1694,"type":"child","at":1},{"type":"rich-text","idx":1696,"sel":null}]}],"prev":{"1696":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1696}},"meta":{},"metaPrev":{},"map":{"1696":{"type":"raw-code","lang":"javascript","raw":"[]","loc":1696}},"nsMap":{},"nsPrev":{},"id":8811,"ts":1715005319.962,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":1,"idx":1681},{"idx":1694,"type":"child","at":2},{"idx":1698,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"child","at":2},{"type":"child","at":1,"idx":1681},{"idx":1694,"type":"child","at":2},{"idx":1697,"type":"subtext","at":0}]}],"prev":{"1694":{"type":"list","values":[1695,1696,1697],"loc":1694},"1698":null},"meta":{},"metaPrev":{},"map":{"1694":{"type":"list","values":[1695,1696,1698],"loc":1694},"1698":{"type":"raw-code","lang":"javascript","loc":1698,"raw":"{\"type\":\"nil\"}"}},"nsMap":{},"nsPrev":{},"id":8812,"ts":1715005322.024,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1678,"idx":26},{"type":"ns-top","idx":1678},{"idx":1677,"type":"end"}]}],"prev":{"1699":null},"meta":{},"metaPrev":{},"map":{"1699":{"type":"blank","loc":1699}},"nsMap":{"26":{"type":"normal","top":25,"children":[110,1678,1700],"id":26,"collapsed":false},"1700":{"type":"normal","top":1699,"children":[],"id":1700}},"nsPrev":{"26":{"type":"normal","top":25,"children":[110,1678],"id":26,"collapsed":false},"1700":null},"id":8813,"ts":1715005323.512,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":0}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"1700":{"type":"normal","top":1699,"children":[],"id":1700,"plugin":{"id":"fixture","options":null}}},"nsPrev":{"1700":{"type":"normal","top":1699,"children":[],"id":1700}},"id":8814,"ts":1715005328.251,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":0}]}],"prev":{"1699":{"type":"blank","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"u","loc":1699}},"nsMap":{},"nsPrev":{},"id":8815,"ts":1715005331.063,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":1}]}],"prev":{"1699":{"type":"identifier","text":"u","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"un","loc":1699}},"nsMap":{},"nsPrev":{},"id":8816,"ts":1715005331.111,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":3}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":2}]}],"prev":{"1699":{"type":"identifier","text":"un","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unw","loc":1699}},"nsMap":{},"nsPrev":{},"id":8817,"ts":1715005331.167,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":4}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":3}]}],"prev":{"1699":{"type":"identifier","text":"unw","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwr","loc":1699}},"nsMap":{},"nsPrev":{},"id":8818,"ts":1715005331.23,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":5}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":4}]}],"prev":{"1699":{"type":"identifier","text":"unwr","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwra","loc":1699}},"nsMap":{},"nsPrev":{},"id":8819,"ts":1715005331.309,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":6}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":5}]}],"prev":{"1699":{"type":"identifier","text":"unwra","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwrap","loc":1699}},"nsMap":{},"nsPrev":{},"id":8820,"ts":1715005331.399,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":7}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":6}]}],"prev":{"1699":{"type":"identifier","text":"unwrap","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwrapL","loc":1699}},"nsMap":{},"nsPrev":{},"id":8821,"ts":1715005331.61,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":8}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":7}]}],"prev":{"1699":{"type":"identifier","text":"unwrapL","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwrapLi","loc":1699}},"nsMap":{},"nsPrev":{},"id":8822,"ts":1715005331.763,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":9}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":8}]}],"prev":{"1699":{"type":"identifier","text":"unwrapLi","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwrapLis","loc":1699}},"nsMap":{},"nsPrev":{},"id":8823,"ts":1715005331.857,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":10}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":9}]}],"prev":{"1699":{"type":"identifier","text":"unwrapLis","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":"unwrapList","loc":1699}},"nsMap":{},"nsPrev":{},"id":8824,"ts":1715005331.914,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":0},{"idx":1699,"type":"subtext","at":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1699,"type":"subtext","at":0}]}],"prev":{"1701":null},"meta":{},"metaPrev":{},"map":{"1701":{"type":"list","values":[1699],"loc":1701}},"nsMap":{"1700":{"type":"normal","top":1701,"children":[],"id":1700,"plugin":{"id":"fixture","options":null}}},"nsPrev":{"1700":{"type":"normal","top":1699,"children":[],"id":1700,"plugin":{"id":"fixture","options":null}}},"id":8825,"ts":1715005333.926,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":0},{"idx":1699,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":0},{"idx":1699,"type":"subtext","at":0}]}],"prev":{"1699":{"type":"identifier","text":"unwrapList","loc":1699}},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":",unwrapList","loc":1699}},"nsMap":{},"nsPrev":{},"id":8826,"ts":1715005334.158,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"idx":1702,"type":"subtext","at":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":0},{"idx":1699,"type":"subtext","at":1}]}],"prev":{"1699":{"type":"identifier","text":",unwrapList","loc":1699},"1701":{"type":"list","values":[1699],"loc":1701},"1702":null},"meta":{},"metaPrev":{},"map":{"1699":{"type":"identifier","text":",","loc":1699},"1701":{"type":"list","values":[1699,1702],"loc":1701},"1702":{"type":"identifier","text":"unwrapList","loc":1702}},"nsMap":{},"nsPrev":{},"id":8827,"ts":1715005334.279,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"idx":1702,"type":"subtext","at":10}]}],"prev":{"1701":{"type":"list","values":[1699,1702],"loc":1701},"1703":null},"meta":{},"metaPrev":{},"map":{"1701":{"type":"list","values":[1699,1702,1703],"loc":1701},"1703":{"type":"blank","loc":1703}},"nsMap":{},"nsPrev":{},"id":8828,"ts":1715005335.376,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"start"}]}],"prev":{"1703":{"type":"blank","loc":1703}},"meta":{},"metaPrev":{},"map":{"1703":{"type":"array","values":[],"loc":1703}},"nsMap":{},"nsPrev":{},"id":8829,"ts":1715005335.636,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1704,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"idx":1702,"type":"subtext","at":10}]}],"prev":{"1701":{"type":"list","values":[1699,1702,1703],"loc":1701},"1704":null},"meta":{},"metaPrev":{},"map":{"1701":{"type":"list","values":[1699,1702,1704,1703],"loc":1701},"1704":{"type":"blank","loc":1704}},"nsMap":{},"nsPrev":{},"id":8830,"ts":1715005337.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"inside"}]}],"prev":{"1703":{"type":"array","values":[],"loc":1703},"1705":null},"meta":{},"metaPrev":{},"map":{"1703":{"type":"array","values":[1705],"loc":1703},"1705":{"type":"list","values":[],"loc":1705}},"nsMap":{},"nsPrev":{},"id":8831,"ts":1715005340.06,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"child","at":0},{"idx":1706,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"inside"}]}],"prev":{"1705":{"type":"list","values":[],"loc":1705},"1706":null},"meta":{},"metaPrev":{},"map":{"1705":{"type":"list","values":[1706],"loc":1705},"1706":{"type":"identifier","text":",","loc":1706}},"nsMap":{},"nsPrev":{},"id":8832,"ts":1715005340.286,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"child","at":1},{"idx":1707,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":3},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"child","at":0},{"idx":1706,"type":"subtext","at":1}]}],"prev":{"1705":{"type":"list","values":[1706],"loc":1705},"1707":null},"meta":{},"metaPrev":{},"map":{"1705":{"type":"list","values":[1706,1707],"loc":1705},"1707":{"type":"blank","loc":1707}},"nsMap":{},"nsPrev":{},"id":8833,"ts":1715005340.373,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"idx":1702,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1704,"type":"end"}]}],"prev":{"1701":{"type":"list","values":[1699,1702,1704,1703],"loc":1701},"1704":{"type":"blank","loc":1704}},"meta":{},"metaPrev":{},"map":{"1701":{"type":"list","values":[1699,1702,1703],"loc":1701},"1704":null},"nsMap":{},"nsPrev":{},"id":8834,"ts":1715005341.786,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"child","at":2},{"idx":1708,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":0},{"idx":1705,"type":"child","at":1},{"idx":1707,"type":"start"}]}],"prev":{"1705":{"type":"list","values":[1706,1707],"loc":1705},"1708":null},"meta":{},"metaPrev":{},"map":{"1705":{"type":"list","values":[1706,1707,1708],"loc":1705},"1708":{"type":"blank","loc":1708}},"nsMap":{},"nsPrev":{},"id":8835,"ts":1715005343.876,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"idx":1707,"type":"subtext","at":0}]}],"prev":{"1707":{"type":"blank","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1707}},"nsMap":{},"nsPrev":{},"id":8836,"ts":1715005347.992,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"li","loc":1707}},"nsMap":{},"nsPrev":{},"id":8837,"ts":1715005349.591,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"li","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1707}},"nsMap":{},"nsPrev":{},"id":8838,"ts":1715005349.652,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list","loc":1707}},"nsMap":{},"nsPrev":{},"id":8839,"ts":1715005349.714,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list(","loc":1707}},"nsMap":{},"nsPrev":{},"id":8840,"ts":1715005349.944,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list(","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([","loc":1707}},"nsMap":{},"nsPrev":{},"id":8841,"ts":1715005350.134,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1","loc":1707}},"nsMap":{},"nsPrev":{},"id":8842,"ts":1715005350.292,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, ","loc":1707}},"nsMap":{},"nsPrev":{},"id":8843,"ts":1715005350.407,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, ","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2,","loc":1707}},"nsMap":{},"nsPrev":{},"id":8844,"ts":1715005350.595,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2,","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, ","loc":1707}},"nsMap":{},"nsPrev":{},"id":8845,"ts":1715005351.001,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, ","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3","loc":1707}},"nsMap":{},"nsPrev":{},"id":8846,"ts":1715005351.126,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3]","loc":1707}},"nsMap":{},"nsPrev":{},"id":8847,"ts":1715005351.291,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":1},{"type":"rich-text","idx":1707,"sel":null}]}],"prev":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3]","loc":1707}},"meta":{},"metaPrev":{},"map":{"1707":{"type":"raw-code","lang":"javascript","raw":"list([1, 2, 3])","loc":1707}},"nsMap":{},"nsPrev":{},"id":8848,"ts":1715005351.51,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"type":"rich-text","idx":1702,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":1},{"idx":1702,"type":"subtext","at":3}]}],"prev":{"1702":{"type":"identifier","text":"unwrapList","loc":1702}},"meta":{},"metaPrev":{},"map":{"1702":{"type":"raw-code","lang":"javascript","raw":"unwrapList","loc":1702}},"nsMap":{},"nsPrev":{},"id":8849,"ts":1715005354.277,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":2},{"idx":1709,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":2},{"idx":1708,"type":"subtext","at":0}]}],"prev":{"1705":{"type":"list","values":[1706,1707,1708],"loc":1705},"1709":null},"meta":{},"metaPrev":{},"map":{"1705":{"type":"list","values":[1706,1707,1709],"loc":1705},"1709":{"type":"raw-code","lang":"javascript","loc":1709,"raw":"[1,2,3]"}},"nsMap":{},"nsPrev":{},"id":8850,"ts":1715005355.784,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":1},{"idx":1710,"type":"child","at":1},{"idx":1712,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":0,"idx":1703},{"idx":1705,"type":"child","at":2},{"idx":1709,"type":"end"}]}],"prev":{"1703":{"type":"array","values":[1705],"loc":1703},"1710":null,"1711":null,"1712":null,"1713":null},"meta":{},"metaPrev":{},"map":{"1703":{"type":"array","values":[1705,1710],"loc":1703},"1710":{"type":"list","values":[1711,1712,1713],"loc":1710},"1711":{"type":"identifier","text":",","loc":1711},"1712":{"type":"blank","loc":1712},"1713":{"type":"blank","loc":1713}},"nsMap":{},"nsPrev":{},"id":8851,"ts":1715005356.773,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":1},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":1},{"idx":1710,"type":"child","at":1},{"idx":1712,"type":"start"}]}],"prev":{"1712":{"type":"blank","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1712}},"nsMap":{},"nsPrev":{},"id":8852,"ts":1715005358.03,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"idx":1703,"type":"child","at":1},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prev":{"1712":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1712}},"nsMap":{},"nsPrev":{},"id":8853,"ts":1715005358.973,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prev":{"1712":{"type":"raw-code","lang":"javascript","raw":"lis","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"list","loc":1712}},"nsMap":{},"nsPrev":{},"id":8854,"ts":1715005359.068,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prev":{"1712":{"type":"raw-code","lang":"javascript","raw":"list","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"list(","loc":1712}},"nsMap":{},"nsPrev":{},"id":8855,"ts":1715005359.291,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prev":{"1712":{"type":"raw-code","lang":"javascript","raw":"list(","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"list([]","loc":1712}},"nsMap":{},"nsPrev":{},"id":8856,"ts":1715005359.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":1},{"type":"rich-text","idx":1712,"sel":null}]}],"prev":{"1712":{"type":"raw-code","lang":"javascript","raw":"list([]","loc":1712}},"meta":{},"metaPrev":{},"map":{"1712":{"type":"raw-code","lang":"javascript","raw":"list([])","loc":1712}},"nsMap":{},"nsPrev":{},"id":8857,"ts":1715005359.723,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":2},{"idx":1714,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":1700,"idx":26},{"type":"ns-top","idx":1700},{"idx":1701,"type":"child","at":2},{"type":"child","at":1,"idx":1703},{"idx":1710,"type":"child","at":2},{"idx":1713,"type":"subtext","at":0}]}],"prev":{"1710":{"type":"list","values":[1711,1712,1713],"loc":1710},"1714":null},"meta":{},"metaPrev":{},"map":{"1710":{"type":"list","values":[1711,1712,1714],"loc":1710},"1714":{"type":"raw-code","lang":"javascript","loc":1714,"raw":"[]"}},"nsMap":{},"nsPrev":{},"id":8858,"ts":1715005361.7,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prev":{"57":{"type":"raw-code","lang":"javascript","raw":"pair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"meta":{},"metaPrev":{},"map":{"57":{"type":"raw-code","lang":"javascript","raw":"cpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"nsMap":{},"nsPrev":{},"id":8859,"ts":1715006698.512,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prev":{"57":{"type":"raw-code","lang":"javascript","raw":"cpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"meta":{},"metaPrev":{},"map":{"57":{"type":"raw-code","lang":"javascript","raw":"conpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"nsMap":{},"nsPrev":{},"id":8860,"ts":1715006698.607,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prev":{"57":{"type":"raw-code","lang":"javascript","raw":"conpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"meta":{},"metaPrev":{},"map":{"57":{"type":"raw-code","lang":"javascript","raw":"conspair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"nsMap":{},"nsPrev":{},"id":8861,"ts":1715006698.661,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prev":{"57":{"type":"raw-code","lang":"javascript","raw":"conspair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"meta":{},"metaPrev":{},"map":{"57":{"type":"raw-code","lang":"javascript","raw":"constpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"nsMap":{},"nsPrev":{},"id":8862,"ts":1715006698.744,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"type":"rich-text","idx":57,"sel":null}]}],"prev":{"57":{"type":"raw-code","lang":"javascript","raw":"constpair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"meta":{},"metaPrev":{},"map":{"57":{"type":"raw-code","lang":"javascript","raw":"const pair = (a, b) => ({type: ',', 0: a, 1: b})","loc":57}},"nsMap":{},"nsPrev":{},"id":8863,"ts":1715006698.816,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"foldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"raw-code","lang":"javascript","raw":"cfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"nsMap":{},"nsPrev":{},"id":8864,"ts":1715006700.176,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"cfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"raw-code","lang":"javascript","raw":"confoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"nsMap":{},"nsPrev":{},"id":8865,"ts":1715006700.246,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"confoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"raw-code","lang":"javascript","raw":"consfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"nsMap":{},"nsPrev":{},"id":8866,"ts":1715006700.307,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"consfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"raw-code","lang":"javascript","raw":"constfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"nsMap":{},"nsPrev":{},"id":8867,"ts":1715006700.399,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"type":"rich-text","idx":70,"sel":null}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"constfoldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"raw-code","lang":"javascript","raw":"const foldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"nsMap":{},"nsPrev":{},"id":8868,"ts":1715006700.466,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prev":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"meta":{},"metaPrev":{},"map":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\ncmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"nsMap":{},"nsPrev":{},"id":8869,"ts":1715006701.979,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prev":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\ncmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"meta":{},"metaPrev":{},"map":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"nsMap":{},"nsPrev":{},"id":8870,"ts":1715006702.054,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prev":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"meta":{},"metaPrev":{},"map":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconsmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"nsMap":{},"nsPrev":{},"id":8871,"ts":1715006702.106,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prev":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconsmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"meta":{},"metaPrev":{},"map":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconstmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"nsMap":{},"nsPrev":{},"id":8872,"ts":1715006702.169,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":150,"idx":214},{"type":"ns-top","idx":150},{"type":"rich-text","idx":149,"sel":null}]}],"prev":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconstmakePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"meta":{},"metaPrev":{},"map":{"149":{"type":"raw-code","lang":"javascript","raw":"// This will be useful for the `let` and `match` forms, where we expect a list of pairs of nodes.\nconst makePairs = array => {\n  const res = [];\n  for (let i = 0; i < array.length - 1; i += 2) {\n    res.push([array[i], array[i + 1]]);\n  }\n  return res\n}","loc":149}},"nsMap":{},"nsPrev":{},"id":8873,"ts":1715006702.252,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prev":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"meta":{},"metaPrev":{},"map":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\ncovalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"nsMap":{},"nsPrev":{},"id":8874,"ts":1715006705.723,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prev":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\ncovalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"meta":{},"metaPrev":{},"map":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"nsMap":{},"nsPrev":{},"id":8875,"ts":1715006705.805,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prev":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"meta":{},"metaPrev":{},"map":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconsvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"nsMap":{},"nsPrev":{},"id":8876,"ts":1715006705.83,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prev":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconsvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"meta":{},"metaPrev":{},"map":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconstvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"nsMap":{},"nsPrev":{},"id":8877,"ts":1715006705.919,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":112,"idx":214},{"type":"ns-top","idx":112},{"type":"rich-text","idx":111,"sel":null}]}],"prev":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconstvalueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"meta":{},"metaPrev":{},"map":{"111":{"type":"raw-code","lang":"javascript","raw":"// turn a runtime value into a nice-to-read string. Roughly corresponds to `show` from Haskell\n// or `repr` from python\nconst valueToString = (v) => {\n    if (typeof v === 'object' && v && 'type' in v) {\n        if (v.type === 'cons' || v.type === 'nil') {\n            const un = unwrapList(v);\n            return '[' + un.map(valueToString).join(' ') + ']';\n        }\n\n        let args = [];\n        for (let i = 0; i in v; i++) {\n            args.push(v[i]);\n        }\n        return `(${v.type}${args\n            .map((arg) => ' ' + valueToString(arg))\n            .join('')})`;\n    }\n    if (typeof v === 'string') {\n        if (v.includes('\"') && !v.includes(\"'\")) {\n            return (\n                \"'\" + JSON.stringify(v).slice(1, -1).replace(/\\\\\"/g, '\"') + \"'\"\n            );\n        }\n        return JSON.stringify(v);\n    }\n    if (typeof v === 'function') {\n        return '<function>';\n    }\n\n    return '' + v;\n};\n","loc":111}},"nsMap":{},"nsPrev":{},"id":8878,"ts":1715006705.967,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncofilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":8879,"ts":1715006711.425,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncofilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":8880,"ts":1715006711.477,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconstfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":8881,"ts":1715006711.626,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconstfilterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":8882,"ts":1715006711.693,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns-top","idx":212},{"idx":211,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns-top","idx":212},{"idx":211,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":false}},"nsPrev":{"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":true}},"id":8883,"ts":1715006712.428,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"idx":33,"type":"start"}]}],"prev":{"33":{"type":"raw-code","lang":"javascript","raw":"parse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"meta":{},"metaPrev":{},"map":{"33":{"type":"raw-code","lang":"javascript","raw":"cparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"nsMap":{},"nsPrev":{},"id":8884,"ts":1715006718.533,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prev":{"33":{"type":"raw-code","lang":"javascript","raw":"cparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"meta":{},"metaPrev":{},"map":{"33":{"type":"raw-code","lang":"javascript","raw":"conparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"nsMap":{},"nsPrev":{},"id":8885,"ts":1715006719.199,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prev":{"33":{"type":"raw-code","lang":"javascript","raw":"conparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"meta":{},"metaPrev":{},"map":{"33":{"type":"raw-code","lang":"javascript","raw":"constparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"nsMap":{},"nsPrev":{},"id":8886,"ts":1715006719.389,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":34,"idx":216},{"type":"ns-top","idx":34},{"type":"rich-text","idx":33,"sel":null}]}],"prev":{"33":{"type":"raw-code","lang":"javascript","raw":"constparse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"meta":{},"metaPrev":{},"map":{"33":{"type":"raw-code","lang":"javascript","raw":"const parse = node => {\n  switch (node.type) {\n    case 'identifier': {\n      return parsePrim(node) || c.evar(node.text, node.loc)\n    }\n    case 'string': {\n      const exprs = node.templates.map(t => parse(t.expr))\n      return {\n        type: 'estr',\n        0: node.first.text,\n        1: list(node.templates.map((t, i) => ({type: ',,', 0: exprs[i], 1: t.suffix.text, 2: t.suffix.loc}))),\n        2: node.loc\n      }\n    }\n    case 'list': {\n      const values = filterBlanks(node.values)\n      // empty list gets parsed as a `()` unit value.\n      if (!values.length) return c.evar('()', node.loc)\n      if (values[0].type === 'identifier') {\n        const first = values[0].text;\n        // If we're in a list w/ the first item being an identifier, see if\n        // we're in a 'special form' (defined below)\n        if (forms[first]) {\n          const res = forms[first](node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n      // Otherwise do function application.\n      const parsed = values.map(parse)\n      return c.app(parsed[0], list(parsed.slice(1)))\n    }\n    case 'array': {\n      if (!node.values.length) return c.evar('nil', node.loc)\n      let last = node.values[node.values.length - 1]\n      // a normal list [1 2 3] turns into (cons 1 (cons 2 (cons 3 nil))).\n      // a final `spread` node is neatly represented by replacing the\n      // final `nil` with the contents of the spread.\n      // so [a b ..c] becomes (cons a (cons b c))\n      let res = last.type === 'spread'\n        ? parse(last.contents)\n        : c.cons(parse(last), c.nil(node.loc), node.loc)\n      for (let i=node.values.length - 2; i>=0; i--) {\n        res = c.cons(parse(node.values[i]), res)\n      }\n      return res\n    }\n    // for our language, the `raw-code` node just gets passed through as a runtime string.\n    // we can call `eval` on it if we need an escape hatch for e.g. producing the API\n    // expected by the structured editor.\n    case 'raw-code':\n      return {type: 'estr', 0: node.raw, 1: nil, 2: node.loc}\n  }\n  throw new Error(`cant parse ${JSON.stringify(node)}`)\n}","loc":33}},"nsMap":{},"nsPrev":{},"id":8887,"ts":1715006719.406,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prev":{"68":{"type":"raw-code","lang":"javascript","raw":"forms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"meta":{},"metaPrev":{},"map":{"68":{"type":"raw-code","lang":"javascript","raw":"coforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"nsMap":{},"nsPrev":{},"id":8888,"ts":1715006722.235,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prev":{"68":{"type":"raw-code","lang":"javascript","raw":"coforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"meta":{},"metaPrev":{},"map":{"68":{"type":"raw-code","lang":"javascript","raw":"conforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"nsMap":{},"nsPrev":{},"id":8889,"ts":1715006722.375,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prev":{"68":{"type":"raw-code","lang":"javascript","raw":"conforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"meta":{},"metaPrev":{},"map":{"68":{"type":"raw-code","lang":"javascript","raw":"consforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"nsMap":{},"nsPrev":{},"id":8890,"ts":1715006722.38,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prev":{"68":{"type":"raw-code","lang":"javascript","raw":"consforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"meta":{},"metaPrev":{},"map":{"68":{"type":"raw-code","lang":"javascript","raw":"constforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"nsMap":{},"nsPrev":{},"id":8891,"ts":1715006722.408,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":69,"idx":216},{"type":"ns-top","idx":69},{"type":"rich-text","idx":68,"sel":null}]}],"prev":{"68":{"type":"raw-code","lang":"javascript","raw":"constforms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"meta":{},"metaPrev":{},"map":{"68":{"type":"raw-code","lang":"javascript","raw":"const forms = {\n  fn: (loc, args, body) => {\n    if (!args || !body) return\n    if (args.type !== 'array') return\n    const pats = filterBlanks(args.values).map(parsePat)\n    return {type: 'elambda', 0: list(pats), 1: parse(body), 2: loc}\n  },\n  let: (loc, bindings, body) => {\n    if (!bindings || !body) return\n    if (bindings.type !== 'array') return\n    const pairs = makePairs(filterBlanks(bindings.values))\n    return {type: 'elet', 0: list(\n      pairs.map(([pat, init]) => pair(parsePat(pat), parse(init)))),\n      1: parse(body),\n      2: loc\n    }\n  },\n  match: (loc, target, ...rest) => {\n    if (!target || !rest.length) return\n    const cases = makePairs(rest)\n    return {type: 'ematch',\n            0: parse(target),\n            1: list(cases.map(([pat, body]) => pair(parsePat(pat), parse(body)))),\n            2: loc}\n  },\n  '@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/expr', 0: parse(inner)}, 1: loc}),\n  '@!': (loc, inner) => ({type: 'equot', 0: {type: 'quot/stmt', 0: parseStmt(inner)}, 1: loc}),\n  '@p': (loc, inner) => ({type: 'equot', 0: {type: 'quot/pat', 0: parsePat(inner)}, 1: loc}),\n  '@t': (loc, inner) => ({type: 'equot', 0: {type: 'quot/type', 0: parseType(inner)}, 1: loc}),\n  // The \"double quote\" means that the runtime value isn't going to be an AST type, but rather\n  // a CST type! We'll use it in the self-hosting parser to be able to write tests like\n  // `(parse (@@ (some form))`. The `fromNode` function that we're calling converts the\n  // CST of the structured editor into a data format that fits within our encoding, where\n  // attributes of data types have numeric indices, not text labels.\n  // So `{type: 'identifier', text: 'a', loc: 10}` becomes `{type: 'identifier', 0: 'a', 1: 10}`\n  '@@': (loc, inner) => ({type: 'equot', 0: {type: 'quot/quot', 0: fromNode(inner)}, 1: loc}),\n  // Our AST doesn't have a special `if` form, this is just sugar for `(match cond true if-true _ if-false)`\n  'if': (loc, cond, yes, no) => ({type: 'ematch', 0: parse(cond), 1: arr([pair(\n    {type: 'pprim', 0: {type: 'pbool', 0: true, 1: loc}, 1: loc},\n    parse(yes)\n    ), pair(\n      {type: 'pany', 0: loc},\n      parse(no)\n    )\n  ])}),\n}","loc":68}},"nsMap":{},"nsPrev":{},"id":8892,"ts":1715006722.561,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"idx":23,"type":"start"}]}],"prev":{"23":{"type":"raw-code","lang":"javascript","raw":"c = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"meta":{},"metaPrev":{},"map":{"23":{"type":"raw-code","lang":"javascript","raw":"cc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"nsMap":{},"nsPrev":{},"id":8893,"ts":1715006725.179,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prev":{"23":{"type":"raw-code","lang":"javascript","raw":"cc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"meta":{},"metaPrev":{},"map":{"23":{"type":"raw-code","lang":"javascript","raw":"conc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"nsMap":{},"nsPrev":{},"id":8894,"ts":1715006725.299,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prev":{"23":{"type":"raw-code","lang":"javascript","raw":"conc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"meta":{},"metaPrev":{},"map":{"23":{"type":"raw-code","lang":"javascript","raw":"constc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"nsMap":{},"nsPrev":{},"id":8895,"ts":1715006725.424,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":24,"idx":216},{"type":"ns-top","idx":24},{"type":"rich-text","idx":23,"sel":null}]}],"prev":{"23":{"type":"raw-code","lang":"javascript","raw":"constc = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"meta":{},"metaPrev":{},"map":{"23":{"type":"raw-code","lang":"javascript","raw":"const c = {\n  prim: (prim, loc=-1) => ({type: 'eprim', 0: prim, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  evar: (text, loc=-1) => ({type: 'evar', 0: text, 1: loc}),\n  app: (target, arg, loc=-1) => ({type: 'eapp', 0: target, 1: arg, 2: loc}),\n  nil: l => c.evar('nil', l),\n  cons: (a, b, l) => c.app(c.evar('cons', l), list([a, b]), l), //c.app(c.app(c.evar('cons', l), list([a]), l), b, l),\n  list: (values, l) => {\n    let v = c.nil(l)\n    for (let i=values.length-1;i>=0;i--) {\n      v = c.cons(values[i], v, l)\n    }\n    return v\n  },\n  \n}","loc":23}},"nsMap":{},"nsPrev":{},"id":8896,"ts":1715006725.509,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\ncfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":8897,"ts":1715006727.519,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\ncfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":8898,"ts":1715006727.617,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconsfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":8899,"ts":1715006727.698,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconsfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconstfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":8900,"ts":1715006727.718,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconstfromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":8901,"ts":1715006727.805,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"idx":42,"type":"start"}]}],"prev":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"meta":{},"metaPrev":{},"map":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\ncoparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"nsMap":{},"nsPrev":{},"id":8902,"ts":1715006731.685,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prev":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\ncoparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"meta":{},"metaPrev":{},"map":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"nsMap":{},"nsPrev":{},"id":8903,"ts":1715006731.769,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prev":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"meta":{},"metaPrev":{},"map":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconstparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"nsMap":{},"nsPrev":{},"id":8904,"ts":1715006731.925,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1294,"idx":212},{"type":"ns","child":43,"idx":1294},{"type":"ns-top","idx":43},{"type":"rich-text","idx":42,"sel":null}]}],"prev":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconstparsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"meta":{},"metaPrev":{},"map":{"42":{"type":"raw-code","lang":"javascript","raw":"// Expects a node of type 'identifier' and if it's an int or true/false, returns\n// the appropriate `prim`\nconst parsePrim = node => {\n  const v = +node.text\n  if (v + '' === node.text && Math.floor(v) === v) {\n    return c.prim(c.int(v, node.loc), node.loc)\n  }\n  if (node.text === 'true' || node.text === 'false') {\n    return c.prim(c.bool(node.text === 'true', node.loc), node.loc)\n  }\n  return null\n}","loc":42}},"nsMap":{},"nsPrev":{},"id":8905,"ts":1715006731.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prev":{"997":{"type":"raw-code","lang":"javascript","raw":"parseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"meta":{},"metaPrev":{},"map":{"997":{"type":"raw-code","lang":"javascript","raw":"coparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"nsMap":{},"nsPrev":{},"id":8906,"ts":1715006735.473,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prev":{"997":{"type":"raw-code","lang":"javascript","raw":"coparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"meta":{},"metaPrev":{},"map":{"997":{"type":"raw-code","lang":"javascript","raw":"conparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"nsMap":{},"nsPrev":{},"id":8907,"ts":1715006735.559,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prev":{"997":{"type":"raw-code","lang":"javascript","raw":"conparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"meta":{},"metaPrev":{},"map":{"997":{"type":"raw-code","lang":"javascript","raw":"constparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"nsMap":{},"nsPrev":{},"id":8908,"ts":1715006735.685,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":1296,"idx":212},{"type":"ns","child":998,"idx":1296},{"type":"ns-top","idx":998},{"type":"rich-text","idx":997,"sel":null}]}],"prev":{"997":{"type":"raw-code","lang":"javascript","raw":"constparseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"meta":{},"metaPrev":{},"map":{"997":{"type":"raw-code","lang":"javascript","raw":"const parseType = node => {\n  if (node.type === 'identifier') {\n    return {type: 'tcon', 0: node.text, 1: node.loc}\n  }\n  if (node.type === 'list') {\n    const values = filterBlanks(node.values)\n    if (!values.length) return {type: 'tcon', 0: '()', 1: node.loc}\n    if (values.length === 3 &&\n        values[0].type === 'identifier' &&\n        values[0].text === 'fn' &&\n        values[1].type === 'array') {\n      const body = parseType(values[2])\n      // This 'reduceRight' is how we convert a function type declaration\n      // with potentially many arguments into function types with only\n      // single arguments.\n      // for a fn type (fn [a b c] d)\n      // the inner function will be called with\n      //    [body]           [arg]\n      //    d                c\n      //    (-> c d)         b\n      //    (-> b (-> c d))  a\n      // and returns\n      //    (-> a (-> b (-> c d)))\n      return values[1].values.reduceRight((body, arg) => (\n        {type: 'tapp',\n         0: {type: 'tapp',\n             0: {type: 'tcon', 0: '->', 1: node.loc},\n             1: parseType(arg), 2: node.loc},\n         1: body,\n         2: node.loc}\n      ), body)\n    }\n    let res = parseType(values[0])\n    for (let i=1;i<values.length; i++) {\n      res = {type: 'tapp', 0: res, 1: parseType(values[i]), 2: node.loc}\n    }\n    return res\n  }\n  throw new Error(`cant parse type ${node.type}`)\n}","loc":997}},"nsMap":{},"nsPrev":{},"id":8909,"ts":1715006735.781,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prev":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\np = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"meta":{},"metaPrev":{},"map":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\ncop = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"nsMap":{},"nsPrev":{},"id":8910,"ts":1715006738.123,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prev":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\ncop = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"meta":{},"metaPrev":{},"map":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconp = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"nsMap":{},"nsPrev":{},"id":8911,"ts":1715006738.204,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prev":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconp = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"meta":{},"metaPrev":{},"map":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconstp = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"nsMap":{},"nsPrev":{},"id":8912,"ts":1715006738.32,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":189,"idx":218},{"type":"ns-top","idx":189},{"type":"rich-text","idx":188,"sel":null}]}],"prev":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconstp = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"meta":{},"metaPrev":{},"map":{"188":{"type":"raw-code","lang":"javascript","raw":"// Some helper functions for producing pattern AST nodes\nconst p = {\n  prim: (v, loc=-1) => ({type: 'pprim', 0: v, 1: loc}),\n  bool: (v, loc=-1) => ({type: 'pbool', 0: v, 1: loc}),\n  int: (v, loc=-1) => ({type: 'pint', 0: v, 1: loc}),\n  any: loc => ({type: 'pany', 0: loc}),\n  con: (name, args, loc) => ({type: 'pcon', 0: name, 1: list(args), 2: loc}),\n  cons: (one, two, loc) => p.con('cons', [one, two], loc),\n  nil: loc => p.con('nil', [], loc),\n}","loc":188}},"nsMap":{},"nsPrev":{},"id":8913,"ts":1715006738.397,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prev":{"76":{"type":"raw-code","lang":"javascript","raw":"parsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"meta":{},"metaPrev":{},"map":{"76":{"type":"raw-code","lang":"javascript","raw":"coparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"nsMap":{},"nsPrev":{},"id":8914,"ts":1715006740.685,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prev":{"76":{"type":"raw-code","lang":"javascript","raw":"coparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"meta":{},"metaPrev":{},"map":{"76":{"type":"raw-code","lang":"javascript","raw":"conparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"nsMap":{},"nsPrev":{},"id":8915,"ts":1715006740.772,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prev":{"76":{"type":"raw-code","lang":"javascript","raw":"conparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"meta":{},"metaPrev":{},"map":{"76":{"type":"raw-code","lang":"javascript","raw":"constparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"nsMap":{},"nsPrev":{},"id":8916,"ts":1715006740.896,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":218,"idx":212},{"type":"ns","child":77,"idx":218},{"type":"ns-top","idx":77},{"type":"rich-text","idx":76,"sel":null}]}],"prev":{"76":{"type":"raw-code","lang":"javascript","raw":"constparsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"meta":{},"metaPrev":{},"map":{"76":{"type":"raw-code","lang":"javascript","raw":"const parsePat = node => {\n  switch (node.type) {\n    case 'identifier':\n      switch(node.text) {\n        case '_': return p.any(node.loc)\n        case 'true':\n        case 'false':\n          return p.prim(p.bool(node.text === 'true', node.loc), node.loc)\n      }\n      const v = +node.text\n      if (v + '' === node.text && Math.floor(v) === v) return p.prim(p.int(v, node.loc), node.loc)\n      return {type: 'pvar', 0: node.text, 1: node.loc}\n    case 'string':\n      return {type: 'pstr', 0: node.first.text, 1: node.loc}\n    case 'list': {\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.con('()', [], node.loc)\n      if (values[0].type !== 'identifier') throw new Error('pat exp must start with identifier')\n      return p.con(values[0].text, values.slice(1).map(parsePat), node.loc)\n    }\n    case 'array':\n      const values = filterBlanks(node.values)\n      if (!values.length) return p.nil(node.loc)\n      let last = values[values.length - 1]\n      // Doing the same trick here with the final spread as we do in the `parse` for expressions\n      let res = last.type === 'spread' ? parsePat(last.contents) : p.cons(parsePat(last), p.nil(node.loc), node.loc)\n      for (let i=values.length - 2; i>=0; i--) {\n        res = p.cons(parsePat(values[i]), res, node.loc)\n      }\n      return res\n  }\n  throw new Error('unknown pat' + JSON.stringify(node))\n}","loc":76}},"nsMap":{},"nsPrev":{},"id":8917,"ts":1715006740.965,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"idx":221,"type":"start"}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"parseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"cparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":8918,"ts":1715006743.886,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"cparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"conparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":8919,"ts":1715006744.408,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"conparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"constparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":8920,"ts":1715006744.57,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"constparseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":8921,"ts":1715006744.637,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prev":{"225":{"type":"raw-code","lang":"javascript","raw":"stmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"meta":{},"metaPrev":{},"map":{"225":{"type":"raw-code","lang":"javascript","raw":"cstmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"nsMap":{},"nsPrev":{},"id":8922,"ts":1715006746.772,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prev":{"225":{"type":"raw-code","lang":"javascript","raw":"cstmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"meta":{},"metaPrev":{},"map":{"225":{"type":"raw-code","lang":"javascript","raw":"constmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"nsMap":{},"nsPrev":{},"id":8923,"ts":1715006746.883,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prev":{"225":{"type":"raw-code","lang":"javascript","raw":"constmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"meta":{},"metaPrev":{},"map":{"225":{"type":"raw-code","lang":"javascript","raw":"conststmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"nsMap":{},"nsPrev":{},"id":8924,"ts":1715006746.992,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":226,"idx":220},{"type":"ns-top","idx":226},{"type":"rich-text","idx":225,"sel":null}]}],"prev":{"225":{"type":"raw-code","lang":"javascript","raw":"conststmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"meta":{},"metaPrev":{},"map":{"225":{"type":"raw-code","lang":"javascript","raw":"const stmtForms = {\n  deftype(loc, head, ...tail) {\n    if (!head || !tail.length) return\n    // handling both `(deftype expr` (no type arg) and `(deftype (list a)` (some type args)\n    // we don't actually do anything with the type arguments, because we don't have a type checker yet,\n    // and by the time we do we'll be in a self-hosted parser\n    const name = head.type === 'identifier' ? head.text : head.type === 'list' && head.values.length >= 1 && head.values[0].type === 'identifier' ? head.values[0].text : null\n    if (!name) return\n    const constructors = tail.map(item => {\n      if (item.type !== 'list') throw new Error(`constructor not a list`)\n      const values = filterBlanks(item.values)\n      if (values.length < 1) throw new Error(`empty list`)\n      return {type: ',,', 0: values[0].text, 1: list(values.slice(1).map(parseType)), 2: values[0].loc}\n    })\n    return {type: 'sdeftype', 0: name, 1: list(constructors)}\n  },\n  def(loc, name, value) {\n    if (!name || !value) return\n    if (name.type !== 'identifier') return\n    return {type: 'sdef', 0: name.text, 1: parse(value), 2: loc}\n  },\n  defn(loc, name, args, value) {\n    if (!name || !args || !value) return\n    if (name.type !== 'identifier' || args.type !== 'array') return\n    const body = forms.fn(loc, args, value)\n    if (!body) return\n    return {type: 'sdef', 0: name.text, 1: body, 2: loc}\n  }\n}","loc":225}},"nsMap":{},"nsPrev":{},"id":8925,"ts":1715006747.066,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns-top","idx":36},{"idx":35,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns-top","idx":36},{"idx":35,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":false}},"nsPrev":{"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":true}},"id":8926,"ts":1715006748.66,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"idx":21,"type":"start"}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"coevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":8927,"ts":1715006753.759,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"coevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"conevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":8928,"ts":1715006753.82,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"conevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"constevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":8929,"ts":1715006753.938,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"constevaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":8930,"ts":1715006754.006,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"idx":286,"type":"start"}]}],"prev":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"meta":{},"metaPrev":{},"map":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\ncoevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"nsMap":{},"nsPrev":{},"id":8931,"ts":1715006759.355,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prev":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\ncoevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"meta":{},"metaPrev":{},"map":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"nsMap":{},"nsPrev":{},"id":8932,"ts":1715006759.422,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prev":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"meta":{},"metaPrev":{},"map":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconsevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"nsMap":{},"nsPrev":{},"id":8933,"ts":1715006759.456,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prev":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconsevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"meta":{},"metaPrev":{},"map":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconstevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"nsMap":{},"nsPrev":{},"id":8934,"ts":1715006759.538,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":287,"idx":36},{"type":"ns-top","idx":287},{"type":"rich-text","idx":286,"sel":null}]}],"prev":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconstevalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"meta":{},"metaPrev":{},"map":{"286":{"type":"raw-code","lang":"javascript","raw":"// This is our way of figuring out what bindings should result from the application of a\n// pattern to a given value.\n// If `evalPat` returns `null`, that means that pattern *does not* match the value; otherwise\n// it returns a mapping of variable names to bound values.\nconst evalPat = (node, v) => {\n  switch (node.type) {\n    case 'pany': return {}\n    case 'pprim': return v === node[0][0] ? {} : null\n    case 'pstr': return v === node[0]\n    case 'pvar':\n      return {[sanitize(node[0])]: v}\n    case 'pcon':\n      if (v.type === node[0]) {\n        const args = unwrapList(node[1])\n        const scope = {}\n        for (let i=0; i<args.length; i++) {\n          const sub = evalPat(args[i], v[i])\n          if (!sub) return null\n          Object.assign(scope, sub)\n        }\n        return scope\n      }\n      return null\n  }\n  throw new Error(`Unexpected pat ${JSON.stringify(node)}`)\n}       ","loc":286}},"nsMap":{},"nsPrev":{},"id":8935,"ts":1715006759.612,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prev":{"1644":{"type":"raw-code","lang":"javascript","raw":"testEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"meta":{},"metaPrev":{},"map":{"1644":{"type":"raw-code","lang":"javascript","raw":"cotestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"nsMap":{},"nsPrev":{},"id":8936,"ts":1715006762.259,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prev":{"1644":{"type":"raw-code","lang":"javascript","raw":"cotestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"meta":{},"metaPrev":{},"map":{"1644":{"type":"raw-code","lang":"javascript","raw":"contestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"nsMap":{},"nsPrev":{},"id":8937,"ts":1715006762.337,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prev":{"1644":{"type":"raw-code","lang":"javascript","raw":"contestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"meta":{},"metaPrev":{},"map":{"1644":{"type":"raw-code","lang":"javascript","raw":"constestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"nsMap":{},"nsPrev":{},"id":8938,"ts":1715006762.403,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prev":{"1644":{"type":"raw-code","lang":"javascript","raw":"constestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"meta":{},"metaPrev":{},"map":{"1644":{"type":"raw-code","lang":"javascript","raw":"consttestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"nsMap":{},"nsPrev":{},"id":8939,"ts":1715006762.471,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":1645,"idx":36},{"type":"ns-top","idx":1645},{"type":"rich-text","idx":1644,"sel":null}]}],"prev":{"1644":{"type":"raw-code","lang":"javascript","raw":"consttestEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"meta":{},"metaPrev":{},"map":{"1644":{"type":"raw-code","lang":"javascript","raw":"const testEnv = {\n  '$co': a => b => pair(a, b),\n  cons: a => b => ({type: 'cons', 0: a, 1: b}),\n  nil: {type: 'nil'},\n  some: a => ({type: 'some', 0: a}),\n  none: {type: 'none'},\n}","loc":1644}},"nsMap":{},"nsPrev":{},"id":8940,"ts":1715006762.539,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"idx":872,"type":"start"}]}],"prev":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"meta":{},"metaPrev":{},"map":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\ncunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"nsMap":{},"nsPrev":{},"id":8941,"ts":1715006764.611,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prev":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\ncunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"meta":{},"metaPrev":{},"map":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"nsMap":{},"nsPrev":{},"id":8942,"ts":1715006764.77,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prev":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"meta":{},"metaPrev":{},"map":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconstunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"nsMap":{},"nsPrev":{},"id":8943,"ts":1715006764.952,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":873,"idx":36},{"type":"ns-top","idx":873},{"type":"rich-text","idx":872,"sel":null}]}],"prev":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconstunescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"meta":{},"metaPrev":{},"map":{"872":{"type":"raw-code","lang":"javascript","raw":"// \"A\\\\nB\" -> \"A\\nB\"\nconst unescapeSlashes = (n) =>\n    n.replaceAll(/\\\\./g, (m) => {\n        if (m[1] === 'n') {\n            return '\\n';\n        }\n        if (m[1] === 't') {\n            return '\\t';\n        }\n        if (m[1] === 'r') {\n            return '\\r';\n        }\n        return m[1];\n    })","loc":872}},"nsMap":{},"nsPrev":{},"id":8944,"ts":1715006765.029,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prev":{"420":{"type":"raw-code","lang":"javascript","raw":"evaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"meta":{},"metaPrev":{},"map":{"420":{"type":"raw-code","lang":"javascript","raw":"cevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"nsMap":{},"nsPrev":{},"id":8945,"ts":1715006767.12,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prev":{"420":{"type":"raw-code","lang":"javascript","raw":"cevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"meta":{},"metaPrev":{},"map":{"420":{"type":"raw-code","lang":"javascript","raw":"conevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"nsMap":{},"nsPrev":{},"id":8946,"ts":1715006767.237,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prev":{"420":{"type":"raw-code","lang":"javascript","raw":"conevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"meta":{},"metaPrev":{},"map":{"420":{"type":"raw-code","lang":"javascript","raw":"consevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"nsMap":{},"nsPrev":{},"id":8947,"ts":1715006767.261,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":421,"idx":36},{"type":"ns-top","idx":421},{"type":"rich-text","idx":420,"sel":null}]}],"prev":{"420":{"type":"raw-code","lang":"javascript","raw":"consevaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"meta":{},"metaPrev":{},"map":{"420":{"type":"raw-code","lang":"javascript","raw":"const evaluateStmt = (node, env) => {\n  switch (node.type) {\n    case 'sexpr': return evaluate(node[0], env)\n    case 'sdef':\n      const value = evaluate(node[1], env)\n      env[sanitize(node[0])] = value\n      return value\n    case 'sdeftype':\n      const res = {}\n      unwrapList(node[1]).forEach(({0: name, 1: args}) => {\n        res[sanitize(name)] = env[sanitize(name)] = constrFn(name, args)\n      })\n      return res\n  }\n}\n","loc":420}},"nsMap":{},"nsPrev":{},"id":8948,"ts":1715006767.373,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"idx":422,"type":"start"}]}],"prev":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"meta":{},"metaPrev":{},"map":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\ncconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"nsMap":{},"nsPrev":{},"id":8949,"ts":1715006769.321,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prev":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\ncconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"meta":{},"metaPrev":{},"map":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"nsMap":{},"nsPrev":{},"id":8950,"ts":1715006769.435,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prev":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"meta":{},"metaPrev":{},"map":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconstconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"nsMap":{},"nsPrev":{},"id":8951,"ts":1715006769.528,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":423,"idx":36},{"type":"ns-top","idx":423},{"type":"rich-text","idx":422,"sel":null}]}],"prev":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconstconstrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"meta":{},"metaPrev":{},"map":{"422":{"type":"raw-code","lang":"javascript","raw":"// this little helper function produces a \"constructor function\" for a given type constructor definition.\n// so `(cons a (list a))` produces `a => b => ({type: 'cons', 0: a, 1: b})`\n// and `(ok v)` produces `a => ({type: 'ok', 0: a})`\n// and `(nil)` produces `({type: 'nil'})`\nconst constrFn = (name, args) => {\n  const next = (args) => {\n    if (args.type === 'nil') return values => ({type: name, ...values})\n    return values => arg => next(args[1])([...values, arg])\n  }\n  return next(args)([])\n}","loc":422}},"nsMap":{},"nsPrev":{},"id":8952,"ts":1715006769.602,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"idx":335,"type":"start"}]}],"prev":{"335":{"type":"raw-code","lang":"javascript","raw":"evalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"meta":{},"metaPrev":{},"map":{"335":{"type":"raw-code","lang":"javascript","raw":"coevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"nsMap":{},"nsPrev":{},"id":8953,"ts":1715006771.374,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prev":{"335":{"type":"raw-code","lang":"javascript","raw":"coevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"meta":{},"metaPrev":{},"map":{"335":{"type":"raw-code","lang":"javascript","raw":"conevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"nsMap":{},"nsPrev":{},"id":8954,"ts":1715006771.446,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prev":{"335":{"type":"raw-code","lang":"javascript","raw":"conevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"meta":{},"metaPrev":{},"map":{"335":{"type":"raw-code","lang":"javascript","raw":"constevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"nsMap":{},"nsPrev":{},"id":8955,"ts":1715006771.579,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":336,"idx":36},{"type":"ns-top","idx":336},{"type":"rich-text","idx":335,"sel":null}]}],"prev":{"335":{"type":"raw-code","lang":"javascript","raw":"constevalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"meta":{},"metaPrev":{},"map":{"335":{"type":"raw-code","lang":"javascript","raw":"const evalStmts = stmts => {\n  if (stmts.type !== 'array') throw new Error('need array')\n  const env = {...testEnv} // evaluateStmt might mutate the `env` so we need to make a new obj here\n  let res\n  filterBlanks(stmts.values).forEach(stmt => {\n    res = evaluateStmt(parseStmt(stmt), env)\n  });\n  return valueToString(res)\n}\n","loc":335}},"nsMap":{},"nsPrev":{},"id":8956,"ts":1715006771.65,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns-top","idx":598},{"idx":597,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns-top","idx":598},{"idx":597,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":false}},"nsPrev":{"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":true}},"id":8957,"ts":1715006773.437,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\ncoexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8958,"ts":1715006777.067,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\ncoexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8959,"ts":1715006777.141,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconsexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8960,"ts":1715006777.183,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconsexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconstexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8961,"ts":1715006777.269,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":600,"idx":598},{"type":"ns-top","idx":600},{"type":"rich-text","idx":599,"sel":null}]}],"prev":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconstexternals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"meta":{},"metaPrev":{},"map":{"599":{"type":"raw-code","lang":"javascript","raw":"// This function collects a list of all \"external references\" in a given toplevel statement.\n// It is used to sort toplevels in the structured editor so that evaluation happens in the\n// correct dependency order, and for detecting circular dependencies (which need to be\n// evaluated as a group).\nconst externals = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return externals_expr(stmt[0], [])\n    case 'sdef': return externals_expr(stmt[1], [stmt[0]])\n    case 'sdeftype': return []\n  }\n  return []\n}","loc":599}},"nsMap":{},"nsPrev":{},"id":8962,"ts":1715006777.317,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prev":{"611":{"type":"raw-code","lang":"javascript","raw":"externals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"meta":{},"metaPrev":{},"map":{"611":{"type":"raw-code","lang":"javascript","raw":"cexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"nsMap":{},"nsPrev":{},"id":8963,"ts":1715006779.184,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prev":{"611":{"type":"raw-code","lang":"javascript","raw":"cexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"meta":{},"metaPrev":{},"map":{"611":{"type":"raw-code","lang":"javascript","raw":"conexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"nsMap":{},"nsPrev":{},"id":8964,"ts":1715006779.284,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prev":{"611":{"type":"raw-code","lang":"javascript","raw":"conexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"meta":{},"metaPrev":{},"map":{"611":{"type":"raw-code","lang":"javascript","raw":"constexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"nsMap":{},"nsPrev":{},"id":8965,"ts":1715006779.417,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":612,"idx":598},{"type":"ns-top","idx":612},{"type":"rich-text","idx":611,"sel":null}]}],"prev":{"611":{"type":"raw-code","lang":"javascript","raw":"constexternals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"meta":{},"metaPrev":{},"map":{"611":{"type":"raw-code","lang":"javascript","raw":"const externals_expr = (expr, locals) => {\n  switch (expr.type) {\n    case 'evar': return locals.includes(expr[0]) ? [] : [{name: expr[0], kind: 'value', loc: expr[1]}]\n    case 'eapp': return externals_expr(expr[0], locals).concat(unwrapList(expr[1]).flatMap(arg => externals_expr(arg, locals)))\n    case 'elambda': return externals_expr(expr[1], locals.concat(unwrapList(expr[0]).flatMap(pat_names)))\n    case 'eprim': return []\n    case 'estr': return unwrapList(expr[1]).flatMap(v => externals_expr(v[0], locals))\n    case 'elet': {\n      const [ext, loc2] = unwrapList(expr[0]).reduce(([ext, locals], {0: pat, 1: init}) => [\n        ext.concat(externals_expr(init, locals)),\n        locals.concat(pat_names(pat)),\n      ], [[], locals]);\n      return ext.concat(externals_expr(expr[1], loc2));\n    }\n    case 'ematch':\n      return externals_expr(expr[0], locals).concat(\n        unwrapList(expr[1]).flatMap(kase => externals_expr(kase[1], locals.concat(pat_names(kase[0])))))\n  }\n  return []\n}","loc":611}},"nsMap":{},"nsPrev":{},"id":8966,"ts":1715006779.507,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\ncnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8967,"ts":1715006781.473,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\ncnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8968,"ts":1715006781.566,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconsnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8969,"ts":1715006781.624,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconsnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconstnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8970,"ts":1715006781.681,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":690,"idx":598},{"type":"ns-top","idx":690},{"type":"rich-text","idx":689,"sel":null}]}],"prev":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconstnames = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"meta":{},"metaPrev":{},"map":{"689":{"type":"raw-code","lang":"javascript","raw":"// `names` is the complement to `externals`; it produces a list of all values *provided* by a given statement.\n// Once we have type checking, we'll also want to report type names produced by a statement (which will have\n// `kind: \"type\"`).\nconst names = stmt => {\n  switch (stmt.type) {\n    case 'sexpr': return []\n    case 'sdef': return [{name: stmt[0], kind: 'value', loc: stmt[2]}]\n    case 'sdeftype': return unwrapList(stmt[1]).map(c => ({name: c[0], kind: 'value', loc: c[2]}))\n  }\n}","loc":689}},"nsMap":{},"nsPrev":{},"id":8971,"ts":1715006781.742,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\npat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\ncopat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8972,"ts":1715006783.867,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\ncopat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconpat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8973,"ts":1715006783.934,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconpat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconstpat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8974,"ts":1715006784.063,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":598,"idx":0},{"type":"ns","child":614,"idx":598},{"type":"ns-top","idx":614},{"type":"rich-text","idx":613,"sel":null}]}],"prev":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconstpat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"meta":{},"metaPrev":{},"map":{"613":{"type":"raw-code","lang":"javascript","raw":"// Produce a list of names that are bound when the pattern matches successfully.\nconst pat_names = pat => {\n  switch (pat.type) {\n    case 'pvar': return [pat[0]]\n    case 'pany': return []\n    case 'pprim': return []\n    case 'pcon':\n      return unwrapList(pat[1]).flatMap(pat_names)\n  }\n  return []\n}\n","loc":613}},"nsMap":{},"nsPrev":{},"id":8975,"ts":1715006784.121,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns-top","idx":1059},{"idx":1058,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns-top","idx":1059},{"idx":1058,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"1059":{"type":"normal","top":1058,"children":[9,571,594,596,739,755,573],"id":1059,"collapsed":false}},"nsPrev":{"1059":{"type":"normal","top":1058,"children":[9,571,594,596,739,755,573],"id":1059,"collapsed":true}},"id":8976,"ts":1715006784.952,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"idx":570,"type":"end"}]}],"prev":{"570":{"type":"raw-code","lang":"javascript","raw":"makePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"meta":{},"metaPrev":{},"map":{"570":{"type":"raw-code","lang":"javascript","raw":"cmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"nsMap":{},"nsPrev":{},"id":8977,"ts":1715006788.103,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prev":{"570":{"type":"raw-code","lang":"javascript","raw":"cmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"meta":{},"metaPrev":{},"map":{"570":{"type":"raw-code","lang":"javascript","raw":"conmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"nsMap":{},"nsPrev":{},"id":8978,"ts":1715006788.204,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prev":{"570":{"type":"raw-code","lang":"javascript","raw":"conmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"meta":{},"metaPrev":{},"map":{"570":{"type":"raw-code","lang":"javascript","raw":"consmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"nsMap":{},"nsPrev":{},"id":8979,"ts":1715006788.228,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prev":{"570":{"type":"raw-code","lang":"javascript","raw":"consmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"meta":{},"metaPrev":{},"map":{"570":{"type":"raw-code","lang":"javascript","raw":"constmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"nsMap":{},"nsPrev":{},"id":8980,"ts":1715006788.308,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":571,"idx":1059},{"type":"ns-top","idx":571},{"type":"rich-text","idx":570,"sel":null}]}],"prev":{"570":{"type":"raw-code","lang":"javascript","raw":"constmakePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"meta":{},"metaPrev":{},"map":{"570":{"type":"raw-code","lang":"javascript","raw":"const makePrelude = obj => Object.entries(obj).reduce((obj, [k, v]) => (obj[k] = typeof v === 'function' ? '' + v : typeof v === 'string' ? v : JSON.stringify(v), obj), {})","loc":570}},"nsMap":{},"nsPrev":{},"id":8981,"ts":1715006788.384,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prev":{"593":{"type":"raw-code","lang":"javascript","raw":"compile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"meta":{},"metaPrev":{},"map":{"593":{"type":"raw-code","lang":"javascript","raw":"cocompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"nsMap":{},"nsPrev":{},"id":8982,"ts":1715006789.8,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prev":{"593":{"type":"raw-code","lang":"javascript","raw":"cocompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"meta":{},"metaPrev":{},"map":{"593":{"type":"raw-code","lang":"javascript","raw":"concompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"nsMap":{},"nsPrev":{},"id":8983,"ts":1715006789.853,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prev":{"593":{"type":"raw-code","lang":"javascript","raw":"concompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"meta":{},"metaPrev":{},"map":{"593":{"type":"raw-code","lang":"javascript","raw":"conscompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"nsMap":{},"nsPrev":{},"id":8984,"ts":1715006789.901,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prev":{"593":{"type":"raw-code","lang":"javascript","raw":"conscompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"meta":{},"metaPrev":{},"map":{"593":{"type":"raw-code","lang":"javascript","raw":"constcompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"nsMap":{},"nsPrev":{},"id":8985,"ts":1715006789.973,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":594,"idx":1059},{"type":"ns-top","idx":594},{"type":"rich-text","idx":593,"sel":null}]}],"prev":{"593":{"type":"raw-code","lang":"javascript","raw":"constcompile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"meta":{},"metaPrev":{},"map":{"593":{"type":"raw-code","lang":"javascript","raw":"const compile = ast => _meta => `$env.evaluate(${JSON.stringify(ast)}, $env)`","loc":593}},"nsMap":{},"nsPrev":{},"id":8986,"ts":1715006790.049,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"ccompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8987,"ts":1715006791.609,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"ccompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8988,"ts":1715006791.956,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"ccompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8989,"ts":1715006792.618,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"ccompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"concompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8990,"ts":1715006792.706,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"concompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"conscompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8991,"ts":1715006792.734,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"conscompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"constcompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8992,"ts":1715006792.837,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":596,"idx":1059},{"type":"ns-top","idx":596},{"type":"rich-text","idx":595,"sel":null}]}],"prev":{"595":{"type":"raw-code","lang":"javascript","raw":"constcompile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"meta":{},"metaPrev":{},"map":{"595":{"type":"raw-code","lang":"javascript","raw":"const compile_stmt = ast => _meta => `${ast.type === 'sdef' ? `const ${sanitize(ast[0])} = ` : ast.type === 'sdeftype' ? `const {${\n  unwrapList(ast[1]).map(c => `\"${c[0]}\": ${sanitize(c[0])}`)\n}} = ` : ''}$env.evaluateStmt(${JSON.stringify(ast)}, $env)`","loc":595}},"nsMap":{},"nsPrev":{},"id":8993,"ts":1715006792.889,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"idx":738,"type":"end"}]}],"prev":{"738":{"type":"raw-code","lang":"javascript","raw":"testCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"meta":{},"metaPrev":{},"map":{"738":{"type":"raw-code","lang":"javascript","raw":"cotestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"nsMap":{},"nsPrev":{},"id":8994,"ts":1715006794.695,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prev":{"738":{"type":"raw-code","lang":"javascript","raw":"cotestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"meta":{},"metaPrev":{},"map":{"738":{"type":"raw-code","lang":"javascript","raw":"contestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"nsMap":{},"nsPrev":{},"id":8995,"ts":1715006794.758,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prev":{"738":{"type":"raw-code","lang":"javascript","raw":"contestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"meta":{},"metaPrev":{},"map":{"738":{"type":"raw-code","lang":"javascript","raw":"consttestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"nsMap":{},"nsPrev":{},"id":8996,"ts":1715006794.89,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":739,"idx":1059},{"type":"ns-top","idx":739},{"type":"rich-text","idx":738,"sel":null}]}],"prev":{"738":{"type":"raw-code","lang":"javascript","raw":"consttestCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"meta":{},"metaPrev":{},"map":{"738":{"type":"raw-code","lang":"javascript","raw":"const testCompileStmt = v => compile_stmt(parseStmt(v))()","loc":738}},"nsMap":{},"nsPrev":{},"id":8997,"ts":1715006794.958,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"idx":754,"type":"start"}]}],"prev":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"meta":{},"metaPrev":{},"map":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\ncsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"nsMap":{},"nsPrev":{},"id":8998,"ts":1715006796.847,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prev":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\ncsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"meta":{},"metaPrev":{},"map":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"nsMap":{},"nsPrev":{},"id":8999,"ts":1715006796.933,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prev":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"meta":{},"metaPrev":{},"map":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconstsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"nsMap":{},"nsPrev":{},"id":9000,"ts":1715006797.051,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1059,"idx":0},{"type":"ns","child":755,"idx":1059},{"type":"ns-top","idx":755},{"type":"rich-text","idx":754,"sel":null}]}],"prev":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconstsanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"meta":{},"metaPrev":{},"map":{"754":{"type":"raw-code","lang":"javascript","raw":"// Convert an identifier into a valid js identifier, replacing special characters, and accounting for keywords.\nconst sanitize =  (raw) => {\n    for (let [key, val] of Object.entries(sanMap)) {\n        raw = raw.replaceAll(key, val);\n    }\n    if (kwds.includes(raw)) return '$' + raw\n    return raw\n}\n","loc":754}},"nsMap":{},"nsPrev":{},"id":9001,"ts":1715006797.127,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":110,"idx":26},{"type":"ns-top","idx":110},{"idx":109,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":110,"idx":26},{"type":"ns-top","idx":110},{"idx":109,"type":"end"}]}],"prev":{"109":{"type":"raw-code","lang":"javascript","raw":"unwrapList(list([1,2,3]))","loc":109}},"meta":{},"metaPrev":{},"map":{"109":{"type":"blank","loc":109}},"nsMap":{"110":{"type":"normal","top":109,"children":[],"id":110}},"nsPrev":{"110":{"type":"normal","top":109,"children":[],"id":110}},"id":9002,"ts":1715006820.849,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":26,"idx":214},{"type":"ns","child":110,"idx":26},{"type":"ns-top","idx":110},{"idx":109,"type":"start"}]}],"prev":{"109":{"type":"blank","loc":109}},"meta":{},"metaPrev":{},"map":{"109":null},"nsMap":{"26":{"type":"normal","top":25,"children":[1678,1700],"id":26,"collapsed":false},"110":null},"nsPrev":{"26":{"type":"normal","top":25,"children":[110,1678,1700],"id":26,"collapsed":false},"110":{"type":"normal","top":109,"children":[],"id":110}},"id":9003,"ts":1715006821.236,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"idx":70,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"idx":70,"type":"end"}]}],"prev":{"70":{"type":"raw-code","lang":"javascript","raw":"const foldr = (init, items, f) => items.length === 0 ? init : f(foldr(init, items.slice(1), f), items[0])","loc":70}},"meta":{},"metaPrev":{},"map":{"70":{"type":"blank","loc":70}},"nsMap":{"71":{"type":"normal","top":70,"children":[],"id":71}},"nsPrev":{"71":{"type":"normal","top":70,"children":[],"id":71}},"id":9004,"ts":1715006859.364,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":58,"idx":214},{"type":"ns-top","idx":58},{"idx":57,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":71,"idx":214},{"type":"ns-top","idx":71},{"idx":70,"type":"start"}]}],"prev":{"70":{"type":"blank","loc":70}},"meta":{},"metaPrev":{},"map":{"70":null},"nsMap":{"71":null,"214":{"type":"normal","top":213,"children":[26,58,150,112,1023],"id":214,"collapsed":false}},"nsPrev":{"71":{"type":"normal","top":70,"children":[],"id":71},"214":{"type":"normal","top":213,"children":[26,58,71,150,112,1023],"id":214,"collapsed":false}},"id":9005,"ts":1715006859.713,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    \n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9006,"ts":1715006891.546,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    \n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    ca\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9007,"ts":1715006891.84,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    ca\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    cas\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9008,"ts":1715006891.9,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    cas\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case \n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9009,"ts":1715006892.119,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case \n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'b\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9010,"ts":1715006892.275,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'b\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'bla\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9011,"ts":1715006892.488,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'bla\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9012,"ts":1715006892.719,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank'\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9013,"ts":1715006893.041,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank'\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9014,"ts":1715006893.478,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\n\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9015,"ts":1715006899.001,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\n\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nc\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9016,"ts":1715006899.213,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nc\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncon\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9017,"ts":1715006899.303,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncon\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncons\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9018,"ts":1715006899.357,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\ncons\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9019,"ts":1715006899.413,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9020,"ts":1715006899.473,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst i\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9021,"ts":1715006899.505,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst i\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst is\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9022,"ts":1715006899.652,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst is\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isB\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9023,"ts":1715006899.855,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isB\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBl\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9024,"ts":1715006899.961,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBl\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlan\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9025,"ts":1715006900.087,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlan\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9026,"ts":1715006900.137,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank\nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9027,"ts":1715006900.185,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9028,"ts":1715006900.363,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"idx":1022,"type":"end"}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter()","loc":1022}},"nsMap":{},"nsPrev":{},"id":9029,"ts":1715006904.539,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter()","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(i)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9030,"ts":1715006904.788,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(i)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(is)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9031,"ts":1715006905.008,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(is)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isB)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9032,"ts":1715006905.313,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isB)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBla)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9033,"ts":1715006905.431,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBla)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBlan)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9034,"ts":1715006905.522,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBlan)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9035,"ts":1715006905.606,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = \nconst filterBlanks = values => values.filter(isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9036,"ts":1715006906.307,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}],"end":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"idx":1022,"type":"end"}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(noisBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9037,"ts":1715006909.511,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(noisBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(nodisBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9038,"ts":1715006909.567,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(nodisBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(nodeisBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9039,"ts":1715006909.647,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(nodeisBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9040,"ts":1715006909.695,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node =isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9041,"ts":1715006909.757,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node =isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9042,"ts":1715006910.055,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9043,"ts":1715006910.985,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank()","loc":1022}},"nsMap":{},"nsPrev":{},"id":9044,"ts":1715006912.344,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank()","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(nod)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9045,"ts":1715006912.584,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(nod)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node)","loc":1022}},"nsMap":{},"nsPrev":{},"id":9046,"ts":1715006912.625,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node)","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9047,"ts":1715006912.919,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":214,"idx":0},{"type":"ns","child":1023,"idx":214},{"type":"ns-top","idx":1023},{"type":"rich-text","idx":1022,"sel":null}]}],"prev":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => !['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node))","loc":1022}},"meta":{},"metaPrev":{},"map":{"1022":{"type":"raw-code","lang":"javascript","raw":"// These are the CST nodes that we want to ignore while parsing.\nconst isBlank = n => ['blank', 'comment', 'rich-text', 'comment-node'].includes(n.type)\nconst filterBlanks = values => values.filter(node => !isBlank(node))","loc":1022}},"nsMap":{},"nsPrev":{},"id":9048,"ts":1715006914.971,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9049,"ts":1715006921.662,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  i\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9050,"ts":1715006921.81,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  i\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9051,"ts":1715006921.902,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9052,"ts":1715006921.978,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (i\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9053,"ts":1715006922.234,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (i\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (is\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9054,"ts":1715006922.328,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (is\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isB\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9055,"ts":1715006922.602,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isB\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBla\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9056,"ts":1715006922.708,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBla\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9057,"ts":1715006922.885,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9058,"ts":1715006923.161,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(no\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9059,"ts":1715006923.584,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(no\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9060,"ts":1715006923.652,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9061,"ts":1715006923.872,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node))\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9062,"ts":1715006924.022,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node))\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9063,"ts":1715006924.072,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) \n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) re\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9064,"ts":1715006924.264,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) re\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) ret\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9065,"ts":1715006924.44,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) ret\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) retur\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9066,"ts":1715006924.512,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) retur\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9067,"ts":1715006924.589,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":216,"idx":212},{"type":"ns","child":802,"idx":216},{"type":"ns-top","idx":802},{"type":"rich-text","idx":803,"sel":null}]}],"prev":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"meta":{},"metaPrev":{},"map":{"803":{"type":"raw-code","lang":"javascript","raw":"// Here's our utility function for converting the structure editor's CST nodes into values that conform to our\n// in-memory data encoding; where data type attributes have numeric indices instead of text labels, and arrays\n// are converted to linked lists.\n// We also prefix the constructor names with `cst/` to prevent name conflicts with other types.\nconst fromNode = node => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    case 'identifier':\n      return {type: 'cst/identifier', 0: node.text, 1: node.loc}\n    case 'spread':\n      const inner = fromNode(node.contents)\n      return inner\n      ? {type: 'cst/spread', 0: inner, 1: node.loc}\n      : {type: 'cst/empty-spread', 0: node.loc}\n    case 'array':\n    case 'record':\n    case 'list':\n      return {type: 'cst/' + node.type, 0: list(node.values.map(fromNode).filter(Boolean)), 1: node.loc}\n    case 'string':\n      return {type: 'cst/string', 0: node.first.text, 1: list(\n        node.templates.map(item => ({\n          type: ',,',\n          0: fromNode(item.expr) ?? {type: 'cst/string', 0: '', 1: nil},\n          1: item.suffix.text,\n          2: item.suffix.loc,\n        }))\n      ), 2: node.loc}\n  }\n}","loc":803}},"nsMap":{},"nsPrev":{},"id":9068,"ts":1715006927.247,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9069,"ts":1715006933.506,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  i\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9070,"ts":1715006933.73,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  i\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9071,"ts":1715006933.822,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9072,"ts":1715006933.909,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (is\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9073,"ts":1715006934.145,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (is\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isB\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9074,"ts":1715006934.48,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isB\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBla\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9075,"ts":1715006934.59,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBla\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9076,"ts":1715006934.751,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9077,"ts":1715006935.262,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(no\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9078,"ts":1715006935.461,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(no\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(nod\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9079,"ts":1715006935.513,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(nod\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9080,"ts":1715006935.589,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9081,"ts":1715006935.741,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9082,"ts":1715006935.902,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) \n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) re\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9083,"ts":1715006936.107,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) re\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) ret\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9084,"ts":1715006936.284,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) ret\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) retur\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9085,"ts":1715006936.384,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) retur\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9086,"ts":1715006936.512,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":212,"idx":0},{"type":"ns","child":220,"idx":212},{"type":"ns","child":222,"idx":220},{"type":"ns-top","idx":222},{"type":"rich-text","idx":221,"sel":null}]}],"prev":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    // Ignore blanks and comments\n    case 'blank':\n    case 'comment':\n    case 'comment-node':\n    case 'rich-text':\n      return;\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"meta":{},"metaPrev":{},"map":{"221":{"type":"raw-code","lang":"javascript","raw":"const parseStmt = (node) => {\n  if (isBlank(node)) return\n  switch (node.type) {\n    // Check for toplevel forms\n    case 'list':\n      const values = filterBlanks(node.values)\n      if (values.length && values[0].type === 'identifier') {\n        const f = stmtForms[values[0].text];\n        if (f) {\n          const res = f(node.loc, ...values.slice(1))\n          if (res) return res\n        }\n      }\n  }\n  // Otherwise, it's a toplevel expression\n  const inner = parse(node)\n  return inner ? {type: 'sexpr', 0: inner, 1: node.loc} : inner\n}","loc":221}},"nsMap":{},"nsPrev":{},"id":9087,"ts":1715006938.812,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9088,"ts":1715007014.532,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    /\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9089,"ts":1715007015.058,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    /\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    //\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9090,"ts":1715007015.22,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    //\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9091,"ts":1715007015.36,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // N\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9092,"ts":1715007015.553,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // N\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Not\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9093,"ts":1715007015.828,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Not\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9094,"ts":1715007015.873,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9095,"ts":1715007015.944,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9096,"ts":1715007016,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note tha\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9097,"ts":1715007016.178,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note tha\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9098,"ts":1715007016.269,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9099,"ts":1715007016.32,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9100,"ts":1715007016.426,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9101,"ts":1715007016.606,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9102,"ts":1715007016.706,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this m\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9103,"ts":1715007016.853,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this m\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this me\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9104,"ts":1715007016.962,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this me\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this men\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9105,"ts":1715007017.051,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this men\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this ment\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9106,"ts":1715007017.168,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this ment\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this menth\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9107,"ts":1715007017.396,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this menth\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this ment\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9108,"ts":1715007017.621,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this ment\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this men\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9109,"ts":1715007017.857,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this men\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this me\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9110,"ts":1715007018.238,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this me\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this met\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9111,"ts":1715007018.368,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this met\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this metho\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9112,"ts":1715007018.493,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this metho\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9113,"ts":1715007018.69,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method d\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9114,"ts":1715007019.021,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method d\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doe\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9115,"ts":1715007019.098,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doe\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method does\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9116,"ts":1715007019.21,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method does\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9117,"ts":1715007019.273,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn'\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9118,"ts":1715007019.314,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn'\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9119,"ts":1715007019.376,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9120,"ts":1715007019.51,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't al\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9121,"ts":1715007019.638,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't al\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't all\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9122,"ts":1715007019.802,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't all\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allo\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9123,"ts":1715007019.962,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allo\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9124,"ts":1715007020.188,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow fo\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9125,"ts":1715007020.419,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow fo\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9126,"ts":1715007020.618,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9127,"ts":1715007020.736,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for se\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9128,"ts":1715007023.57,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for se\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for sel\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9129,"ts":1715007023.622,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for sel\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9130,"ts":1715007023.773,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9131,"ts":1715007023.86,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9132,"ts":1715007024.693,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-rec\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9133,"ts":1715007024.89,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-rec\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recur\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9134,"ts":1715007024.988,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recur\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursi\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9135,"ts":1715007025.197,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursi\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9136,"ts":1715007025.297,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9137,"ts":1715007025.451,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9138,"ts":1715007025.568,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9139,"ts":1715007025.621,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9140,"ts":1715007025.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9141,"ts":1715007026.108,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9142,"ts":1715007026.203,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let b\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9143,"ts":1715007026.525,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let b\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidn\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9144,"ts":1715007026.656,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidn\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidnin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9145,"ts":1715007026.859,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidnin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidning\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9146,"ts":1715007027.021,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidning\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidnings\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9147,"ts":1715007027.11,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bidnings\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bid\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9148,"ts":1715007027.652,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bid\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bi\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9149,"ts":1715007027.846,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bi\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9150,"ts":1715007028.171,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bind\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9151,"ts":1715007028.293,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bind\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9152,"ts":1715007028.418,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindin\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let binding\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9153,"ts":1715007028.472,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let binding\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9154,"ts":1715007028.618,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9155,"ts":1715007032.139,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9156,"ts":1715007032.358,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :( \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9157,"ts":1715007032.401,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :( \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9158,"ts":1715007044.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9159,"ts":1715007045.293,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9160,"ts":1715007045.447,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. W\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9161,"ts":1715007045.596,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. W\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9162,"ts":1715007045.902,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9163,"ts":1715007046.037,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9164,"ts":1715007046.276,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9165,"ts":1715007046.669,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9166,"ts":1715007046.798,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9167,"ts":1715007046.935,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll rel\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9168,"ts":1715007047.007,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll rel\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll rela\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9169,"ts":1715007047.229,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll rela\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9170,"ts":1715007047.712,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9171,"ts":1715007047.913,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax t\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax th\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9172,"ts":1715007048.051,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax th\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9173,"ts":1715007048.173,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9174,"ts":1715007048.194,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9175,"ts":1715007048.521,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that re\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that res\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9176,"ts":1715007048.589,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that res\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restr\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9177,"ts":1715007048.838,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restr\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restri\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9178,"ts":1715007048.985,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restri\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restric\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9179,"ts":1715007049.062,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restric\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restrict\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9180,"ts":1715007049.223,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restrict\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restrictio\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9181,"ts":1715007049.324,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restrictio\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9182,"ts":1715007049.444,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9183,"ts":1715007049.618,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction la\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9184,"ts":1715007049.736,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction la\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction lat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9185,"ts":1715007049.872,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction lat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction later\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9186,"ts":1715007050.037,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction later\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction later.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9187,"ts":1715007050.289,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction later.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9188,"ts":1715007052.891,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9189,"ts":1715007052.931,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9190,"ts":1715007053.118,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9191,"ts":1715007053.227,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9192,"ts":1715007053.581,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a l\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a la\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9193,"ts":1715007053.677,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a la\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a lat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9194,"ts":1715007053.802,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a lat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9195,"ts":1715007054.001,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9196,"ts":1715007054.06,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later \n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later e\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9197,"ts":1715007054.301,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later e\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later ev\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9198,"ts":1715007054.447,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later ev\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later eval\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9199,"ts":1715007054.646,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later eval\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evalu\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9200,"ts":1715007054.725,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evalu\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9201,"ts":1715007054.828,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluat\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluato\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9202,"ts":1715007055.008,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluato\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluator\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9203,"ts":1715007055.105,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluator\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluator.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9204,"ts":1715007055.202,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings :(. We'll relax that restriction in a later evaluator.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in a later evaluator.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9205,"ts":1715007057.926,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in a later evaluator.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in t.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9206,"ts":1715007061.053,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in t.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in th.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9207,"ts":1715007061.121,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in th.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9208,"ts":1715007061.252,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9209,"ts":1715007061.357,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the l.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9210,"ts":1715007061.485,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the l.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the les.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9211,"ts":1715007061.597,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the les.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the le.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9212,"ts":1715007061.807,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the le.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the l.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9213,"ts":1715007061.938,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the l.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9214,"ts":1715007062.088,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the se.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9215,"ts":1715007062.197,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the se.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the sel.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9216,"ts":1715007062.245,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the sel.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9217,"ts":1715007062.304,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9218,"ts":1715007062.494,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-ho.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9219,"ts":1715007062.92,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-ho.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-host.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9220,"ts":1715007063.324,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-host.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoster.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9221,"ts":1715007063.55,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoster.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosterd.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9222,"ts":1715007063.752,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosterd.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoster.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9223,"ts":1715007064.008,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoster.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoste.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9224,"ts":1715007064.222,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hoste.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9225,"ts":1715007064.454,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9226,"ts":1715007065.306,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted .\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted co.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9227,"ts":1715007065.458,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted co.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted com.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9228,"ts":1715007065.522,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted com.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted comp.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9229,"ts":1715007065.543,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted comp.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted compil.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9230,"ts":1715007065.74,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"prev":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted compil.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"meta":{},"metaPrev":{},"map":{"21":{"type":"raw-code","lang":"javascript","raw":"const evaluate = (node, scope) => {\n  if (!scope) throw new Error(`evaluate called without scope`)\n  switch (node.type) {\n    // For primitives, we trivially produce the contained value\n    case 'eprim':\n      return node[0][0]\n    // For strings, we need to handle escapes correctly (e.g. the AST node will have \"a\\\\n\", which needs to become \"a\\n\" at runtime) and evaluate\n    // any contained template expressions\n    case 'estr':\n      return unescapeSlashes(node[0]) + unwrapList(node[1]).map(({0: exp, 1: suf}) => evaluate(exp, scope) + unescapeSlashes(suf)).join('')\n    // For variables, we look up the name in the `scope` map that we pass everywhere.\n    // We use `sanitize` for compatability with the structured editor environment, which expects variable names to be valid javascript names.\n    case 'evar':\n      var name = sanitize(node[0])\n      if (!Object.hasOwn(scope, name)) {\n        throw new Error(`Unknown vbl: ${name}. ${Object.keys(scope).join(', ')}`)\n      }\n      return scope[name]\n    // For lambdas, we're producing an arrow function that accepts the right number of (curried) arguments, matches each provided value with the\n    // corresponding pattern, and then evaluates the body with the `scope` map having all of the resulting bindings.\n    // Note that auto-currying means that `(fn [a b] c)` becomes `a => b => c` instead of `(a, b) => c`.\n    case 'elambda':\n      return unwrapList(node[0]).reduceRight((body, arg) => scope => v => body({...scope, ...evalPat(arg, v)}), scope => evaluate(node[1], scope))(scope)\n    // Application is also curried, so we need to loop through the arguments list so that `(eapp t [a b])` becomes `t(a)(b)`.\n    case 'eapp':\n      return unwrapList(node[1]).reduce((f, arg) => f(evaluate(arg, scope)), evaluate(node[0], scope))\n    // For `let`, we go through each binding, evaluate the provided `init` against the pattern, and add any bindings to the scope.\n    // We're doing the evaluations in *series* instead of *parallel* to allow later bindings to refer to previous ones.\n    // so you can do `(let [a 2 b (+ a 4)] b)` and have it evaluate correctly.\n    // Note that this method doesn't allow for self-recursion in let bindings. We'll relax that restriction in the self-hosted compiler.\n    case 'elet':\n      const inner = unwrapList(node[0]).reduce((scope, {0: pat, 1: init}) => {\n        const value = evaluate(init, scope)\n        const match = evalPat(pat, value)\n        if (match == null) throw new Error(`let pattern didnt't match! ${JSON.stringify(value)} vs ${valueToString(pat)}`)\n        return {...scope, ...match}\n      }, scope)\n      return evaluate(node[1], inner)\n    // Match walks through each case, checks to see if the patterns matches the value, and if it does, evaluates the body with any bindings from that\n    // pattern added onto the scope.\n    // If no cases match, we throw an error.\n    case 'ematch':\n      const target = evaluate(node[0], scope)\n      for (let {0: pat, 1: body} of unwrapList(node[1])) {\n        const got = evalPat(pat, target)\n        if (got) {\n          return evaluate(body, {...scope, ...got})\n        }\n      }\n      throw new Error(`match failed (${node[2]}): ${JSON.stringify(target)}`)\n    // `equot` trivially produces the contained data structure; whether it's CST or AST.\n    case 'equot':\n      return node[0][0]\n  }\n  throw new Error(`cant evaluatoe ${node.type}`)\n}","loc":21}},"nsMap":{},"nsPrev":{},"id":9231,"ts":1715007065.821,"libraryRoot":""}],"clipboard":[],"hover":[],"regs":{},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":36,"idx":0},{"type":"ns","child":22,"idx":36},{"type":"ns-top","idx":22},{"type":"rich-text","idx":21,"sel":null}]}],"cards":[{"path":[],"top":0}],"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,214,212,36,598,1059,575],"type":"normal"},"1":{"id":1,"top":0,"children":[],"type":"normal"},"3":{"type":"normal","top":2,"children":[],"id":3},"9":{"type":"normal","top":8,"children":[],"id":9,"plugin":{"id":"evaluator","options":"bootstrap.js"},"collapsed":false},"22":{"type":"normal","top":21,"children":[370],"id":22},"24":{"type":"normal","top":23,"children":[],"id":24},"26":{"type":"normal","top":25,"children":[1678,1700],"id":26,"collapsed":false},"34":{"type":"normal","top":33,"children":[],"id":34},"36":{"type":"normal","top":35,"children":[1675,22,287,1645,873,421,423,336],"id":36,"collapsed":false},"43":{"type":"normal","top":42,"children":[],"id":43},"58":{"type":"normal","top":57,"children":[],"id":58},"69":{"type":"normal","top":68,"children":[],"id":69},"77":{"type":"normal","top":76,"children":[],"id":77},"79":{"type":"normal","top":78,"children":[],"id":79,"plugin":{"id":"fixture","options":null}},"112":{"type":"normal","top":111,"children":[],"id":112},"150":{"type":"normal","top":149,"children":[1424],"id":150},"189":{"type":"normal","top":188,"children":[],"id":189},"212":{"type":"normal","top":211,"children":[216,1294,1296,218,220],"id":212,"collapsed":false},"214":{"type":"normal","top":213,"children":[26,58,150,112,1023],"id":214,"collapsed":false},"216":{"type":"normal","top":215,"children":[1535,1437,1548,34,69,24,802,79],"id":216,"collapsed":false},"218":{"type":"normal","top":217,"id":218,"children":[189,77,776],"collapsed":false},"220":{"type":"normal","top":219,"children":[222,226,230],"id":220,"collapsed":false},"222":{"type":"normal","top":221,"children":[],"id":222},"226":{"type":"normal","top":225,"children":[],"id":226},"230":{"type":"normal","top":229,"children":[],"id":230,"plugin":{"id":"fixture","options":null}},"287":{"type":"normal","top":286,"children":[1578],"id":287},"336":{"type":"normal","top":335,"children":[456],"id":336},"370":{"type":"normal","top":369,"children":[],"id":370,"plugin":{"id":"fixture","options":null}},"421":{"type":"normal","top":420,"id":421,"children":[]},"423":{"type":"normal","top":422,"children":[],"id":423},"456":{"type":"normal","top":455,"children":[],"id":456,"plugin":{"id":"fixture","options":null}},"571":{"type":"normal","top":570,"children":[],"id":571},"573":{"type":"normal","top":572,"children":[],"id":573},"575":{"type":"normal","top":576,"children":[],"id":575},"594":{"type":"normal","top":593,"children":[],"id":594},"596":{"type":"normal","top":595,"children":[],"id":596},"598":{"type":"normal","top":597,"id":598,"children":[600,612,690,614],"collapsed":false},"600":{"type":"normal","top":599,"children":[602],"id":600},"602":{"type":"normal","top":601,"children":[],"id":602,"plugin":{"id":"fixture","options":null}},"612":{"type":"normal","top":611,"children":[],"id":612},"614":{"type":"normal","top":613,"children":[],"id":614},"690":{"type":"normal","top":689,"children":[694],"id":690},"694":{"type":"normal","top":693,"children":[],"id":694,"plugin":{"id":"fixture","options":null}},"739":{"type":"normal","top":738,"children":[741],"id":739},"741":{"type":"normal","top":740,"children":[],"id":741},"755":{"type":"normal","top":754,"children":[1401,809,811,807],"id":755,"collapsed":false},"776":{"type":"normal","top":775,"children":[],"id":776,"plugin":{"id":"fixture","options":null}},"802":{"type":"normal","id":802,"top":803,"children":[]},"807":{"type":"normal","top":806,"children":[],"id":807},"809":{"type":"normal","top":808,"children":[],"id":809},"811":{"type":"normal","top":810,"children":[],"id":811},"873":{"type":"normal","top":872,"children":[1365],"id":873},"878":{"type":"normal","id":878,"top":879,"children":[],"display":{"id":"none","options":null}},"892":{"type":"normal","id":892,"top":893,"children":[],"display":{"id":"none","options":null},"collapsed":false},"924":{"type":"normal","id":924,"top":925,"children":[],"display":{"id":"none","options":null}},"934":{"type":"normal","id":934,"top":935,"children":[],"display":{"id":"none","options":null}},"955":{"type":"normal","id":955,"top":956,"children":[],"display":{"id":"none","options":null}},"969":{"type":"normal","id":969,"top":970,"children":[],"display":{"id":"none","options":null}},"998":{"type":"normal","top":997,"children":[],"id":998},"1023":{"type":"normal","top":1022,"children":[],"id":1023},"1059":{"type":"normal","top":1058,"children":[9,571,594,596,739,755,573],"id":1059,"collapsed":false},"1067":{"type":"normal","top":1066,"children":[],"id":1067,"plugin":{"id":"fixture","options":null}},"1078":{"type":"normal","top":1077,"children":[],"id":1078},"1106":{"type":"normal","top":1105,"children":[],"id":1106,"plugin":{"id":"fixture","options":null}},"1294":{"type":"normal","top":1293,"id":1294,"children":[43,1078,1067],"collapsed":false},"1296":{"type":"normal","top":1295,"children":[998,1106],"id":1296,"collapsed":false},"1365":{"type":"normal","top":1364,"children":[],"id":1365,"plugin":{"id":"fixture","options":null}},"1401":{"type":"normal","top":1400,"id":1401,"children":[],"plugin":{"id":"fixture","options":null}},"1424":{"type":"normal","top":1423,"children":[],"id":1424,"plugin":{"id":"fixture","options":null}},"1437":{"type":"normal","top":1436,"children":[],"id":1437},"1535":{"type":"normal","top":1534,"id":1535,"children":[]},"1548":{"type":"normal","top":1547,"children":[],"id":1548},"1578":{"type":"normal","top":1577,"children":[],"id":1578,"plugin":{"id":"fixture","options":null}},"1645":{"type":"normal","top":1644,"children":[],"id":1645},"1675":{"type":"normal","top":1674,"id":1675,"children":[]},"1678":{"type":"normal","top":1677,"children":[],"id":1678,"plugin":{"id":"fixture","options":null}},"1700":{"type":"normal","top":1701,"children":[],"id":1700,"plugin":{"id":"fixture","options":null}}},"highlight":[],"evaluator":":js:"}