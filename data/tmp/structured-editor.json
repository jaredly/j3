{"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0},"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. The \"structured\" part refers to the fact that the editor's \"source of truth\" representation of your source code is not a long sequence of utf-8 characters, but rather \"structured data\". For many structured editors, the structure of the data is the Abstract Syntax Tree (AST) of the given programming language. Typical programming languages have node types for expressions (variables, numbers, strings, function application, lambdas, array & object literals, infix boolean and prefix unary operators), statements (control structures such as ","styles":{}},{"type":"text","text":"if","styles":{"code":true}},{"type":"text","text":", ","styles":{}},{"type":"text","text":"for","styles":{"code":true}},{"type":"text","text":", and ","styles":{}},{"type":"text","text":"while","styles":{"code":true}},{"type":"text","text":", function and class declaration), and, types (type variables, type application).","styles":{}}],"children":[]},{"id":"4db72981-1cc1-4f35-8e3c-fb37cccbf403","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This has the downside of being quite complicated; both on the implementation side (ensuring that rendering, formatting, and editing each node type works as intended is a huge job) but more importantly there's a lot of mental overhead for the user, because key strokes might do different things depending on what kind of Node your cursor is in, so there's a ton to keep track of.","styles":{}}],"children":[]},{"id":"8e3f048c-0af6-4d0f-a7ed-0ffd4bf406a3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"In an attempt to avoid these downsides, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of text characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some notable features of this structured editor:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\". Deleting a close-paren deletes the whole group.","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\". Adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. error underlines & hover information are trivially preserved.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is currently inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced in the CST. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with: the \"Concrete Syntax Tree\". The \"evaluator\" for this page is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]},{"id":"e8c14d10-4142-4e52-9720-460043746437","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Here's the TypeScript type of a CST node (abbreviated to include only the variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":2},"4":{"type":"list","values":[6,7,9,18],"loc":4},"6":{"type":"identifier","text":"hello","loc":6},"7":{"type":"string","first":8,"templates":[{"expr":16,"suffix":17}],"loc":7},"8":{"type":"stringText","loc":8,"text":"world "},"9":{"type":"identifier","text":"12","loc":9},"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >>=\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14},"16":{"type":"identifier","text":"abc","loc":16},"17":{"type":"stringText","text":"!","loc":17},"18":{"type":"array","values":[],"loc":18},"19":{"type":"rich-text","contents":[{"id":"e36ae16e-cd08-42be-821b-f5068cee7a9d","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"And here's some code. Feel free to play around with it; everything on this page is editable.","styles":{}}],"children":[]}],"loc":19},"-1":{"type":"list","values":[0],"loc":-1}},"root":-1,"meta":{},"history":[{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"subtext","at":0}]}],"prev":{"0":{"type":"blank","loc":0}},"meta":{},"metaPrev":{},"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"nsMap":{},"nsPrev":{},"id":0,"ts":1714767441.533,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prev":{"2":null},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[],"children":[]}],"loc":2}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3],"type":"normal"},"3":{"type":"normal","top":2,"children":[],"id":3}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1],"type":"normal"},"3":null},"id":1,"ts":1714767451.671,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prev":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"meta":{},"metaPrev":{},"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"nsMap":{},"nsPrev":{},"id":2,"ts":1714769903.102,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"1":{"id":1,"top":0,"children":[],"type":"normal","display":{"id":"none","options":null}}},"nsPrev":{"1":{"id":1,"top":0,"children":[],"type":"normal"}},"id":3,"ts":1714769906.052,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null}}},"nsPrev":{"3":{"type":"normal","top":2,"children":[],"id":3}},"id":4,"ts":1714769908.432,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\":","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":5,"ts":1714769959.233,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"end"}]}],"prev":{"4":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"blank","loc":4}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5],"type":"normal"},"5":{"type":"normal","top":4,"children":[],"id":5}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3],"type":"normal"},"5":null},"id":6,"ts":1714769997.24,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\":","styles":{}}],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\". The \"evaluator\" for this section is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":7,"ts":1714770003.481,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"subtext","at":0}]}],"prev":{"4":{"type":"blank","loc":4}},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[],"loc":4}},"nsMap":{},"nsPrev":{},"id":8,"ts":1714770034.588,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"inside"}]}],"prev":{"4":{"type":"list","values":[],"loc":4},"6":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6],"loc":4},"6":{"type":"identifier","text":"h","loc":6}},"nsMap":{},"nsPrev":{},"id":9,"ts":1714770034.916,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":5}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":1}]}],"prev":{"6":{"type":"identifier","text":"h","loc":6}},"meta":{},"metaPrev":{},"map":{"6":{"type":"identifier","text":"hello","loc":6}},"nsMap":{},"nsPrev":{},"id":10,"ts":1714770035.056,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":5}]}],"prev":{"4":{"type":"list","values":[6],"loc":4},"7":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"blank","loc":7}},"nsMap":{},"nsPrev":{},"id":11,"ts":1714770035.617,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prev":{"7":{"type":"blank","loc":7}},"meta":{},"metaPrev":{},"map":{"7":{"type":"array","values":[],"loc":7}},"nsMap":{},"nsPrev":{},"id":12,"ts":1714770035.751,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"inside"}]}],"prev":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"array","values":[],"loc":7}},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"blank","loc":7}},"nsMap":{},"nsPrev":{},"id":13,"ts":1714770036.451,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prev":{"7":{"type":"blank","loc":7},"8":null},"meta":{},"metaPrev":{},"map":{"7":{"type":"string","first":8,"templates":[],"loc":7},"8":{"type":"stringText","loc":8,"text":""}},"nsMap":{},"nsPrev":{},"id":14,"ts":1714770036.645,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":0}]}],"prev":{"8":{"type":"stringText","loc":8,"text":""}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"w"}},"nsMap":{},"nsPrev":{},"id":15,"ts":1714770036.831,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":1}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"w"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"wo"}},"nsMap":{},"nsPrev":{},"id":16,"ts":1714770036.93,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":3}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":2}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"wo"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"wor"}},"nsMap":{},"nsPrev":{},"id":17,"ts":1714770036.999,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":4}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":3}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"wor"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"worl"}},"nsMap":{},"nsPrev":{},"id":18,"ts":1714770037.128,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":5}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":4}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"worl"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"world"}},"nsMap":{},"nsPrev":{},"id":19,"ts":1714770037.219,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null}}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5}},"id":20,"ts":1714770214.702,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null}}},"id":21,"ts":1714770549.449,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":22,"ts":1714770551.94,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":23,"ts":1714770553.848,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"end"}]}],"prev":{"4":{"type":"list","values":[6,7],"loc":4},"9":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7,9],"loc":4},"9":{"type":"blank","loc":9}},"nsMap":{},"nsPrev":{},"id":24,"ts":1714770584.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"start"}]}],"prev":{"9":{"type":"blank","loc":9}},"meta":{},"metaPrev":{},"map":{"9":{"type":"identifier","text":"12","loc":9}},"nsMap":{},"nsPrev":{},"id":25,"ts":1714770585.57,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":10,"type":"annot-annot"},{"idx":11,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prev":{"4":{"type":"list","values":[6,7,9],"loc":4},"10":null,"11":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7,10],"loc":4},"10":{"type":"annot","target":9,"annot":11,"loc":10},"11":{"type":"blank","loc":11}},"nsMap":{},"nsPrev":{},"id":26,"ts":1714770622.854,"libraryRoot":""},{"id":27,"meta":{},"metaPrev":{},"revert":26,"prev":{"4":{"type":"list","values":[6,7,10],"loc":4},"10":{"type":"annot","target":9,"annot":11,"loc":10},"11":{"type":"blank","loc":11}},"map":{"4":{"type":"list","values":[6,7,9],"loc":4},"10":null,"11":null},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":10,"type":"annot-annot"},{"idx":11,"type":"start"}]}],"nsMap":{},"nsPrev":{},"ts":1714770624.716,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"rich-text","sel":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{"12":null},"meta":{},"metaPrev":{},"map":{"12":{"type":"rich-text","contents":null,"loc":12}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5,13],"type":"normal"},"13":{"type":"normal","top":12,"children":[],"id":13}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,5],"type":"normal"},"13":null},"id":28,"ts":1714770634.649,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"idx":14,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"end"}]}],"prev":{"14":null},"meta":{},"metaPrev":{},"map":{"14":{"type":"blank","loc":14}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5,13,15],"type":"normal"},"15":{"type":"normal","top":14,"children":[],"id":15}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,5,13],"type":"normal"},"15":null},"id":29,"ts":1714770697.019,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"idx":14,"type":"start"}]}],"prev":{"14":{"type":"blank","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":14}},"nsMap":{},"nsPrev":{},"id":30,"ts":1714770698.542,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"// some code","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"","loc":14}},"nsMap":{},"nsPrev":{},"id":31,"ts":1714770699.794,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number}\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n} {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":32,"ts":1714770700.072,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number}\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n} {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number}\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":33,"ts":1714770705.075,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"idx":14,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"idx":14,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"15":{"type":"normal","top":14,"children":[],"id":15,"display":{"id":"none","options":null}}},"nsPrev":{"15":{"type":"normal","top":14,"children":[],"id":15}},"id":34,"ts":1714770710.517,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"13":{"type":"normal","top":12,"children":[],"id":13,"display":{"id":"none","options":null}}},"nsPrev":{"13":{"type":"normal","top":12,"children":[],"id":13}},"id":35,"ts":1714770714.711,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":6}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":5}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"world"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"world "}},"nsMap":{},"nsPrev":{},"id":36,"ts":1714770746.04,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":7}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":6}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"world "}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"world $"}},"nsMap":{},"nsPrev":{},"id":37,"ts":1714770746.197,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"expr","at":1},{"idx":16,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":7}]}],"prev":{"7":{"type":"string","first":8,"templates":[],"loc":7},"8":{"type":"stringText","loc":8,"text":"world $"},"16":null,"17":null},"meta":{},"metaPrev":{},"map":{"7":{"type":"string","first":8,"templates":[{"expr":16,"suffix":17}],"loc":7},"8":{"type":"stringText","loc":8,"text":"world "},"16":{"type":"blank","loc":16},"17":{"type":"stringText","text":"","loc":17}},"nsMap":{},"nsPrev":{},"id":38,"ts":1714770746.286,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"expr","at":1},{"idx":16,"type":"subtext","at":3}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"expr","at":1},{"idx":16,"type":"start"}]}],"prev":{"16":{"type":"blank","loc":16}},"meta":{},"metaPrev":{},"map":{"16":{"type":"identifier","text":"abc","loc":16}},"nsMap":{},"nsPrev":{},"id":39,"ts":1714770748.742,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":1},{"idx":17,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":1},{"idx":17,"type":"start"}]}],"prev":{"17":{"type":"stringText","text":"","loc":17}},"meta":{},"metaPrev":{},"map":{"17":{"type":"stringText","text":"!","loc":17}},"nsMap":{},"nsPrev":{},"id":40,"ts":1714770752.294,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prev":{"4":{"type":"list","values":[6,7,9],"loc":4},"18":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7,9,18],"loc":4},"18":{"type":"blank","loc":18}},"nsMap":{},"nsPrev":{},"id":41,"ts":1714770766.473,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"start"}]}],"prev":{"18":{"type":"blank","loc":18}},"meta":{},"metaPrev":{},"map":{"18":{"type":"array","values":[],"loc":18}},"nsMap":{},"nsPrev":{},"id":42,"ts":1714770766.577,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prev":{"12":{"type":"rich-text","contents":null,"loc":12}},"meta":{},"metaPrev":{},"map":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, here's the TypeScript type of a CST node (this is somewhat abbreviated, but there are the only variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":12}},"nsMap":{},"nsPrev":{},"id":43,"ts":1714770803.218,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null},"collapsed":true}},"nsPrev":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null}}},"id":44,"ts":1714771039.01,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null},"collapsed":false}},"nsPrev":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null},"collapsed":true}},"id":45,"ts":1714771039.568,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":46,"ts":1714771045.993,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":47,"ts":1714771048.027,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":48,"ts":1714771114.658,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":true}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":49,"ts":1714771115.342,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":true}},"id":50,"ts":1714771116.2,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":51,"ts":1714771117.943,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prev":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, here's the TypeScript type of a CST node (this is somewhat abbreviated, but there are the only variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":12}},"meta":{},"metaPrev":{},"map":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, here's the TypeScript type of a CST node (abbreviated to include only the variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":12}},"nsMap":{},"nsPrev":{},"id":52,"ts":1714771294.519,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number}\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":53,"ts":1714771318.522,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} /\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":54,"ts":1714771318.954,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} /\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} //\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":55,"ts":1714771319.114,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} //\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":56,"ts":1714771319.343,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // a\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":57,"ts":1714771320.773,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // a\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // ab\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":58,"ts":1714771320.884,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // ab\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":59,"ts":1714771321.042,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":60,"ts":1714771321.201,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":61,"ts":1714771321.817,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":62,"ts":1714771322.494,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":63,"ts":1714771324.022,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":64,"ts":1714771324.305,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":65,"ts":1714771324.474,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":66,"ts":1714771325.035,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":67,"ts":1714771325.468,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":68,"ts":1714771325.581,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":69,"ts":1714771327.4,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":70,"ts":1714771327.584,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":71,"ts":1714771327.725,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":72,"ts":1714771330.508,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":73,"ts":1714771330.794,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":74,"ts":1714771332.976,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":75,"ts":1714771338.418,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":76,"ts":1714771338.564,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":77,"ts":1714771339.114,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >-\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":78,"ts":1714771339.317,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >-\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":79,"ts":1714771339.708,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":80,"ts":1714771340.403,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":81,"ts":1714771341.142,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=,\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":82,"ts":1714771341.265,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, \n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":83,"ts":1714771341.756,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >>\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":84,"ts":1714771341.897,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"type":"rich-text","idx":14,"sel":null}]}],"prev":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >>\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"meta":{},"metaPrev":{},"map":{"14":{"type":"raw-code","lang":"javascript","raw":"type Node =\n| {type: 'identifier', text: string, loc: number} // abc, 123, a-b%c@, >=, >>=\n| {type: 'list', values: Node[], loc: number}\n| {type: 'array', values: Node[], loc: number}\n| {type: 'string', first: {type: 'stringText', text: string, loc: number},\n    templates: {expr: Node, suffix: {type: 'stringText', text: string, loc: number}},\n    loc: number}","loc":14}},"nsMap":{},"nsPrev":{},"id":85,"ts":1714771342.078,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\". The \"evaluator\" for this section is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. The \"structured\" part refers to the fact that the editor's \"source of truth\" representation of your source code is not a long sequence of utf-8 characters, but rather \"structured data\". For many structured editors, the structure of the data is the Abstract Syntax Tree (AST) of the given programming language. Typical programming languages have node types for expressions (variables, numbers, strings, function application, lambdas, array & object literals, infix boolean and prefix unary operators), statements (control structures such as ","styles":{}},{"type":"text","text":"if","styles":{"code":true}},{"type":"text","text":", ","styles":{}},{"type":"text","text":"for","styles":{"code":true}},{"type":"text","text":", and ","styles":{}},{"type":"text","text":"while","styles":{"code":true}},{"type":"text","text":", function and class declaration), and, types (type variables, type application).","styles":{}}],"children":[]},{"id":"4db72981-1cc1-4f35-8e3c-fb37cccbf403","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This has the downside of being quite complicated; both on the implementation side (ensuring that rendering, formatting, and editing each node type works as intended is a huge job) but more importantly there's a lot of mental overhead for the user, because key strokes might do different things depending on what kind of Node your cursor is in, so there's a ton to keep track of.","styles":{}}],"children":[]},{"id":"8e3f048c-0af6-4d0f-a7ed-0ffd4bf406a3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"In an attempt to avoid these downsides, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of text characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some notable features of this structured editor:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\". Deleting a close-paren deletes the whole group.","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\". Adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. error underlines & hover information are trivially preserved.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is currently inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced in the CST. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with: the \"Concrete Syntax Tree\". The \"evaluator\" for this page is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":86,"ts":1714771411.054,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":5},{"type":"start","idx":4}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,13,15,5],"type":"normal"}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,5,13,15],"type":"normal"}},"id":87,"ts":1714772512.554,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"type":"rich-text","idx":12,"sel":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f"}]}],"prev":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, here's the TypeScript type of a CST node (abbreviated to include only the variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":12}},"meta":{},"metaPrev":{},"map":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, ","styles":{}}],"children":[]}],"loc":12}},"nsMap":{},"nsPrev":{},"id":88,"ts":1714772523.235,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. The \"structured\" part refers to the fact that the editor's \"source of truth\" representation of your source code is not a long sequence of utf-8 characters, but rather \"structured data\". For many structured editors, the structure of the data is the Abstract Syntax Tree (AST) of the given programming language. Typical programming languages have node types for expressions (variables, numbers, strings, function application, lambdas, array & object literals, infix boolean and prefix unary operators), statements (control structures such as ","styles":{}},{"type":"text","text":"if","styles":{"code":true}},{"type":"text","text":", ","styles":{}},{"type":"text","text":"for","styles":{"code":true}},{"type":"text","text":", and ","styles":{}},{"type":"text","text":"while","styles":{"code":true}},{"type":"text","text":", function and class declaration), and, types (type variables, type application).","styles":{}}],"children":[]},{"id":"4db72981-1cc1-4f35-8e3c-fb37cccbf403","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This has the downside of being quite complicated; both on the implementation side (ensuring that rendering, formatting, and editing each node type works as intended is a huge job) but more importantly there's a lot of mental overhead for the user, because key strokes might do different things depending on what kind of Node your cursor is in, so there's a ton to keep track of.","styles":{}}],"children":[]},{"id":"8e3f048c-0af6-4d0f-a7ed-0ffd4bf406a3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"In an attempt to avoid these downsides, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of text characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some notable features of this structured editor:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\". Deleting a close-paren deletes the whole group.","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\". Adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. error underlines & hover information are trivially preserved.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is currently inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced in the CST. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with: the \"Concrete Syntax Tree\". The \"evaluator\" for this page is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. The \"structured\" part refers to the fact that the editor's \"source of truth\" representation of your source code is not a long sequence of utf-8 characters, but rather \"structured data\". For many structured editors, the structure of the data is the Abstract Syntax Tree (AST) of the given programming language. Typical programming languages have node types for expressions (variables, numbers, strings, function application, lambdas, array & object literals, infix boolean and prefix unary operators), statements (control structures such as ","styles":{}},{"type":"text","text":"if","styles":{"code":true}},{"type":"text","text":", ","styles":{}},{"type":"text","text":"for","styles":{"code":true}},{"type":"text","text":", and ","styles":{}},{"type":"text","text":"while","styles":{"code":true}},{"type":"text","text":", function and class declaration), and, types (type variables, type application).","styles":{}}],"children":[]},{"id":"4db72981-1cc1-4f35-8e3c-fb37cccbf403","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This has the downside of being quite complicated; both on the implementation side (ensuring that rendering, formatting, and editing each node type works as intended is a huge job) but more importantly there's a lot of mental overhead for the user, because key strokes might do different things depending on what kind of Node your cursor is in, so there's a ton to keep track of.","styles":{}}],"children":[]},{"id":"8e3f048c-0af6-4d0f-a7ed-0ffd4bf406a3","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"In an attempt to avoid these downsides, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of text characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some notable features of this structured editor:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\". Deleting a close-paren deletes the whole group.","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\". Adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. error underlines & hover information are trivially preserved.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is currently inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced in the CST. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with: the \"Concrete Syntax Tree\". The \"evaluator\" for this page is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]},{"id":"e8c14d10-4142-4e52-9720-460043746437","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Here's the TypeScript type of a CST node (abbreviated to include only the variants that our parser will be concerned with).","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":89,"ts":1714772524.949,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"end"}]}],"prev":{"12":{"type":"rich-text","contents":[{"id":"335b03a4-bc3a-44a5-8f08-3ac9a4e8200f","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Because it will be relevant in a bit, ","styles":{}}],"children":[]}],"loc":12}},"meta":{},"metaPrev":{},"map":{"12":{"type":"blank","loc":12}},"nsMap":{"13":{"type":"normal","top":12,"children":[],"id":13,"display":{"id":"none","options":null}}},"nsPrev":{"13":{"type":"normal","top":12,"children":[],"id":13,"display":{"id":"none","options":null}}},"id":90,"ts":1714772528.694,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"start"}]}],"prev":{"12":{"type":"blank","loc":12}},"meta":{},"metaPrev":{},"map":{"12":null},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,15,5],"type":"normal"},"13":null},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,13,15,5],"type":"normal"},"13":{"type":"normal","top":12,"children":[],"id":13,"display":{"id":"none","options":null}}},"id":91,"ts":1714772529.032,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":20,"idx":0},{"type":"ns-top","idx":20},{"type":"rich-text","idx":19,"sel":"e36ae16e-cd08-42be-821b-f5068cee7a9d"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":15,"idx":0},{"type":"ns-top","idx":15},{"idx":14,"type":"end"}]}],"prev":{"19":null},"meta":{},"metaPrev":{},"map":{"19":{"type":"rich-text","contents":[{"id":"e36ae16e-cd08-42be-821b-f5068cee7a9d","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"And here's some code. Feel free to play around with it; everything on this page is editable.","styles":{}}],"children":[]}],"loc":19}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,15,20,5],"type":"normal"},"20":{"type":"normal","top":19,"children":[],"id":20}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,15,5],"type":"normal"},"20":null},"id":92,"ts":1714772534.216,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":20,"idx":0},{"type":"ns-top","idx":20},{"idx":19,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":20,"idx":0},{"type":"ns-top","idx":20},{"idx":19,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"20":{"type":"normal","top":19,"children":[],"id":20,"display":{"id":"none","options":null}}},"nsPrev":{"20":{"type":"normal","top":19,"children":[],"id":20}},"id":93,"ts":1714772561.724,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":94,"ts":1714772573.32,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":95,"ts":1714772579.591,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":96,"ts":1714772625.583,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":97,"ts":1714772746.208,"libraryRoot":""}],"clipboard":[],"hover":[],"regs":{},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":3},{"idx":18,"type":"inside"}]}],"cards":[{"path":[],"top":0}],"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,15,20,5],"type":"normal"},"1":{"id":1,"top":0,"children":[],"type":"normal","display":{"id":"none","options":null}},"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null},"collapsed":false},"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"},"15":{"type":"normal","top":14,"children":[],"id":15,"display":{"id":"none","options":null}},"20":{"type":"normal","top":19,"children":[],"id":20,"display":{"id":"none","options":null}}},"highlight":[],"evaluator":":repr:"}