{"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0},"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\". The \"evaluator\" for this section is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2},"4":{"type":"list","values":[6,7,9],"loc":4},"6":{"type":"identifier","text":"hello","loc":6},"7":{"type":"string","first":8,"templates":[],"loc":7},"8":{"type":"stringText","loc":8,"text":"world"},"9":{"type":"identifier","text":"12","loc":9},"12":{"type":"rich-text","contents":null,"loc":12},"-1":{"type":"list","values":[0],"loc":-1}},"root":-1,"meta":{},"history":[{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"subtext","at":0}]}],"prev":{"0":{"type":"blank","loc":0}},"meta":{},"metaPrev":{},"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"nsMap":{},"nsPrev":{},"id":0,"ts":1714767441.533,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prev":{"2":null},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[],"children":[]}],"loc":2}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3],"type":"normal"},"3":{"type":"normal","top":2,"children":[],"id":3}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1],"type":"normal"},"3":null},"id":1,"ts":1714767451.671,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"type":"rich-text","idx":0,"sel":"50e95763-10e4-446e-b3fb-103c8c8a05d0"}]}],"prev":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"meta":{},"metaPrev":{},"map":{"0":{"type":"rich-text","contents":[{"id":"50e95763-10e4-446e-b3fb-103c8c8a05d0","type":"heading","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left","level":1},"content":[{"type":"text","text":"A bit about this editor environment","styles":{}}],"children":[]}],"loc":0}},"nsMap":{},"nsPrev":{},"id":2,"ts":1714769903.102,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":1,"idx":0},{"type":"ns-top","idx":1},{"idx":0,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"1":{"id":1,"top":0,"children":[],"type":"normal","display":{"id":"none","options":null}}},"nsPrev":{"1":{"id":1,"top":0,"children":[],"type":"normal"}},"id":3,"ts":1714769906.052,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null}}},"nsPrev":{"3":{"type":"normal","top":2,"children":[],"id":3}},"id":4,"ts":1714769908.432,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"22dcf8b2-852c-4062-a235-3150b52701e9"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\":","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":5,"ts":1714769959.233,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"idx":2,"type":"end"}]}],"prev":{"4":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"blank","loc":4}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5],"type":"normal"},"5":{"type":"normal","top":4,"children":[],"id":5}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3],"type":"normal"},"5":null},"id":6,"ts":1714769997.24,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":3,"idx":0},{"type":"ns-top","idx":3},{"type":"rich-text","idx":2,"sel":"478e2a34-cfda-49a3-ae1e-fe3c822725b2"}]}],"prev":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\":","styles":{}}],"children":[]}],"loc":2}},"meta":{},"metaPrev":{},"map":{"2":{"type":"rich-text","contents":[{"id":"22dcf8b2-852c-4062-a235-3150b52701e9","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"This tutorial takes place in a structured editor, which has some important differences from a standard text editor. In contrast to other structured editors, which tend to operate on the Abstract Syntax Tree of the target language, this editor works on what I call the \"Concrete Syntax Tree\"; essentially lisp s-expressions. In my opinion, this strikes a nice balance between the benefits you get from moving beyond \"a jumble of ascii characters in a file\" while still keeping the representation simple enough that it doesn't get in the way of the editing experience.","styles":{}}],"children":[]},{"id":"65570ae8-7604-4f74-b8b4-72d7a8252b0a","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Some things of note:","styles":{}}],"children":[]},{"id":"e4570bf6-ecae-4391-b7a9-00c786111bfb","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"it's impossible to have \"unbalanced parenthesis\" or a \"missing close-quote\"","styles":{}}],"children":[]},{"id":"17e00aa5-b109-42b6-8f05-3c8d582c273a","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"code formatting is automatic (a la prettier)","styles":{}}],"children":[]},{"id":"cd8bc2b2-a1ba-4143-b4e6-91420240f913","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"AST locations are much more precise than \"line & column\"; adding code before or after a given identifier doesn't cause the editor to \"lose track of it\"; e.g. errors & hover information is preserved, etc.","styles":{}}],"children":[]},{"id":"eda7b944-66bf-43a0-9cdb-dbdf2a837871","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"we can attach ","styles":{}},{"type":"text","text":"meta-data","styles":{"bold":true}},{"type":"text","text":" to individual AST nodes; for example marking a node that we would like to be \"traced\" during the next execution.","styles":{}}],"children":[]},{"id":"237ad83e-a83c-4e77-83ca-f8e4f14abf5e","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"rendering gets more interesting! This rich text block you're reading is technically a comment (as far as the compiler is concerned). Later on you'll see the \"fixture test render plugin\", which takes a toplevel expression of a certain form and renders a nice table of inputs & outputs, highlighting any tests that are failing.","styles":{}}],"children":[]},{"id":"ebeb2d70-82c5-44f1-974a-68050321cba1","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"navigation has lots of nice affordances; e.g. typing ","styles":{}},{"type":"text","text":")","styles":{"code":true}},{"type":"text","text":" will take you to the end of whatever s-expression your cursor is inside of.","styles":{}}],"children":[]},{"id":"f4ebf65a-abd0-4ab4-9374-9cc7f84320ca","type":"bulletListItem","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"crucially, I've put a lot of effort into making the typing experience as un-surprising as possible. If you're looking at some code, typing in each of the characters of the plain-text representation in order results in that code getting reproduced. (If you're tried any other structured editors before, you'll know that this is rarely the case!)","styles":{}}],"children":[]},{"id":"478e2a34-cfda-49a3-ae1e-fe3c822725b2","type":"paragraph","props":{"textColor":"default","backgroundColor":"default","textAlignment":"left"},"content":[{"type":"text","text":"Let's familiarize ourselves with the kinds of syntax we'll be working with; the \"Concrete Syntax Tree\". The \"evaluator\" for this section is set to ","styles":{}},{"type":"text","text":"REPR","styles":{"code":true}},{"type":"text","text":", which simply outputs the JSON representation of the CST for a given toplevel term.","styles":{}}],"children":[]}],"loc":2}},"nsMap":{},"nsPrev":{},"id":7,"ts":1714770003.481,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"subtext","at":0}]}],"prev":{"4":{"type":"blank","loc":4}},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[],"loc":4}},"nsMap":{},"nsPrev":{},"id":8,"ts":1714770034.588,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"inside"}]}],"prev":{"4":{"type":"list","values":[],"loc":4},"6":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6],"loc":4},"6":{"type":"identifier","text":"h","loc":6}},"nsMap":{},"nsPrev":{},"id":9,"ts":1714770034.916,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":5}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":1}]}],"prev":{"6":{"type":"identifier","text":"h","loc":6}},"meta":{},"metaPrev":{},"map":{"6":{"type":"identifier","text":"hello","loc":6}},"nsMap":{},"nsPrev":{},"id":10,"ts":1714770035.056,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":0},{"idx":6,"type":"subtext","at":5}]}],"prev":{"4":{"type":"list","values":[6],"loc":4},"7":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"blank","loc":7}},"nsMap":{},"nsPrev":{},"id":11,"ts":1714770035.617,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"inside"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prev":{"7":{"type":"blank","loc":7}},"meta":{},"metaPrev":{},"map":{"7":{"type":"array","values":[],"loc":7}},"nsMap":{},"nsPrev":{},"id":12,"ts":1714770035.751,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"inside"}]}],"prev":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"array","values":[],"loc":7}},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7],"loc":4},"7":{"type":"blank","loc":7}},"nsMap":{},"nsPrev":{},"id":13,"ts":1714770036.451,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"start"}]}],"prev":{"7":{"type":"blank","loc":7},"8":null},"meta":{},"metaPrev":{},"map":{"7":{"type":"string","first":8,"templates":[],"loc":7},"8":{"type":"stringText","loc":8,"text":""}},"nsMap":{},"nsPrev":{},"id":14,"ts":1714770036.645,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":1}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":0}]}],"prev":{"8":{"type":"stringText","loc":8,"text":""}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"w"}},"nsMap":{},"nsPrev":{},"id":15,"ts":1714770036.831,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":1}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"w"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"wo"}},"nsMap":{},"nsPrev":{},"id":16,"ts":1714770036.93,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":3}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":2}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"wo"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"wor"}},"nsMap":{},"nsPrev":{},"id":17,"ts":1714770036.999,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":4}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":3}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"wor"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"worl"}},"nsMap":{},"nsPrev":{},"id":18,"ts":1714770037.128,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":5}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"text","at":0},{"idx":8,"type":"subtext","at":4}]}],"prev":{"8":{"type":"stringText","loc":8,"text":"worl"}},"meta":{},"metaPrev":{},"map":{"8":{"type":"stringText","loc":8,"text":"world"}},"nsMap":{},"nsPrev":{},"id":19,"ts":1714770037.219,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"start"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null}}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5}},"id":20,"ts":1714770214.702,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null}}},"id":21,"ts":1714770549.449,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"id":22,"ts":1714770551.94,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{},"meta":{},"metaPrev":{},"map":{},"nsMap":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"}},"nsPrev":{"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":false}},"id":23,"ts":1714770553.848,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":1},{"idx":7,"type":"end"}]}],"prev":{"4":{"type":"list","values":[6,7],"loc":4},"9":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7,9],"loc":4},"9":{"type":"blank","loc":9}},"nsMap":{},"nsPrev":{},"id":24,"ts":1714770584.994,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"start"}]}],"prev":{"9":{"type":"blank","loc":9}},"meta":{},"metaPrev":{},"map":{"9":{"type":"identifier","text":"12","loc":9}},"nsMap":{},"nsPrev":{},"id":25,"ts":1714770585.57,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":10,"type":"annot-annot"},{"idx":11,"type":"start"}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prev":{"4":{"type":"list","values":[6,7,9],"loc":4},"10":null,"11":null},"meta":{},"metaPrev":{},"map":{"4":{"type":"list","values":[6,7,10],"loc":4},"10":{"type":"annot","target":9,"annot":11,"loc":10},"11":{"type":"blank","loc":11}},"nsMap":{},"nsPrev":{},"id":26,"ts":1714770622.854,"libraryRoot":""},{"id":27,"meta":{},"metaPrev":{},"revert":26,"prev":{"4":{"type":"list","values":[6,7,10],"loc":4},"10":{"type":"annot","target":9,"annot":11,"loc":10},"11":{"type":"blank","loc":11}},"map":{"4":{"type":"list","values":[6,7,9],"loc":4},"10":null,"11":null},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":9,"type":"subtext","at":2}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"child","at":2},{"idx":10,"type":"annot-annot"},{"idx":11,"type":"start"}]}],"nsMap":{},"nsPrev":{},"ts":1714770624.716,"libraryRoot":""},{"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"rich-text","sel":0}]}],"prevAt":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":5,"idx":0},{"type":"ns-top","idx":5},{"idx":4,"type":"end"}]}],"prev":{"12":null},"meta":{},"metaPrev":{},"map":{"12":{"type":"rich-text","contents":null,"loc":12}},"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5,13],"type":"normal"},"13":{"type":"normal","top":12,"children":[],"id":13}},"nsPrev":{"0":{"id":0,"top":-1,"children":[1,3,5],"type":"normal"},"13":null},"id":28,"ts":1714770634.649,"libraryRoot":""}],"clipboard":[],"hover":[],"regs":{},"at":[{"start":[{"type":"card","idx":-1,"card":0},{"type":"ns","child":13,"idx":0},{"type":"ns-top","idx":13},{"idx":12,"type":"rich-text","sel":0}]}],"cards":[{"path":[],"top":0}],"nsMap":{"0":{"id":0,"top":-1,"children":[1,3,5,13],"type":"normal"},"1":{"id":1,"top":0,"children":[],"type":"normal","display":{"id":"none","options":null}},"3":{"type":"normal","top":2,"children":[],"id":3,"display":{"id":"none","options":null}},"5":{"type":"normal","top":4,"children":[],"id":5,"display":{"id":"pre","options":null},"collapsed":"pinned"},"13":{"type":"normal","top":12,"children":[],"id":13}},"highlight":[],"evaluator":":repr:"}