
(@type 1 1)

(@type int (+ 2 3))

(
	(fn [one :int] 3)
	(@error "invalid type" true)
)

(@type 3 ((fn [one :int] 3) 10))
(@type int ((fn [one :int] :int 3) 10))

(@error "unresolved" whatsit)

(@type string "hello")

(def name "j3")

(@type string "hello${name}world")

(@type 'Hello 'Hello )
(@type ('Hello 23) ('Hello 23) )

(def tagg (fn [one (: ['Hello 'Awesome ('Bye int)])] 23))

(tagg 'Hello)
(tagg (@error "invalid type" 'Hellos))

(fn [one (: ['Hello 'Awesome])] (tagg one))

(deftype option (tfn [T] [('Some T) 'None]))

((fn [one (: option int)] 10) 'None)
((fn [one (: option int)] 10) ('Some 100))
((fn [one (: option int)] 10) (@error "invalid type" 'Nones))
((fn [one (: option int)] 10) (@error "invalid type" ('Some "hi")))
; I think this is the better place for it?
; ((fn [one (: option int)] 10) ('Some (@error "invalid type" "hi")))

(def ; a comment)
	one 1)

(== one 1)

; (deftype what (@error "invalid type" ['One ('One 2)]))
(defn hi [one :what] 23)
; (hi ('One 2 3))

(deftype andhow (tfn [T (: [...])] ['How T]))

; should be fine
(defn hi [one (: andHow 'Who)] one)
; should fail
(defn hi [one (: andHow [('How int)])] one)
